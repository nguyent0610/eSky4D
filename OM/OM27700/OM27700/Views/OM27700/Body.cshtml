@using Ext.Net;
@using Ext.Net.MVC;
@using HQ.eSkyFramework;
@using HQ.eSkyFramework.HQControl;
@using OM27700;
@{
    Layout = null;
    var X = Html.X();
    var HQ = Html.HQ();
    var formatNum = "0,000";    
}
@(
 X.Store().ID("stoCustomerCombo")
                .AutoLoad(false)
                .PageSize(20)
                .Model(Util.GenerateModel(typeof(OM27700_pcCustomer_Result), "mdlCustomerCombo", "CustID"))
                .Proxy(
                    X.AjaxProxy()
                    .Url(Url.Action("GetCustomerCombo", "OM27700"))
                    .ActionMethods(action =>
                    {
                        action.Read = HttpMethod.POST;
                    })
                    .Reader(X.JsonReader().Root("data"))
                )
                .Parameters(ps =>
                {
                    ps.Add(new StoreParameter("lstCpnyID", "ListCpnyID", ParameterMode.Raw));
                })
                .Listeners(p =>
                {
                    //p.Load.Fn = "stoBatch_Load";
                    //p.BeforeLoad.Fn = "stoBatch_BeforeLoad";
                })
)
@(
 Html.X().Viewport().Layout(LayoutType.Fit)
    .Items(
        X.FormPanel()
        .Layout(LayoutType.Border)
        .ID("frmMain")
        .TrackResetOnLoad(true)
        .BodyPadding(5)
        .BodyBorder(0).AutoScroll(true)
        .TopBar(Util.SetupToolbar("close,Print", true, "Event.Form.menuClick"))
        .FieldDefaults(act => { act.LabelAlign = LabelAlign.Right; act.LabelWidth = 120; })
        .Items(
            X.Panel().ID("pnlHeader").Layout(LayoutType.HBox).Region(Region.North)
            .LayoutConfig(new HBoxLayoutConfig { Align = HBoxAlign.Top }).Border(false)
            .AutoScroll(true)
            .Items(
                // First Column
                X.Container().Layout(LayoutType.VBox).MarginSpec("5 0 5 0")
               .MinWidth(400)
                .LayoutConfig(new VBoxLayoutConfig { Align = VBoxAlign.Stretch })
                .Items(
                    X.Container()
                    .Layout(LayoutType.HBox)
                    .LayoutConfig(new HBoxLayoutConfig { Align = HBoxAlign.Top })
                    .Items(
                        X.Container().Layout(LayoutType.VBox)
                        .LayoutConfig(new VBoxLayoutConfig { Align = VBoxAlign.Stretch })
                        .Items(
                            HQ.Combo().ID("cboAccumulateID")
                            .HQLangCode("ProcID").HQProcedure("OM27700_pcAccumulateID")
                            .HQColumnShow("AccumulateID,Descr,FromDate,ToDate")
                            .HQHeightWidth(400, 300).ValueField("AccumulateID").DisplayField("AccumulateID")
                            .MaxLength(50).EnforceMaxLength(true).AllowBlank(false).AllowOnlyWhitespace(false)
                            .Triggers(new FieldTrigger() { Icon = TriggerIcon.Clear, HideTrigger = false })
                            .HQParam(new StoreParameterCollection() { 
                                new StoreParameter("@CpnyID", "HQ.cpnyID", ParameterMode.Raw),
                                new StoreParameter("@UserName", "HQ.userName", ParameterMode.Raw),
                                new StoreParameter("@LangID", "HQ.langID", ParameterMode.Raw) 
                            })
                            .LoadData()
                            .Listeners(l =>
                            {
                                l.TriggerClick.Handler = "if (index == 0) { this.clearValue();}";
                                l.Change.Fn = "Event.Form.cboAccumulateID_change";
                            })

                            , HQ.Combo().ID("cboApplyFor")
                            .HQLangCode("DisplayApplyFor").HQProcedure("OM27700_pcApplyFor")
                            .HQColumnShow("Code,Descr").DataIndex("ApplyFor")
                            .HQHeightWidth(400, 300).ValueField("Code").DisplayField("Descr")
                            .AllowBlank(false).AllowOnlyWhitespace(false).ForceSelection(true)
                            .Triggers(new FieldTrigger() { Icon = TriggerIcon.Clear, HideTrigger = false })
                            .HQParam(new StoreParameterCollection() { 
                                new StoreParameter("@CpnyID", "HQ.cpnyID", ParameterMode.Raw),
                                new StoreParameter("@UserName", "HQ.userName", ParameterMode.Raw),
                                new StoreParameter("@LangID", "HQ.langID", ParameterMode.Raw) 
                            })
                            .LoadData()
                            .Listeners(l =>
                            {
                                l.TriggerClick.Fn = "Event.Form.btnHideTrigger_click";
                            })
                        )

                        , X.Container().Layout(LayoutType.VBox)
                        .LayoutConfig(new VBoxLayoutConfig { Align = VBoxAlign.Stretch })
                        .Items(
                            HQ.DateField().ID("dtpFromDate")
                            .HQLangCode("FromDate").DataIndex("FromDate").AllowBlank(false)
                            .Listeners(l =>
                            {
                                l.Change.Fn = "Event.Form.dtpFromDate_change";
                            })
                            , HQ.Combo().ID("cboApplyType")
                            .HQLangCode("DisplayApplyType").HQProcedure("OM27700_pcApplyType")
                            .HQColumnShow("Code,Descr").DataIndex("ApplyType")
                            .HQHeightWidth(400, 300).ValueField("Code").DisplayField("Descr")
                            .AllowBlank(false).AllowOnlyWhitespace(false).ForceSelection(true)
                            .Triggers(new FieldTrigger() { Icon = TriggerIcon.Clear, HideTrigger = false })
                            .HQParam(new StoreParameterCollection() { 
                                new StoreParameter("@CpnyID", "HQ.cpnyID", ParameterMode.Raw),
                                new StoreParameter("@UserName", "HQ.userName", ParameterMode.Raw),
                                new StoreParameter("@LangID", "HQ.langID", ParameterMode.Raw) 
                            })
                            .LoadData()
                            .Listeners(l =>
                            {
                                l.Change.Fn = "Event.Form.cboApplyType_change";
                                l.TriggerClick.Fn = "Event.Form.cboApplyTypeTrigger_click";
                                l.Expand.Fn = "Event.Form.cboApplyType_Expand";
                            })                           
                        )
                    )

                    , HQ.TextBox().ID("txtDescr")
                    .HQLangCode("Descr").MaxLength(500).EnforceMaxLength(true)
                    .AllowBlank(false).AllowOnlyWhitespace(false).DataIndex("Descr")
                ) // First Column

                // Second Column
                , X.Container().Layout(LayoutType.VBox).MarginSpec("5 0 5 0")
                .MinWidth(200)
                .LayoutConfig(new VBoxLayoutConfig { Align = VBoxAlign.Stretch })
                .Items(
                    HQ.DateField().ID("dtpToDate")
                    .HQLangCode("ToDate").DataIndex("ToDate").AllowBlank(false)

                    , HQ.Combo().ID("cboObjApply")
                    .HQLangCode("OM27700ObjApply").HQProcedure("OM27700_pcObjectApply")
                    .HQColumnShow("Code,Descr").ForceSelection(true)
                    .HQHeightWidth(400, 300).ValueField("Code").DisplayField("Descr")
                    .DataIndex("ObjApply")
                    .AllowBlank(false)
                    .Listeners(l =>
                    {
                        l.Change.Fn = "Event.Form.cboObjApply_change";
                        l.TriggerClick.Fn = "Event.Form.btnHideTrigger_click";                   
                    })
                    .Triggers(new FieldTrigger() { Icon = TriggerIcon.Clear, HideTrigger = false })
                    .HQParam(new StoreParameterCollection() {                        
                        new StoreParameter("@CpnyID", "HQ.cpnyID", ParameterMode.Raw),
                        new StoreParameter("@UserName", "HQ.userName", ParameterMode.Raw),
                        new StoreParameter("@LangID", "HQ.langID", ParameterMode.Raw) 
                    })
                    
                    .LoadData()
                    
                    ,HQ.DateField().ID("dtpRegisForm")
                            .HQLangCode("RegisForm").DataIndex("RegisForm")
                            .Listeners(l =>
                            {
                                l.Change.Fn = "Event.Form.dtpRegisForm_change";
                            })
                ) // Second Column  

                // Second Column
                , X.Container().Layout(LayoutType.VBox).MarginSpec("5 0 5 0")
                .MinWidth(200)
                .LayoutConfig(new VBoxLayoutConfig { Align = VBoxAlign.Stretch })
                .Items(
                    HQ.Combo().ID("cboStatus")
                    .HQLangCode("Status").HQProcedure("OM27700_pcStatus")
                    .HQColumnShow("Code,Descr").DataIndex("Status")
                    .HQHeightWidth(400, 300).ValueField("Code").DisplayField("Descr")
                    .AllowBlank(false).AllowOnlyWhitespace(false).ReadOnly(true)
                    .HQParam(new StoreParameterCollection() { 
                    new StoreParameter("@CpnyID", "HQ.cpnyID", ParameterMode.Raw),
                    new StoreParameter("@UserName", "HQ.userName", ParameterMode.Raw),
                    new StoreParameter("@LangID", "HQ.langID", ParameterMode.Raw) 
                    })
                    .LoadData()
                    .Listeners(ls => ls.Change.Handler = "App.cboHandle.store.reload()")

                    , HQ.Combo().ID("cboHandle")
                    .HQLangCode("Handle").HQProcedure("OM27700_pcHandle")
                    .HQColumnShow("Code,Descr").ForceSelection(true)
                    .HQHeightWidth(400, 300).ValueField("Code").DisplayField("Descr")
                    .HQParam(new StoreParameterCollection() {                        
                        new StoreParameter("@Status", "App.cboStatus.getValue()", ParameterMode.Raw),
                        new StoreParameter("@CpnyID", "HQ.cpnyID", ParameterMode.Raw),
                        new StoreParameter("@UserName", "HQ.userName", ParameterMode.Raw),
                        new StoreParameter("@LangID", "HQ.langID", ParameterMode.Raw) 
                    }).LoadData()
                    
                    ,HQ.DateField().ID("dtpRegisTo")
                            .HQLangCode("RegisTo").DataIndex("RegisTo")
                ) // Second Column  
            )
            .Listeners(x =>
            {
                x.Render.Handler = "HQ.common.control_render(this,'accumulate')";
            })// pnlHeader

            , X.TabPanel().ID("tabInfo")
            .Region(Region.Center)
            .Layout(LayoutType.Border)
                    .Listeners(lst =>
                    {
                        lst.TabChange.Fn = "Event.Form.tabInfo_Change";
                    })
            .Items(
                X.Panel().ID("tabCompany")
                .Title(Util.GetLang("AppComp"))
                .Region(Region.Center)
                .Layout(LayoutType.Border)
                .Items(
                    X.Panel().ID("treeBranch")
                    .Region(Region.West).Flex(4)
                    .MinWidth(150).Split(true).AutoScroll(true)
                     
                    .DirectEvents(de =>
                    {
                        de.AfterRender.ExtraParams.Add(new Parameter("panelID", "treeBranch"));
                        de.AfterRender.Url = Url.Action("OM27700GetTreeBranch");
                        //de.AfterRender.FormID = "moduleCatTree" + cat.catID;
                        de.AfterRender.CleanRequest = true;
                        de.AfterRender.Method = HttpMethod.POST;
                        de.AfterRender.Success = "App.treePanelBranch.getRootNode().expand();";
                        de.AfterRender.Timeout = 60000;
                        de.AfterRender.Failure = "Ext.Msg.show({title: 'Login Error',msg: result.errorMessage,buttons: Ext.Msg.OK,icon: Ext.MessageBox.ERROR});";
                        de.AfterRender.EventMask.ShowMask = true;
                        de.AfterRender.EventMask.Msg = Util.GetLang("LoadingData");
                        de.AfterRender.EventMask.MinDelay = 500;
                    })
                    .BottomBar(
                        X.Toolbar()
                        .Items(
                            X.ToolbarFill()

                            , HQ.Button().ID("btnExpand")
                            .HQLangCode("Expand")
                            .Icon(Icon.BulletTogglePlus)
                                .Handler("App.treePanelBranch.expandAll();")

                            , X.ToolbarSpacer()
                            , X.ToolbarSeparator()
                            , X.ToolbarSpacer()

                            , HQ.Button().ID("btnCollapse")
                            .HQLangCode("Collapse")
                            .Icon(Icon.BulletToggleMinus)
                                .Handler("App.treePanelBranch.collapseAll();")

                            , X.ToolbarFill()
                        )
                    ) // treeBranch

                    , X.Panel()
                    .Region(Region.Center).Flex(1)
                    .Layout(LayoutType.VBox)
                    .MinWidth(50)
                    .LayoutConfig(new VBoxLayoutConfig { Align = VBoxAlign.Stretch, Pack = BoxPack.Center })
                    .Items(
                        HQ.Button().ID("btnAddAll")
                        .ToolTip(Util.GetLang("AddAll")).HQLangCode("AddAll")
                        .Icon(Icon.ForwardGreen).MarginSpec("5 5 0 5")
                        .Handler("Event.Tree.btnAddAll_click")

                        , HQ.Button().ID("btnAdd")
                        .ToolTip(Util.GetLang("Add")).HQLangCode("Add")
                        .Icon(Icon.PlayGreen).MarginSpec("5 5 0 5")
                        .Handler("Event.Tree.btnAdd_click")

                        , HQ.Button().ID("btnDel")
                        .ToolTip(Util.GetLang("Del")).HQLangCode("Del")
                        .Icon(Icon.ReverseGreen).MarginSpec("5 5 0 5")
                        .Handler("Event.Tree.btnDel_click")

                        , HQ.Button().ID("btnDelAll")
                        .ToolTip(Util.GetLang("DelAll")).HQLangCode("DelAll")
                        .Icon(Icon.RewindGreen).MarginSpec("5 5 0 5")
                        .Handler("Event.Tree.btnDelAll_click")
                    ) // Panel

                    ,
                    X.Panel().Region(Region.East).Flex(6).Layout(LayoutType.Fit).AutoScroll(true)
                    .Items
                    (
                        X.GridPanel().ID("grdCompany")
                        .Scroll(ScrollMode.Both)
                        .View(X.GridView().TrackOver(false))
                        .SortableColumns(false)

                        .Store(
                            X.Store()
                            .ID("stoCompany")
                            .PageSize(50)
                            .Model(Util.GenerateModel(typeof(OM27700_pgCompany_Result), "mdlCompany", ""))
                            .Parameters(ps =>
                            {
                                 ps.Add(new StoreParameter("accumulateID", "App.cboAccumulateID.getValue()", ParameterMode.Raw));

                            })
                            .ServerProxy(X.AjaxProxy().Url(Url.Action("GetCompany"))).AutoLoad(false)
                            .Listeners(l =>
                            {
                                l.BeforeLoad.Handler = "this.HQFieldKeys=['CpnyID'];";
                                l.DataChanged.Handler = "Event.Form.frmMain_fieldChange()";
                                l.Load.Fn = "Store.stoGrid_load"; 
                            })
                        )
                        .ColumnModel(
                            X.RowNumbererColumn().MinWidth(20).Width(30).MaxWidth(100).Listeners(x => x.AfterRender.Handler = "this.resizable = true")
                        
                            , X.Column().Text(Util.GetLang("CpnyID")).DataIndex("CpnyID")
                            .Editor(
                                HQ.Combo().ID("cboGCpnyID")
                                .HQProcedure("OM27700_pcCompany").HQColumnShow("CpnyID,CpnyName")
                                .HQHeightWidth(400, 300)
                                .ValueField("CpnyID").DisplayField("CpnyID")
                                .ForceSelection(true)
                                .HQParam(new StoreParameterCollection() { 
                                    new StoreParameter("@CpnyID", "HQ.cpnyID", ParameterMode.Raw),
                                    new StoreParameter("@UserName", "HQ.userName", ParameterMode.Raw),
                                    new StoreParameter("@LangID", "HQ.langID", ParameterMode.Raw) 
                                })
                                .LoadData()
                            )
                            , X.Column().MinWidth(100).Flex(1)
                            .Text(Util.GetLang("CpnyName")).DataIndex("CpnyName")
                            //.Renderer("Process.renderCpnyName")

                            , X.CommandColumn()
                            .Commands(
                                X.GridCommand()
                                .Text(Util.GetLang("Reject"))
                                .ToolTip(t => t.Text = Util.GetLang("Rejectrowchanges"))
                                .CommandName("reject")
                                .Icon(Icon.ArrowUndo)
                            )
                            .PrepareToolbar(t => t.Handler = "toolbar.items.get(0).setVisible(record.dirty);")
                            .Listeners(l => l.Command.Handler = "Event.Grid.grd_reject(this, record);")
                        )
                        .SelectionModel(X.RowSelectionModel().ID("slmCompany").Mode(SelectionMode.Multi))
                        .BottomBar(
                            X.PagingToolbar()
                            .Items(
                                X.Label("Page size:"),
                                X.ToolbarSpacer(10),
                                X.ComboBox()
                                .Width(80)
                                .Items("1", "2", "10", "20", "30", "50")
                                .SelectedItems("50")
                                .Listeners(l =>
                                    {
                                        l.Select.Fn = "HQ.grid.onPageSelect";
                                    })
                            )
                            .Plugins(X.ProgressBarPager().ID("paggrdCompany"))
                        )              
                        .Plugins(
                            X.CellEditing()
                            .ClicksToEdit(1)
                            .Listeners(ls =>
                            {
                                ls.BeforeEdit.Fn = "Event.Grid.grdCpnyID_beforeEdit";
                                ls.Edit.Fn = "Event.Grid.grdCpnyID_edit";
                                ls.ValidateEdit.Fn = "Event.Grid.grdCpnyID_validateEdit";
                            })
                        ) // grdCompany
                        .Features(
                                X.GridFilters()
                                .Local(true)
                                .Filters(
                                    X.StringFilter().DataIndex("CpnyID"),
                                    X.StringFilter().DataIndex("CpnyName")
                                )
                            )
                    )
                )
                .Listeners(x =>
                {
                    x.Activate.Handler = "HQ.focus = 'cpny'";
                    x.Render.Handler = "HQ.common.control_render(this,'cpny')";
                }) // tabCompany
            
                // Tab Level
                //////////
                , X.Panel().ID("tabLevel")
                .Title(Util.GetLang("LevelID"))
                .Region(Region.Center)
                .Layout(LayoutType.Border)
                .Items(
                    X.Panel().ID("pnlLevel")
                    .Region(Region.Center)
                    .Layout(LayoutType.Fit)
                    .Flex(1).Split(true)
                    .Items(
                        X.GridPanel().ID("grdLevel")
                        .Layout(LayoutType.Fit)
                        .Scroll(ScrollMode.Both)
                        .View(X.GridView().TrackOver(false))
                        .SortableColumns(false)
                        .StoreID("stoLevel")
                        .ColumnModel(
                            X.RowNumbererColumn().MinWidth(20).Width(30).MaxWidth(100).Listeners(x => x.AfterRender.Handler = "this.resizable = true")

                            , X.Column().Text(Util.GetLang("Level")).DataIndex("LevelID").Width(80)

                            , X.Column().Text(Util.GetLang("Descr")).DataIndex("LevelDescr").Width(200)
                            .Editor(
                                HQ.TextBox().SelectOnFocus(true).MaxLength(200).EnforceMaxLength(true)
                            )

                            , X.NumberColumn().ID("colPoint").Text(Util.GetLang("OM27700Point")).DataIndex("Point").Hidden(true)
                                .StyleSpec("text-align:right;").Format(formatNum).Align(Alignment.Right)
                            .Editor(
                                HQ.NumberField().DecimalPrecision(0).SelectOnFocus(true)
                            )
                            , X.NumberColumn().ID("colLevelFrom").Text(Util.GetLang("OM27700LevelFrom")).DataIndex("LevelFrom")
                                .StyleSpec("text-align:right;").Format(formatNum).Align(Alignment.Right)
                            .Editor(
                                HQ.NumberField().DecimalPrecision(0).SelectOnFocus(true)
                            )
                            , X.NumberColumn().ID("colLevelTo").Text(Util.GetLang("OM27700LevelTo")).DataIndex("LevelTo")
                            .StyleSpec("text-align:right;").Format(formatNum).Align(Alignment.Right)
                            .Editor(
                                HQ.NumberField().DecimalPrecision(0).SelectOnFocus(true)
                            )
                            , X.NumberColumn().Text(Util.GetLang("OM27700DiscPct")).DataIndex("PercentBonus").Format("0,000.00")
                            .Align(Alignment.Right).Hideable(false).Width(120).StyleSpec("text-align:right;")
                            .Editor(
                                HQ.NumberField().SelectOnFocus(true).DecimalPrecision(2).MinValue(0)
                            )
                            , X.Column().Text(Util.GetLang("OM27700LevelType")).DataIndex("LevelType").Renderer("Event.Grid.rendererLevelType")
                            .Editor(
                                HQ.Combo().ID("cboLevelType")
                                    .HQProcedure("OM27700_pcLevelType").HQColumnShow("Code,Descr")
                                .HQHeightWidth(400, 300)
                                .ValueField("Code").DisplayField("Descr")
                                .ForceSelection(true)
                                .HQParam(new StoreParameterCollection() { 
                                    new StoreParameter("@CpnyID", "HQ.cpnyID", ParameterMode.Raw),
                                    new StoreParameter("@UserName", "HQ.userName", ParameterMode.Raw),
                                    new StoreParameter("@LangID", "HQ.langID", ParameterMode.Raw) 
                                })
                                    .LoadData()
                            )
                            , X.CommandColumn().Width(135)
                            .Commands(
                                X.GridCommand()
                                .Text(Util.GetLang("Reject"))
                                .ToolTip(t => t.Text = Util.GetLang("Rejectrowchanges"))
                                .CommandName("reject")
                                .Icon(Icon.ArrowUndo)
                            )
                            .PrepareToolbar(t => t.Handler = "toolbar.items.get(0).setVisible(record.dirty);")
                            .Listeners(l => l.Command.Handler = "Event.Grid.grd_reject(this, record);")
                        )
                        .SelectionModel(
                            X.RowSelectionModel().ID("slmLevel").Mode(SelectionMode.Single)
                            .Listeners(x =>
                            {
                                x.SelectionChange.Fn = "Event.Grid.slmLevel_selectChange";
                            })
                        )
                        .Plugins(
                            X.CellEditing()
                            .ClicksToEdit(1)
                            .Listeners(ls =>
                            {
                                ls.BeforeEdit.Fn = "Event.Grid.grd_beforeEdit";
                                ls.Edit.Fn = "Event.Grid.grd_edit";
                                ls.ValidateEdit.Fn = "Event.Grid.grd_validateEdit";
                            })
                        ) // grdLevel
                        .Features(
                            X.GridFilters()
                            .Local(true)
                            .Filters(
                                X.StringFilter().DataIndex("LevelID"),
                                X.StringFilter().DataIndex("LevelDescr"),
                                X.NumericFilter().DataIndex("LevelFrom"),
                                X.NumericFilter().DataIndex("LevelTo"),
                                X.StringFilter().DataIndex("LevelType"),
                                X.NumericFilter().DataIndex("PercentBonus"),
                                X.NumericFilter().DataIndex("Point")
                            )
                        )
                    ).Listeners(x =>
                    {
                        x.Activate.Handler = "HQ.focus = 'level'";
                        x.Render.Handler = "HQ.common.control_render(this,'level');";
                    }) // pnlLevel

                    , X.Panel().ID("pnlInvt")
                    .Region(Region.East).Hidden(true).Title(Util.GetLang("Inventory"))
                    .Flex(1).Split(true).Layout(LayoutType.Border)
                    .Items(
                        X.Panel().ID("treeInvtID")
                        .Region(Region.West)
                        .MinWidth(150).Split(true).AutoScroll(true).Width(200)                    
                        .DirectEvents(de =>
                        {
                            de.AfterRender.ExtraParams.Add(new Parameter("panelID", "treeInvtID"));
                            de.AfterRender.Url = Url.Action("OM27700GetInvt");
                            //de.AfterRender.FormID = "moduleCatTree" + cat.catID;
                            de.AfterRender.CleanRequest = true;
                            de.AfterRender.Method = HttpMethod.POST;
                            de.AfterRender.Success = "App.treePanelInvt.getRootNode().expand();";

                            de.AfterRender.Timeout = 60000;
                            de.AfterRender.Failure = "Ext.Msg.show({title: 'Login Error',msg: result.errorMessage,buttons: Ext.Msg.OK,icon: Ext.MessageBox.ERROR});";
                            de.AfterRender.EventMask.ShowMask = true;
                            de.AfterRender.EventMask.Msg = Util.GetLang("LoadingData");
                            de.AfterRender.EventMask.MinDelay = 500;
                        })
                        .BottomBar(
                            X.Toolbar()
                            .Items(
                                X.ToolbarFill()

                                , HQ.Button().ID("btnExpandInvt")
                                .HQLangCode("Expand")
                                .Icon(Icon.BulletTogglePlus)
                                .Handler("btnInvtExpand_click")

                                , X.ToolbarSpacer()
                                , X.ToolbarSeparator()
                                , X.ToolbarSpacer()

                                , HQ.Button().ID("btnCollapseInvt")
                                .HQLangCode("Collapse")
                                .Icon(Icon.BulletToggleMinus)
                                .Handler("btnInvtCollapse_click")

                                , X.ToolbarFill()
                            )
                        )
                        // treeInvt 
                        
                        
                        ,X.Panel()
                        .Region(Region.Center).Flex(1)
                        .Layout(LayoutType.VBox)
                        .MinWidth(50)
                        .LayoutConfig(new VBoxLayoutConfig { Align = VBoxAlign.Stretch, Pack = BoxPack.Center })
                        .Items(
                            HQ.Button().ID("btnAddAllInvt")
                            .ToolTip(Util.GetLang("AddAll")).HQLangCode("AddAll")
                            .Icon(Icon.ForwardGreen).MarginSpec("5 5 0 5")
                            .Handler("btnAddAllInvt_click")

                            , HQ.Button().ID("btnAddInvt")
                            .ToolTip(Util.GetLang("Add")).HQLangCode("Add")
                            .Icon(Icon.PlayGreen).MarginSpec("5 5 0 5")
                            .Handler("btnAddInvt_click")

                            , HQ.Button().ID("btnDelInvt")
                            .ToolTip(Util.GetLang("Del")).HQLangCode("Del")
                            .Icon(Icon.ReverseGreen).MarginSpec("5 5 0 5")
                            .Handler("btnDelInvt_click")

                            , HQ.Button().ID("btnDelAllInvt")
                            .ToolTip(Util.GetLang("DelAll")).HQLangCode("DelAll")
                            .Icon(Icon.RewindGreen).MarginSpec("5 5 0 5")
                            .Handler("btnDelAllInvt_click")
                        ) // Panel
                    
                        ,
                        X.Panel().ID("pnlControl").Region(Region.East).Flex(6).Layout(LayoutType.Fit).AutoScroll(true)
                        .Items
                        (
                            X.GridPanel().ID("grdInvt")                  
                            .Scroll(ScrollMode.Both)
                            .View(X.GridView().TrackOver(false))
                            .SortableColumns(false)
                            .Store(
                                X.Store()
                                .ID("stoInvt")
                                .PageSize(50)
                                .Model(Util.GenerateModel(typeof(OM27700_pgInvt_Result), "mdlInvt", ""))
                                .Parameters(ps =>
                                {
                                    ps.Add(new StoreParameter("accumulateID", "App.cboAccumulateID.getValue()", ParameterMode.Raw));

                                })
                                .ServerProxy(X.AjaxProxy().Url(Url.Action("GetInvt"))).AutoLoad(false)
                                .Listeners(l =>
                                {
                                    l.BeforeLoad.Handler = "this.HQFieldKeys=['InvtID'];";
                                    l.DataChanged.Handler = "Event.Form.frmMain_fieldChange()";
                                    l.Update.Handler = "Event.Form.frmMain_fieldChange()";
                                    l.Load.Fn = "Store.stoGrid_load";
                                })
                            )
                            .ColumnModel(
                                X.RowNumbererColumn().MinWidth(20).Width(30).MaxWidth(100).Listeners(x => x.AfterRender.Handler = "this.resizable = true")
                                , X.Column().Text(Util.GetLang("InvtID")).DataIndex("InvtID").Width(150)
                                .Editor(
                                    HQ.Combo().ID("cboColInvtID")
                                    .HQProcedure("OM27700_pcInvtID").HQColumnShow("Code,Descr")
                                    .HQHeightWidth(400, 300)
                                    .ValueField("Code").DisplayField("Code")
                                    .ForceSelection(true)
                                    .HQParam(new StoreParameterCollection() { 
                                new StoreParameter("@CpnyID", "HQ.cpnyID", ParameterMode.Raw),
                                new StoreParameter("@UserName", "HQ.userName", ParameterMode.Raw),
                                new StoreParameter("@LangID", "HQ.langID", ParameterMode.Raw) 
                            })
                                    .LoadData()
                                )

                                , X.Column().Text(Util.GetLang("Descr")).DataIndex("Descr").Width(250)
                                .Renderer("Process.renderInvtInfo")

                                , X.NumberColumn().Text(Util.GetLang("Qty")).DataIndex("Qty").Width(150)
                                .Format("0,000").Align(Alignment.Right)
                                .Editor(
                                    HQ.NumberField().DecimalPrecision(0).SelectOnFocus(true).MinValue(1)
                                )

                                , X.Column().Text(Util.GetLang("StkUnit")).DataIndex("StkUnit")
                                .Renderer("Process.renderInvtInfo")

                                , X.CommandColumn().Width(150)
                                .Commands(
                                    X.GridCommand()
                                    .Text(Util.GetLang("Reject"))
                                    .ToolTip(t => t.Text = Util.GetLang("Rejectrowchanges"))
                                    .CommandName("reject")
                                    .Icon(Icon.ArrowUndo)
                                )
                                .PrepareToolbar(t => t.Handler = "toolbar.items.get(0).setVisible(record.dirty);")
                                .Listeners(l => l.Command.Handler = "Event.Grid.grd_reject(this, record);")
                            )
                            .SelectionModel(X.RowSelectionModel().ID("slmInvt").Mode(SelectionMode.Multi))
                            .BottomBar(
                            X.PagingToolbar()
                                .Items(
                                    X.Label("Page size:"),
                                    X.ToolbarSpacer(10),
                                    X.ComboBox()
                                    .Width(80)
                                    .Items("1", "2", "10", "20", "30", "50")
                                    .SelectedItems("50")
                                    .Listeners(l =>
                                        {
                                            l.Select.Fn = "HQ.grid.onPageSelect";
                                        })
                                )
                                .Plugins(X.ProgressBarPager().ID("paggrdInvt"))
                            ) 
                            
                            .Plugins(
                                X.CellEditing()
                                .ClicksToEdit(1)
                                .Listeners(ls =>
                                {
                                    ls.BeforeEdit.Fn = "Event.Grid.grd_beforeEdit";
                                    ls.Edit.Fn = "Event.Grid.grd_edit";
                                    ls.ValidateEdit.Fn = "Event.Grid.grd_validateEdit";
                                })
                            ) // grdInvt
                            .Features(
                                X.GridFilters()
                                .Local(true)
                                .Filters(
                                    X.StringFilter().DataIndex("InvtID"),
                                    X.StringFilter().DataIndex("Descr"),
                                    X.NumericFilter().DataIndex("Qty"),
                                    X.StringFilter().DataIndex("StkUnit")
                                )
                            )
                        )
                    )
                    .Listeners(x =>
                    {
                        x.Activate.Handler = "HQ.focus = 'invt'";
                        x.Render.Handler = "HQ.common.control_render(this,'invt')";
                    })// pnlInvt
                )// tabLevel 
                                                                                              
                //////Customer
              ,  X.Panel().ID("tabCustomer")
                .Title(Util.GetLang("Customer"))
                .Region(Region.Center)
                .Disable(true)
                .Layout(LayoutType.Border)
                .Items(
                        X.Panel().ID("treeCustomer")
                        .Region(Region.West).Flex(4)
                        .MinWidth(150).Split(true).AutoScroll(true)
                        .Listeners(lst =>
                        {

                        })
                        //.DirectEvents(de =>
                        //{
                        //    de.AfterRender.ExtraParams.Add(new Parameter("panelID", "treeCustomer"));
                        //    de.AfterRender.Url = Url.Action("OM27700GetTreeCustomer");
                        //    //de.AfterRender.FormID = "moduleCatTree" + cat.catID;
                        //    de.AfterRender.CleanRequest = true;
                        //    de.AfterRender.Method = HttpMethod.POST;
                        //    de.AfterRender.Success = "App.treePanelCustomer.getRootNode().expand();";
                        //    de.AfterRender.Timeout = 60000;
                        //    de.AfterRender.Failure = "Ext.Msg.show({title: 'Login Error',msg: result.errorMessage,buttons: Ext.Msg.OK,icon: Ext.MessageBox.ERROR});";
                        //    de.AfterRender.EventMask.ShowMask = true;
                        //    de.AfterRender.EventMask.Msg = Util.GetLang("LoadingData");
                        //    de.AfterRender.EventMask.MinDelay = 500;
                        //})
                        .BottomBar(
                            X.Toolbar()
                            .Items(
                                X.ToolbarFill()

                                , HQ.Button().HQLangCode("Expand").Icon(Icon.BulletTogglePlus)
                                                    .Handler(" App.treePanelCustomer.getStore().suspendEvents();App.treePanelCustomer.expandAll(); App.treePanelCustomer.getStore().resumeEvents();")

                                , X.ToolbarSpacer()
                                , X.ToolbarSeparator()
                                , X.ToolbarSpacer()

                                , HQ.Button().HQLangCode("Collapse").Icon(Icon.BulletToggleMinus).Handler("App.treePanelCustomer.collapseAll();")

                                , X.ToolbarFill()
                            )
                        ) // treeBranch

                        , X.Panel()
                        .Region(Region.Center).Flex(1)
                        .Layout(LayoutType.VBox)
                        .MinWidth(50)
                        .LayoutConfig(new VBoxLayoutConfig { Align = VBoxAlign.Stretch, Pack = BoxPack.Center })
                        .Items(
                            HQ.Button()//.ID("btnAddAll")
                            .ToolTip(Util.GetLang("AddAll")).HQLangCode("AddAll")
                            .Icon(Icon.ForwardGreen).MarginSpec("5 5 0 5")
                            .Handler("btnCustomerAddAll_click")

                            , HQ.Button()//.ID("btnAdd")
                            .ToolTip(Util.GetLang("Add")).HQLangCode("Add")
                            .Icon(Icon.PlayGreen).MarginSpec("5 5 0 5")
                            .Handler("btnCustomerAdd_click")

                            , HQ.Button()//.ID("btnDel")
                            .ToolTip(Util.GetLang("Del")).HQLangCode("Del")
                            .Icon(Icon.ReverseGreen).MarginSpec("5 5 0 5")
                            .Handler("btnCustomerDel_click")

                            , HQ.Button()//.ID("btnDelAll")
                            .ToolTip(Util.GetLang("DelAll")).HQLangCode("DelAll")
                            .Icon(Icon.RewindGreen).MarginSpec("5 5 0 5")
                            .Handler("btnCustomerDelAll_click")
                        ) // Panel

                        ,
                         X.Panel().Region(Region.East).Flex(6).Layout(LayoutType.Fit).AutoScroll(true)
                        .Items
                        (                        
                            X.GridPanel().ID("grdCustomer")
                            .Scroll(ScrollMode.Both)
                            .View(X.GridView().TrackOver(false))
                            .SortableColumns(false)

                            .Store(
                                X.Store()
                                    .ID("stoCustomer")
                                .PageSize(50).AutoLoad(false)
                                .Model(Util.GenerateModel(typeof(OM27700_pgCustomer_Result), "mdlCustomer", ""))
                                .Parameters(ps =>
                                {
                                    ps.Add(new StoreParameter("accumulateID", "App.cboAccumulateID.getValue()", ParameterMode.Raw));
                                })
                                .ServerProxy(X.AjaxProxy().Url(Url.Action("GetCustomer")))
                                    .Listeners(l =>
                                    {
                                        l.BeforeLoad.Handler = "this.HQFieldKeys=['CustID'];";
                                        l.DataChanged.Handler = "Event.Form.frmMain_fieldChange()";
                                        l.Load.Fn = "Store.stoGrid_load";
                                    })
                            )
                            .ColumnModel(
                                X.RowNumbererColumn().MinWidth(20).Width(30).MaxWidth(100).Listeners(x => x.AfterRender.Handler = "this.resizable = true")
                                
                                , X.Column().Text(Util.GetLang("CustID")).DataIndex("CustID")
                                .Editor(
                                     X.ComboBox()
                                    .ID("cboCustID")
                                    .Name("CustID")
                                    .MinChars(1)
                                    .PageSize(20)
                                    .TypeAhead(false)
                                    .ValueField("CustID")
                                    .DisplayField("CustID")
                                    .Width(250)
                                    .LabelWidth(130)
                                    .ForceSelection(true)
                                    .Listeners(l =>
                                    {
                                        //l.Change.Fn = "cboBatNbr_Change";
                                        l.Focus.Handler = "App.cboCustID.getStore().reload()";
                                        l.TriggerClick.Handler = "if (index == 0) { this.clearValue();};";
                                    })
                                    .QueryMode(DataLoadMode.Remote)
                                    .QueryDelay(1000)
                                    .MatchFieldWidth(false)
                                    .ListConfig(
                                        X.BoundList()
                                        .Height(500)
                                        .ItemSelector(".x-boundlist-item")
                                        .LoadingText(Util.GetLang("Loading"))
                                        .Tpl(
                                            X.XTemplate()
                                            .Html(@"<tpl for='.'>   
                                                        <tpl if='[xindex] == 1'>
                                                            <table style='table-layout: fixed; width:500px !important'>
                                                                <tr>
                                                                    <th style='width:100px;'>" + Util.GetLang("CustID") + @"</th>
                                                                    <th style='width:100px;'>" + Util.GetLang("CustName") + @"</th>
                                                                    <th style='width:100px;'>" + Util.GetLang("BranchID") + @"</th>                                                
                                                                </tr>
                                                        </tpl>
                                                        <tr class='x-boundlist-item'>
                                                            <td>{CustID}</td>
                                                            <td>{CustName}</td>
                                                            <td>{BranchID}</td>
                                                        </tr>
                                                        <tpl if='[xcount-xindex] == 0'>
                                                            </table>
                                                        </tpl>
                                                    </tpl>"
                                                    )
                                        )
                                    )
                                    .Triggers(new FieldTrigger() { Icon = TriggerIcon.Clear, HideTrigger = false })
                                    .KeyMap(X.KeyMap().Binding(b => { b.Add(X.KeyBinding().KeysString(((int)KeyCode.ENTER).ToString()).Handler(@"#{CustID}.focus();")); }))
                                    .StoreID("stoCustomerCombo")
                                
                                //    HQ.Combo().ID("cboCustID")
                                //    .HQProcedure("OM27700_pcCustomer").HQColumnShow("CustID,CustName,BranchID")
                                //    .HQHeightWidth(400, 450)
                                //    .ValueField("CustID").DisplayField("CustID")
                                //    .ForceSelection(true)
                                //    .HQParam(new StoreParameterCollection() { 
                                //    new StoreParameter("@CpnyID", "HQ.cpnyID", ParameterMode.Raw),
                                //    new StoreParameter("@UserName", "HQ.userName", ParameterMode.Raw),
                                //    new StoreParameter("@LangID", "HQ.langID", ParameterMode.Raw) 
                                //})
                                //    .LoadData()
                                )


                                , X.Column().MinWidth(100).Flex(1)
                                .Text(Util.GetLang("CustName")).DataIndex("CustName")
                                //.Renderer("Process.renderCpnyName")
                                
                                , X.Column().Text(Util.GetLang("CpnyID")).DataIndex("CpnyID")
                                //.Renderer("Process.renderCustCpnyID")
                                
                                , X.NumberColumn().Text(Util.GetLang("NumRegLot")).DataIndex("NumRegLot")
                                .StyleSpec("text-align:right;").Format(formatNum).Align(Alignment.Right)
                                .Editor(
                                    HQ.NumberField().DecimalPrecision(0).SelectOnFocus(true).MinValue(0)
                                )
                                , X.CommandColumn()
                                .Commands(
                                    X.GridCommand()
                                    .Text(Util.GetLang("Reject"))
                                    .ToolTip(t => t.Text = Util.GetLang("Rejectrowchanges"))
                                    .CommandName("reject")
                                    .Icon(Icon.ArrowUndo)
                                )
                                .PrepareToolbar(t => t.Handler = "toolbar.items.get(0).setVisible(record.dirty);")
                                .Listeners(l => l.Command.Handler = "Event.Grid.grd_reject(this, record);")
                            )
                            .SelectionModel(X.RowSelectionModel().ID("slmCustomer").Mode(SelectionMode.Multi))
                            .BottomBar(
                                X.PagingToolbar()
                                .HideRefresh(true)
                                .Items(
                                    X.Label("Page size:"),
                                    X.ToolbarSpacer(10),
                                    X.ComboBox()
                                    .Width(80)
                                    .Items("1", "2", "10", "20", "30", "50")
                                    .SelectedItems("50").ForceSelection(true)
                                    .Listeners(l =>
                                        {
                                            l.Select.Fn = "HQ.grid.onPageSelect";
                                        })
                                )
                                .Plugins(X.ProgressBarPager())
                            )
                            .Plugins(
                                X.CellEditing()
                                .ClicksToEdit(1)
                                .Listeners(ls =>
                                {
                                    ls.BeforeEdit.Fn = "Event.Grid.grdCustomer_BeforeEdit";
                                    ls.Edit.Fn = "Event.Grid.grdCustID_edit";
                                    ls.ValidateEdit.Fn = "Event.Grid.grdCustID_ValidateEdit";
                                })
                            ) // grdCompany
                            .Features(
                                    X.GridFilters()
                                    .Local(true)
                                    .Filters(
                                        X.StringFilter().DataIndex("CpnyID"),
                                        X.StringFilter().DataIndex("CustID"),
                                        X.StringFilter().DataIndex("CustName")
                                    )
                                )
                       )
                )
                .Listeners(x =>
                {
                    x.Activate.Handler = "HQ.focus = 'customer'";
                    x.Render.Handler = "HQ.common.control_render(this,'customer')";
                }) // tabCustomer    
                
                 /////// Tab Sales           
                 ,  X.Panel().ID("tabSales")
                    .Title(Util.GetLang("Employees"))//.Disable(true)
                .Region(Region.Center)
                .Layout(LayoutType.Border)
                .Items(
                        X.Panel().ID("treeSales")
                        .Region(Region.West).Flex(4)
                        .MinWidth(150).Split(true).AutoScroll(true)
                        .Listeners(lst =>
                        {

                        })
                        .BottomBar(
                            X.Toolbar()
                            .Items(
                                X.ToolbarFill()

                                , HQ.Button().HQLangCode("Expand").Icon(Icon.BulletTogglePlus)
                                                            .Handler(" App.treePanelSales.getStore().suspendEvents();App.treePanelSales.expandAll(); App.treePanelSales.getStore().resumeEvents();")

                                , X.ToolbarSpacer()
                                , X.ToolbarSeparator()
                                , X.ToolbarSpacer()

                                , HQ.Button().HQLangCode("Collapse").Icon(Icon.BulletToggleMinus).Handler("App.treePanelSales.collapseAll();")

                                , X.ToolbarFill()
                            )
                        ) // treeBranch

                        , X.Panel()
                        .Region(Region.Center).Flex(1)
                        .Layout(LayoutType.VBox)
                        .MinWidth(50)
                        .LayoutConfig(new VBoxLayoutConfig { Align = VBoxAlign.Stretch, Pack = BoxPack.Center })
                        .Items(
                            HQ.Button()//.ID("btnAddAll")
                            .ToolTip(Util.GetLang("AddAll")).HQLangCode("AddAll")
                            .Icon(Icon.ForwardGreen).MarginSpec("5 5 0 5")
                            .Handler("btnSalesAddAll_click")

                            , HQ.Button()//.ID("btnAdd")
                            .ToolTip(Util.GetLang("Add")).HQLangCode("Add")
                            .Icon(Icon.PlayGreen).MarginSpec("5 5 0 5")
                            .Handler("btnSalesAdd_click")

                            , HQ.Button()//.ID("btnDel")
                            .ToolTip(Util.GetLang("Del")).HQLangCode("Del")
                            .Icon(Icon.ReverseGreen).MarginSpec("5 5 0 5")
                            .Handler("btnSalesDel_click")

                            , HQ.Button()//.ID("btnDelAll")
                            .ToolTip(Util.GetLang("DelAll")).HQLangCode("DelAll")
                            .Icon(Icon.RewindGreen).MarginSpec("5 5 0 5")
                            .Handler("btnSalesDelAll_click")
                        ) // Panel

                        , 
                         X.Panel().Region(Region.East).Flex(6).Layout(LayoutType.Fit).AutoScroll(true)
                        .Items
                        (
                        
                            X.GridPanel().ID("grdSales")
                            .Scroll(ScrollMode.Both)
                            .View(X.GridView().TrackOver(false))
                            .SortableColumns(false)

                            .Store(
                                X.Store()
                                .ID("stoSales")
                                .PageSize(50).AutoLoad(false)
                                .Model(Util.GenerateModel(typeof(OM27700_pgSalesPerson_Result), "mdlSales", ""))
                                .Parameters(ps =>
                                {
                                    ps.Add(new StoreParameter("accumulateID", "App.cboAccumulateID.getValue()", ParameterMode.Raw));
                                })
                                .ServerProxy(X.AjaxProxy().Url(Url.Action("GetSales")))
                                    .Listeners(l =>
                                    {
                                        l.BeforeLoad.Handler = "this.HQFieldKeys=['SlsperID'];";
                                        l.DataChanged.Handler = "Event.Form.frmMain_fieldChange()";
                                        l.Load.Handler = "HQ.store.insertBlank(App.stoSales, ['SlsperID']);";
                                    })
                            )
                            .ColumnModel(
                                X.RowNumbererColumn().MinWidth(20).Width(30).MaxWidth(100).Listeners(x => x.AfterRender.Handler = "this.resizable = true")

                                , X.Column().Text(Util.GetLang("SlsperID")).DataIndex("SlsperID")
                                .Editor(
                                    HQ.Combo().ID("cboSlsperID")
                                    .HQProcedure("OM27700_pcSalesPerson").HQColumnShow("SlsperID,SlsName,BranchID")
                                    .HQHeightWidth(400, 450)
                                    .ValueField("SlsperID").DisplayField("SlsperID")
                                    .ForceSelection(true)
                                    .HQParam(new StoreParameterCollection() { 
                                        
                                    new StoreParameter("@ListCpnyID", "ListCpnyID", ParameterMode.Raw),
                                    new StoreParameter("@CpnyID", "HQ.cpnyID", ParameterMode.Raw),
                                    new StoreParameter("@UserName", "HQ.userName", ParameterMode.Raw),
                                    new StoreParameter("@LangID", "HQ.langID", ParameterMode.Raw) 
                                })
                                    .LoadData()
                                )


                                , X.Column().MinWidth(100).Flex(1)
                                .Text(Util.GetLang("SlsName")).DataIndex("SlsName")
                                //.Renderer("Process.renderSlsperName")
                                
                                , X.Column().Text(Util.GetLang("CpnyID")).DataIndex("CpnyID")
                                //.Renderer("Process.renderCpnyID")
                                , X.CommandColumn()
                                .Commands(
                                    X.GridCommand()
                                    .Text(Util.GetLang("Reject"))
                                    .ToolTip(t => t.Text = Util.GetLang("Rejectrowchanges"))
                                    .CommandName("reject")
                                    .Icon(Icon.ArrowUndo)
                                )
                                .PrepareToolbar(t => t.Handler = "toolbar.items.get(0).setVisible(record.dirty);")
                                .Listeners(l => l.Command.Handler = "Event.Grid.grd_reject(this, record);")
                            )
                            .SelectionModel(X.RowSelectionModel().ID("slmSales").Mode(SelectionMode.Multi))
                            .BottomBar(
                                X.PagingToolbar()
                                .HideRefresh(true)
                                .Items(
                                    X.Label("Page size:"),
                                    X.ToolbarSpacer(10),
                                    X.ComboBox()
                                    .Width(80)
                                    .Items("1", "2", "10", "20", "30", "50")
                                    .SelectedItems("50").ForceSelection(true)
                                    .Listeners(l =>
                                        {
                                            l.Select.Fn = "HQ.grid.onPageSelect";
                                        })
                                )
                                .Plugins(X.ProgressBarPager())
                            )
                            .Plugins(
                                X.CellEditing()
                                .ClicksToEdit(1)
                                .Listeners(ls =>
                                {
                                    ls.BeforeEdit.Fn = "Event.Grid.grdSales_BeforeEdit";
                                    ls.Edit.Fn = "Event.Grid.grdSales_edit";
                                    ls.ValidateEdit.Fn = "Event.Grid.grdSales_validateEdit";
                                })
                            ) // grdCompany
                            .Features(
                                    X.GridFilters()
                                    .Local(true)
                                    .Filters(
                                        X.StringFilter().DataIndex("CpnyID"),
                                        X.StringFilter().DataIndex("SlsperID"),
                                        X.StringFilter().DataIndex("SlsName")
                                    )
                                )
                       )
                ).Listeners(x =>
                {
                    x.Activate.Handler = "App.cboSlsperID.store.reload(); HQ.focus = 'sales'";
                    x.Render.Handler = "HQ.common.control_render(this,'sales')";
                }) // tabSales
                
                , X.Panel().ID("tabSaleProduct")
                .Title(Util.GetLang("SaleProduct"))
                .Region(Region.Center)
                .Layout(LayoutType.Fit)
                .Items(
                    X.Panel().Layout(LayoutType.Border).ID("pnlSaleProduct").Region(Region.Center)
                    .Items(
                        X.Panel().ID("treeSaleInvt")
                        .Flex(4)
                        .Region(Region.West)
                        .MinWidth(150).Split(true).AutoScroll(true).Width(200)                    
                        .DirectEvents(de =>
                        {
                            de.AfterRender.ExtraParams.Add(new Parameter("panelID", "treeSaleInvt"));
                            de.AfterRender.Url = Url.Action("OM27700GetSale");
                            de.AfterRender.CleanRequest = true;
                            de.AfterRender.Method = HttpMethod.POST;
                            de.AfterRender.Success = "App.treeInvt.getRootNode().expand();";

                            de.AfterRender.Timeout = 60000;
                            de.AfterRender.Failure = "Ext.Msg.show({title: 'Login Error',msg: result.errorMessage,buttons: Ext.Msg.OK,icon: Ext.MessageBox.ERROR});";
                            de.AfterRender.EventMask.ShowMask = true;
                            de.AfterRender.EventMask.Msg = Util.GetLang("LoadingData");
                            de.AfterRender.EventMask.MinDelay = 500;
                        })
                        .BottomBar(
                            X.Toolbar()
                            .Items(
                                X.ToolbarFill()

                                , HQ.Button().ID("btnExpandSale")
                                .HQLangCode("Expand")
                                .Icon(Icon.BulletTogglePlus)
                                .Handler("btnSaleExpand_click")

                                , X.ToolbarSpacer()
                                , X.ToolbarSeparator()
                                , X.ToolbarSpacer()

                                , HQ.Button().ID("btnCollapseSale")
                                .HQLangCode("Collapse")
                                .Icon(Icon.BulletToggleMinus)
                                .Handler("btnSaleCollapse_click")

                                , X.ToolbarFill()
                            )
                        )
                        // treeInvt 
                        
                        
                        ,X.Panel().ID("pnlControlAddSale")
                        .Region(Region.Center).Flex(1)
                        .Layout(LayoutType.VBox)
                        .MinWidth(50)
                        .LayoutConfig(new VBoxLayoutConfig { Align = VBoxAlign.Stretch, Pack = BoxPack.Center })
                        .Items(
                            HQ.Button().ID("btnAddAllSale")
                            .ToolTip(Util.GetLang("AddAll")).HQLangCode("AddAll")
                            .Icon(Icon.ForwardGreen).MarginSpec("5 5 0 5")
                            .Handler("btnAddAllSale_click")

                            , HQ.Button().ID("btnAddSale")
                            .ToolTip(Util.GetLang("Add")).HQLangCode("Add")
                            .Icon(Icon.PlayGreen).MarginSpec("5 5 0 5")
                            .Handler("btnAddSale_click")

                            , HQ.Button().ID("btnDelSale")
                            .ToolTip(Util.GetLang("Del")).HQLangCode("Del")
                            .Icon(Icon.ReverseGreen).MarginSpec("5 5 0 5")
                            .Handler("btnDelSale_click")

                            , HQ.Button().ID("btnDelAllSale")
                            .ToolTip(Util.GetLang("DelAll")).HQLangCode("DelAll")
                            .Icon(Icon.RewindGreen).MarginSpec("5 5 0 5")
                            .Handler("btnDelAllSale_click")
                        ) // Panel
                    
                        ,
                        X.Panel().ID("pnlControlSale").Region(Region.East).Flex(6).Layout(LayoutType.Fit).AutoScroll(true)
                        .Items
                        (
                            X.GridPanel().ID("grdSale")                  
                            .Scroll(ScrollMode.Both)
                            .View(X.GridView().TrackOver(false))
                            .SortableColumns(false)
                            .Store(
                                X.Store()
                                .ID("stoSale")
                                .PageSize(50)
                                .Model(Util.GenerateModel(typeof(OM27700_pgSalesInvt_Result), "mdlSalesInvt", ""))
                                .Parameters(ps =>
                                {
                                    ps.Add(new StoreParameter("accumulateID", "App.cboAccumulateID.getValue()", ParameterMode.Raw));

                                })
                                .ServerProxy(X.AjaxProxy().Url(Url.Action("GetSaleInvt"))).AutoLoad(false)
                                .Listeners(l =>
                                {
                                    l.BeforeLoad.Handler = "this.HQFieldKeys=['InvtID'];";
                                    l.DataChanged.Handler = "Event.Form.frmMain_fieldChange()";
                                    l.Update.Handler = "Event.Form.frmMain_fieldChange()";
                                    l.Load.Fn = "Store.stoGrid_load";
                                })
                            )
                            .ColumnModel(
                                X.RowNumbererColumn().MinWidth(20).Width(30).MaxWidth(100).Listeners(x => x.AfterRender.Handler = "this.resizable = true")
                                , X.Column().Text(Util.GetLang("InvtID")).DataIndex("InvtID").Width(130).ID("colInvtID")
                                        .Editor(
                                            HQ.Combo().ID("cboSaleInvtID")
                                            .HQProcedure("OM27700_pcInvtID").HQColumnShow("Code,Descr")
                                            .HQHeightWidth(400, 300)
                                            .ValueField("Code").DisplayField("Code")
                                            .ForceSelection(true)
                                            .HQParam(new StoreParameterCollection() { 
                                    new StoreParameter("@CpnyID", "HQ.cpnyID", ParameterMode.Raw),
                                    new StoreParameter("@UserName", "HQ.userName", ParameterMode.Raw),
                                    new StoreParameter("@LangID", "HQ.langID", ParameterMode.Raw) 
                                })
                                            .LoadData()
                                        )

                                , X.Column().Text(Util.GetLang("Descr")).DataIndex("Descr").Width(250)
                                .Renderer("Process.renderInvtInfo")

                                , X.NumberColumn().Text(Util.GetLang("Qty")).DataIndex("Qty").Width(110)
                                .Format("0,000").Align(Alignment.Right)
                                .Editor(
                                    HQ.NumberField().DecimalPrecision(0).SelectOnFocus(true).MinValue(1)
                                )

                                , X.Column().Text(Util.GetLang("StkUnit")).DataIndex("StkUnit")
                                .Renderer("Process.renderInvtInfo")

                                , X.NumberColumn().Text(Util.GetLang("Point")).DataIndex("Point").Width(110).Hidden(true).ID("colPoint1")
                                .Format("0,000").Align(Alignment.Right)
                                .Editor(
                                    HQ.NumberField().DecimalPrecision(0).SelectOnFocus(true).MinValue(0).AllowExponential(false)
                                )
                                , X.CommandColumn().Width(150)
                                .Commands(
                                    X.GridCommand()
                                    .Text(Util.GetLang("Reject"))
                                    .ToolTip(t => t.Text = Util.GetLang("Rejectrowchanges"))
                                    .CommandName("reject")
                                    .Icon(Icon.ArrowUndo)
                                )
                                .PrepareToolbar(t => t.Handler = "toolbar.items.get(0).setVisible(record.dirty);")
                                .Listeners(l => l.Command.Handler = "Event.Grid.grd_Salereject(this, record);")
                            )
                            .SelectionModel(X.RowSelectionModel().ID("slmSale").Mode(SelectionMode.Multi))
                            .BottomBar(
                            X.PagingToolbar()
                            .Items(
                                X.Label("Page size:"),
                                X.ToolbarSpacer(10),
                                X.ComboBox()
                                .Width(80)
                                .Items("1", "2", "10", "20", "30", "50")
                                .SelectedItems("50")
                                .Listeners(l =>
                                    {
                                        l.Select.Fn = "HQ.grid.onPageSelect";
                                        
                                    })
                            ).HideRefresh(true)
                            .Plugins(X.ProgressBarPager())
                            )  
                            
                            .Plugins(
                                X.CellEditing()
                                .ClicksToEdit(1)
                                .Listeners(ls =>
                                {
                                    ls.BeforeEdit.Fn = "Event.Grid.grdSale_beforeEdit";
                                    ls.Edit.Fn = "Event.Grid.grdSale_edit";
                                    ls.ValidateEdit.Fn = "Event.Grid.grdSale_validateEdit";
                                })
                            ) // grdInvt
                            .Features(
                                X.GridFilters()
                                .Local(true)
                                .Filters(
                                    X.StringFilter().DataIndex("InvtID"),
                                    X.StringFilter().DataIndex("Descr"),
                                    X.NumericFilter().DataIndex("Qty"),
                                    X.StringFilter().DataIndex("StkUnit")
                                )
                            )
                        )
                    )
                    //.Listeners(x =>
                    //{
                    //    x.Render.Handler = "HQ.common.control_render(this,'saleProduct')";
                    //})// pnlInvt
                )
                .Listeners(x =>
                {
                    x.Activate.Handler = "HQ.focus = 'SaleProduct'";
                    x.Render.Handler = "HQ.common.control_render(this,'SaleProduct')";
                }) // tabCustomer  
            )
        )
        .Listeners(lst =>
        {
            lst.BoxReady.Fn = "Event.Form.frmMain_boxReady";
            lst.FieldChange.Fn = "Event.Form.frmMain_fieldChange";
        })// Form: frmMain
    )
)
@*@(X.DropTarget()
    .Target("={#{pnlGrdSetup}.body.dom}")
    .Group("InvtID")
    //.NotifyEnter(h => h.Fn = "notifyEnter")
    //.NotifyDrop(h => h.Fn = "notifyDrop")
)*@