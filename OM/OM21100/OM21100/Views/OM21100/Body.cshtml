@using Ext.Net;
@using Ext.Net.MVC;
@using HQ.eSkyFramework;
@using HQ.eSkyFramework.HQControl;
@using OM21100;
@{
    Layout = null;
    var X = Html.X();
    var HQ = Html.HQ();
}

@(
 Html.X().Viewport().Layout(LayoutType.Fit)
    .Items(
        X.FormPanel()
        .Layout(LayoutType.Fit)
        .ID("frmMain")
        .TrackResetOnLoad(true)
        //.DefaultAnchor("100%")
        .BodyPadding(10)
        .BodyBorder(0).AutoScroll(true)
        .TopBar(Util.SetupToolbar("PO20100", "Main.Event.menuClick"))
        .FieldDefaults(act => { act.LabelAlign = LabelAlign.Right; act.LabelWidth = 130; })
        .Items(
            X.TabPanel().ID("tabMain")
            .Layout(LayoutType.Fit)
            .Items(
                X.Panel().ID("pnlDiscDefintion")
                .Title(Util.GetLang("DiscDefintion"))
                .Layout(LayoutType.Border)
                .Items(
                    X.FormPanel().ID("frmDiscDefintionTop")
                    .Layout(LayoutType.HBox).Region(Region.North)
                    .LayoutConfig(new HBoxLayoutConfig { Align = HBoxAlign.Top }).Border(false)
                    .Items(
        // First Column
                        X.Container().Layout(LayoutType.VBox).MarginSpec("0 0 5 0").Flex(1)
                        .LayoutConfig(new VBoxLayoutConfig { Align = VBoxAlign.Stretch })
                        .MinWidth(200).MaxWidth(400)
                        .Items(

                            HQ.Combo().ID("cboDiscID")
                            .MarginSpec("5 5 0 5")
                            .HQLangCode("DiscID").HQProcedure("OM21100_pcDiscountAll").HQColumnShow("DiscID,Descr")
                            .HQHeightWidth(400, 300).ValueField("DiscID").DisplayField("DiscID")
                            .AllowBlank(false).AllowOnlyWhitespace(false).MaxLength(10).EnforceMaxLength(true)
                                 .TriggerAction(TriggerAction.All)
                            .Triggers(new FieldTrigger() { Icon = TriggerIcon.Clear, HideTrigger = false })
                            .HQParam(new StoreParameterCollection() { 
                                new StoreParameter("@BranchID", "HQ.cpnyID", ParameterMode.Raw)
                                , new StoreParameter("@UserID", "HQ.userName", ParameterMode.Raw) 
                            })
                            .LoadData()
                            .Listeners(l =>
                            {
                                l.TriggerClick.Handler = "this.clearValue(); this.store.clearFilter();";//l.TriggerClick.Fn = "DiscDefintion.Event.btnHideTrigger_click";
                                l.Change.Fn = "DiscDefintion.Event.cboDiscID_change";
                                l.Blur.Fn = "DiscDefintion.Event.cboDiscID_change";
                                l.Select.Fn = "DiscDefintion.Event.cboDiscID_select";
                            })

                            , HQ.Combo().ID("cboDiscType")
                            .MarginSpec("5 5 0 5")
                            .HQLangCode("DiscType").HQProcedure("OM21100_pcDiscType").HQColumnShow("Descr")
                            .HQHeightWidth(400, 300).ValueField("Code").DisplayField("Descr")
                            .ForceSelection(true).DataIndex("DiscType")
                            .AllowBlank(false)
                            .Triggers(new FieldTrigger() { Icon = TriggerIcon.Clear, HideTrigger = false })
                            .HQParam(new StoreParameterCollection() { 
                                new StoreParameter("@LangID", "HQ.langID", ParameterMode.Raw)
                            })
                            .LoadData()
                            .Listeners(l =>
                            {
                                l.TriggerClick.Handler = "this.clearValue(); this.store.clearFilter();";
                                l.Change.Fn = "DiscDefintion.Event.cboDiscType_change";
                            })
                        ) // Container

                        // Second Column
                        , X.Container().Layout(LayoutType.VBox).MarginSpec("0 0 5 0").Flex(1)
                        .LayoutConfig(new VBoxLayoutConfig { Align = VBoxAlign.Stretch })
                        .MinWidth(200).MaxWidth(400)
                        .Items(

                            HQ.TextBox().ID("txtDescr")
                            .MarginSpec("5 5 0 5")
                            .HQLangCode("Descr").DataIndex("Descr")
                            .MaxLength(50).EnforceMaxLength(true)
                            .AllowBlank(false)

                            , HQ.Combo().ID("cboDiscClass")
                            .MarginSpec("5 5 0 5")
                            .HQLangCode("DiscClass").HQProcedure("OM21100_pcDiscClass").HQColumnShow("Code,Descr")
                            .HQHeightWidth(400, 300).ValueField("Code").DisplayField("Descr")
                            .Editable(false).AllowBlank(false).DataIndex("DiscClass")//ForceSelection(true)
                                .Triggers(new FieldTrigger() { Icon = TriggerIcon.Clear, HideTrigger = false })
                            .HQParam(new StoreParameterCollection() { 
                                new StoreParameter("@LangID", "HQ.langID", ParameterMode.Raw)
                                ,new StoreParameter("@DiscType", "App.cboDiscType.getValue()", ParameterMode.Raw)
                            })
                            .LoadData()
                                .Listeners(l =>
                                {
                                    l.Change.Fn = "DiscDefintion.Event.cboDiscClass_change";
                                    l.TriggerClick.Handler = "this.clearValue(); this.store.clearFilter();";
                            })
                        ) // Container
                    )
                    .Listeners(ls =>
                    {
                        ls.Render.Handler = "HQ.common.control_render(this,'frmDiscDefintionTop');";
                    })// frmDiscDefintionTop

                    , X.TabPanel().ID("tabDiscDefintionCenter")
                    .Region(Region.Center)
                    .Items(
                        X.Panel().ID("pnlDiscSeq")
                        .Title(Util.GetLang("DiscSeq"))
                        .Layout(LayoutType.Border)
                        .Items(
                            X.FormPanel().ID("frmDiscSeqInfo")
                            .Layout(LayoutType.VBox)
                            .Region(Region.North)
                            .LayoutConfig(new VBoxLayoutConfig { Align = VBoxAlign.Left }).Border(false)
                            .Items(

                                X.Container().Layout(LayoutType.HBox).MarginSpec("0 0 0 0")//.Flex(1)
        // .LayoutConfig(new HBoxLayoutConfig { Align = HBoxAlign.Stretch })
                                .Items(
        // First Column
                                    X.Container().Layout(LayoutType.VBox).MarginSpec("0 0 5 0")//.Flex(1)
        // .LayoutConfig(new VBoxLayoutConfig { Align = VBoxAlign.Stretch })
                                    .MinWidth(200)//.MaxWidth(300)
                                    .Items(

                                        HQ.Combo().ID("cboDiscSeq")
                                        .MarginSpec("5 5 0 5")
                                        .HQLangCode("DiscSeq").HQProcedure("OM21100_pcDiscSequenceAll").HQColumnShow("DiscSeq,Descr")
                                        .HQHeightWidth(400, 300).ValueField("DiscSeq").DisplayField("DiscSeq")
                                        .MaxLength(10).EnforceMaxLength(true)//.HQFirstDefault(true)
                                        .AllowBlank(false).AllowOnlyWhitespace(false)
                                        .Triggers(new FieldTrigger() { Icon = TriggerIcon.Clear, HideTrigger = false })
                                        .HQParam(new StoreParameterCollection() { 
                                            new StoreParameter("@DiscID", "App.cboDiscID.getValue()", ParameterMode.Raw)
                                            , new StoreParameter("@BranchID", "HQ.cpnyID", ParameterMode.Raw)
                                            , new StoreParameter("@UserID", "HQ.userName", ParameterMode.Raw) 
                                        })
                                        .LoadData()
                                        .Listeners(l =>
                                        {
                                            l.TriggerClick.Fn = "DiscDefintion.Event.btnHideTrigger_click";
                                            l.Change.Fn = "DiscDefintion.Event.cboDiscSeq_change";
                                            l.Blur.Fn = "DiscDefintion.Event.cboDiscSeq_change";
                                            l.Select.Fn = "DiscDefintion.Event.cboDiscSeq_select";
                                            l.Expand.Handler = "App.cboDiscSeq.store.clearFilter();";
                                        })

                                        , HQ.Combo().ID("cboDiscFor")
                                        .MarginSpec("5 5 0 5")
                                        .HQLangCode("DiscFor").HQProcedure("OM21100_pcDiscFor").HQColumnShow("Descr")
                                        .HQHeightWidth(400, 300).ValueField("Code").DisplayField("Descr").DataIndex("DiscFor")
                                        .ForceSelection(true).AllowBlank(false)
                                        .Triggers(new FieldTrigger() { Icon = TriggerIcon.Clear, HideTrigger = false })
                                        .HQParam(new StoreParameterCollection() { 
                                            new StoreParameter("@LangID", "HQ.langID", ParameterMode.Raw)
                                        })
                                        .LoadData()
                                            .Listeners(l =>
                                            {
                                                l.Change.Fn = "DiscDefintion.Event.cboDiscFor_change";
                                                l.TriggerClick.Fn = "DiscDefintion.Event.btnHideTrigger_click";
                                            })

                                        , HQ.Combo().ID("cboBreakBy")
                                        .MarginSpec("5 5 0 5")
                                        .HQLangCode("BreakBy").HQProcedure("OM21100_pcBreakBy").HQColumnShow("Descr")
                                        .HQHeightWidth(400, 300).ValueField("Code").DisplayField("Descr").DataIndex("BreakBy")
                                        .ForceSelection(true).AllowBlank(false)
                                        .Triggers(new FieldTrigger() { Icon = TriggerIcon.Clear, HideTrigger = false })
                                        .HQParam(new StoreParameterCollection() { 
                                            new StoreParameter("@LangID", "HQ.langID", ParameterMode.Raw)
                                        })
                                        .LoadData()
                                            .Listeners(l =>
                                            {
                                                l.Change.Fn = "DiscDefintion.Event.cboBreakBy_change";
                                                l.TriggerClick.Fn = "DiscDefintion.Event.btnHideTrigger_click";
                                            })

                                        , HQ.Combo().ID("cboBudgetID")
                                        .MarginSpec("5 5 0 5")
                                        .HQLangCode("BudgetID").HQProcedure("OM21100_pcBudgetDiscount").HQColumnShow("BudgetID,Descr")
                                        .HQHeightWidth(400, 300).ValueField("BudgetID").DisplayField("Descr").DataIndex("BudgetID")
                                        .ForceSelection(true)
                                        .Triggers(new FieldTrigger() { Icon = TriggerIcon.Clear, HideTrigger = false })
                                        .HQParam(new StoreParameterCollection() { 
                                            new StoreParameter("@BranchID", "HQ.cpnyID", ParameterMode.Raw)
                                        })
                                        .LoadData()
                                        .Listeners(l =>
                                        {
                                            l.TriggerClick.Fn = "DiscDefintion.Event.btnHideTrigger_click";
                                        })
                                    ) // Container

                                    // Second Column
                                    , X.Container().Layout(LayoutType.VBox).MarginSpec("0 0 5 0")//.Flex(1)
        // .LayoutConfig(new VBoxLayoutConfig { Align = VBoxAlign.Stretch })
                                    .MinWidth(200)//.MaxWidth(300)
                                    .Items(

                                        HQ.Combo().ID("cboProAplForItem")
                                        .MarginSpec("5 5 0 5")
                                        .HQLangCode("ProAplForItem").HQProcedure("OM21100_pcProApl").HQColumnShow("Code,Descr")
                                        .HQHeightWidth(400, 300).ValueField("Code").DisplayField("Descr")//.LabelWidth(160)
                                        .ForceSelection(true).AllowBlank(false).DataIndex("ProAplForItem")
                                        .Triggers(new FieldTrigger() { Icon = TriggerIcon.Clear, HideTrigger = false })
                                        .HQParam(new StoreParameterCollection() { 
                                            new StoreParameter("@LangID", "HQ.langID", ParameterMode.Raw)
                                        })
                                        .LoadData()
                                            .Listeners(l =>
                                            {
                                                l.TriggerClick.Fn = "DiscDefintion.Event.btnHideTrigger_click";
                                                l.Change.Fn = "DiscDefintion.Event.cboProAplForItem_change";
                                                l.BeforeShow.Fn = "DiscDefintion.Event.cboProAplForItem_beforeShow";
                                            })

                                        , HQ.DateField().ID("dteStartDatePO")
                                        .MarginSpec("5 5 0 5")
                                        .HQLangCode("StartDatePO").DataIndex("POStartDate")
                                        .Hidden(true)

                                        , HQ.DateField().ID("dteEndDatePO")
                                        .MarginSpec("5 5 0 5")
                                        .HQLangCode("EndDatePO").DataIndex("POEndDate")
                                        .Hidden(true)

                                        , HQ.DateField().ID("dteStartDate")
                                        .MarginSpec("5 5 0 5")
                                        .HQLangCode("StartDate").DataIndex("StartDate")

                                        , HQ.DateField().ID("dteEndDate")
                                        .MarginSpec("5 5 0 5")
                                        .HQLangCode("EndDate").DataIndex("EndDate")
                                    ) // Container

                                    // Third Column
                                    , X.Container().Layout(LayoutType.VBox).MarginSpec("0 0 5 0")//.Flex(1)
                                    .MinWidth(200)
        //.LayoutConfig(new VBoxLayoutConfig { Align = VBoxAlign.Stretch })
                                    .Items(
                                        HQ.Combo().ID("cboStatus")
                                        .MarginSpec("5 5 0 5")
                                        .HQLangCode("Status").HQProcedure("OM21100_pcStatus").HQColumnShow("Descr")
                                        .HQHeightWidth(400, 300).ValueField("Code").DisplayField("Descr")
                                        .ReadOnly(true).DataIndex("Status")
                                        .HQParam(new StoreParameterCollection() { 
                                            new StoreParameter("@UserID", "HQ.userName", ParameterMode.Raw)
                                            , new StoreParameter("@LangID", "HQ.langID", ParameterMode.Raw)
                                        })
                                        .LoadData()
                                        .Listeners(l => l.Change.Handler = "App.cboHandle.store.reload()")

                                        , HQ.Combo().ID("cboHandle")
                                        .MarginSpec("5 5 0 5")
                                        .HQLangCode("Handle").HQProcedure("OM21100_pcHandle").HQColumnShow("Descr")
                                        .HQHeightWidth(400, 300).ValueField("ToStatus").DisplayField("Descr")
                                        .ForceSelection(true)
                                        .HQParam(new StoreParameterCollection() { 
                                            new StoreParameter("@UserID", "HQ.userName", ParameterMode.Raw)
                                            , new StoreParameter("@LangID", "HQ.langID", ParameterMode.Raw)
                                            , new StoreParameter("@Status", "App.cboStatus.getValue()", ParameterMode.Raw)
                                        })
                                        .LoadData()

                                        , HQ.Checkbox().ID("chkPOUse")
                                        .MarginSpec("5 5 0 160")
                                        .BoxLabel(Util.GetLang("POUse")).DataIndex("POUse")
                                        .Hidden(true)
                                    ) // Container

                                    // Forth Column
                                    , X.Container().Layout(LayoutType.VBox).MarginSpec("0 0 5 0")//.MaxWidth(150)
        // .LayoutConfig(new VBoxLayoutConfig { Align = VBoxAlign.Stretch })
                                    .Items(
                                        HQ.Checkbox().ID("chkActive")
                                        .MarginSpec("5 5 0 10")
                                        .BoxLabel(Util.GetLang("Active")).DataIndex("Active")

                                        , HQ.Checkbox().ID("chkDiscTerm")
                                        .MarginSpec("5 5 0 10")
                                        .BoxLabel(Util.GetLang("DiscTerm")).DataIndex("Promo")

                                        , HQ.Checkbox().ID("chkAutoFreeItem")
                                        .MarginSpec("5 5 0 10")
                                        .BoxLabel(Util.GetLang("AutoFreeItem")).DataIndex("AutoFreeItem")

                                        , HQ.Checkbox().ID("chkAllowEditDisc")
                                        .MarginSpec("5 5 0 10")
                                        .BoxLabel(Util.GetLang("AllowEditDisc")).DataIndex("AllowEditDisc")
                                        .Hidden(true)
                                    ) // Container
                                ),
                                X.Container().Layout(LayoutType.VBox).MarginSpec("0 0 5 0")
        //.LayoutConfig(new HBoxLayoutConfig { Align = HBoxAlign.LE })
                                .Items(
                                     HQ.TextBox().ID("txtSeqDescr")
                                    .MarginSpec("0 5 0 5")
                                    .HQLangCode("Descr").DataIndex("Descr")

                                    .StyleSpec("text-align:left").Width(880)
        //.MaxLength(50).EnforceMaxLength(true)
                                    .AllowBlank(false)
                                )
                            )
                            .Listeners(ls =>
                            {
                                ls.Render.Handler = "HQ.common.control_render(this,'frmDiscSeqInfo');";
                            }) // frmDiscSeqInfo

                            , X.Panel()
                            .Region(Region.Center)
                            .Layout(LayoutType.Border)
        //.LayoutConfig(new HBoxLayoutConfig { Align = HBoxAlign.Top})
                            .Items(
                                X.GridPanel().ID("grdDiscBreak")
                                .Title(Util.GetLang("DiscBreak")).TitleAlign(TitleAlign.Center)
                                .Region(Region.West).Flex(3)
                                .Scroll(ScrollMode.Both).Split(true)
                                .View(X.GridView().TrackOver(false))
                                .SortableColumns(false)
                                .StoreID("stoDiscBreak")
                                .ColumnModel(
                                    X.RowNumbererColumn().Width(40)
                                    , X.NumberColumn().Text(Util.GetLang("BreakQty")).DataIndex("BreakQty")
                                    .Align(Alignment.Right).Format("0,000")
                                    .Editor(
                                        X.NumberField().SelectOnFocus(true).MinValue(0).DecimalPrecision(0)
                                    )

                                    , X.NumberColumn().Text(Util.GetLang("BreakAmt")).DataIndex("BreakAmt")
                                    .Align(Alignment.Right).Format("0,000")
                                    .Editor(
                                        X.NumberField().SelectOnFocus(true).MinValue(0).DecimalPrecision(0)
                                    )

                                    , X.NumberColumn().Text(Util.GetLang("Discount")).DataIndex("DiscAmt")
                                    .Align(Alignment.Right).Format("0,000.00")
                                    .Editor(
                                        X.NumberField().SelectOnFocus(true).MinValue(0).DecimalPrecision(2)
                                    )

                                    , X.Column().Text(Util.GetLang("Descr")).DataIndex("Descr")
                                    .Editor(
                                        HQ.TextBox().SelectOnFocus(true).MaxLength(200).EnforceMaxLength(true)
                                    )

                                    , X.CommandColumn()
                                    .Commands(
                                        X.GridCommand()
                                        .Text(Util.GetLang("Reject"))
                                        .ToolTip(t => t.Text = Util.GetLang("Rejectrowchanges"))
                                        .CommandName("reject")
                                        .Icon(Icon.ArrowUndo)
                                    )
                                    .PrepareToolbar(t => t.Handler = "toolbar.items.get(0).setVisible(record.dirty);")
                                    .Listeners(l => l.Command.Handler = "Main.Event.grd_reject(this, record);")
                                )
                                .SelectionModel(
                                    X.RowSelectionModel().ID("slmDiscBreak").Mode(SelectionMode.Single)
                                    .Listeners(x =>
                                    {
                                        x.SelectionChange.Fn = "DiscDefintion.Event.slmDiscBreak_selectChange";
                                    })
                                )
                                .Plugins(
                                    X.CellEditing()
                                    .ClicksToEdit(1)
                                    .Listeners(ls =>
                                    {
                                        ls.BeforeEdit.Fn = "DiscDefintion.Event.grdDiscBreak_beforeEdit";
                                        ls.Edit.Fn = "DiscDefintion.Event.grdDiscBreak_edit";
                                        ls.ValidateEdit.Fn = "Main.Event.grd_validateEdit";
                                    })
                                )
                                .Listeners(ls =>
                                {
                                    ls.Render.Handler = "HQ.common.control_render(this,'grdDiscBreak');";
                                }) // grdDiscBreak

                            , X.Panel().ID("pnlFreeItem")
                                .Title(Util.GetLang("FreeItemList"))
                                .TitleAlign(TitleAlign.Center)
                                .Region(Region.Center).Flex(4)
                                .Layout(LayoutType.Border)
                                .Items(
                                    X.Panel().ID("treeFreeItem")
                                    .Region(Region.West).Flex(45)
                                    .MinWidth(150).Split(true)
                                    .AutoScroll(true)
                                    .SetAutoScroll(true)
                                    .DirectEvents(de =>
                                    {
                                        de.AfterRender.ExtraParams.Add(new Parameter("panelID", "treeFreeItem"));
                                        de.AfterRender.Url = Url.Action("OM21100LoadTreeFreeItem");
                                        //de.AfterRender.FormID = "moduleCatTree" + cat.catID;
                                        de.AfterRender.CleanRequest = true;
                                        de.AfterRender.Method = HttpMethod.POST;
                                        de.AfterRender.Success = "App.treePanelFreeItem.getRootNode().expand()";
                                        de.AfterRender.Timeout = 60000;
                                        de.AfterRender.Failure = "Ext.Msg.show({title: 'Login Error',msg: result.errorMessage,buttons: Ext.Msg.OK,icon: Ext.MessageBox.ERROR});";
                                        de.AfterRender.EventMask.ShowMask = true;
                                        //de.AfterRender.EventMask.Msg = Util.GetLang("LoadingData");
                                        de.AfterRender.EventMask.MinDelay = 500;
                                    })
                                    .BottomBar(
                                        X.Toolbar()
                                        .Items(
                                            X.ToolbarFill()

                                            , HQ.Button()
                                            .HQLangCode("Expand")
                                            .Icon(Icon.BulletTogglePlus)
                                            .Handler("DiscDefintion.Event.btnFreeItemExpand_click")

                                            , X.ToolbarSpacer()
                                            , X.ToolbarSeparator()
                                            , X.ToolbarSpacer()

                                            , HQ.Button()
                                            .HQLangCode("Collapse")
                                            .Icon(Icon.BulletToggleMinus)
                                            .Handler("DiscDefintion.Event.btnFreeItemCollapse_click")

                                            , X.ToolbarFill()
                                        )
                                    ) // treeBranch

                                    // Second Column
                                    , X.Panel()
                                    .Region(Region.Center).Flex(15)
                                    .Layout(LayoutType.VBox)
                                    .MinWidth(50)
                                    .LayoutConfig(new VBoxLayoutConfig { Align = VBoxAlign.Stretch, Pack = BoxPack.Center })
                                    .Items(
                                        HQ.Button()
                                        .ToolTip(Util.GetLang("AddAll")).HQLangCode("AddAll")
                                        .Icon(Icon.ForwardGreen).MarginSpec("5 5 0 5")
                                        .Handler("DiscDefintion.Event.btnAddAllFreeItem_click")

                                        , HQ.Button()
                                        .ToolTip(Util.GetLang("Add")).HQLangCode("Add")
                                        .Icon(Icon.PlayGreen).MarginSpec("5 5 0 5")
                                        .Handler("DiscDefintion.Event.btnAddFreeItem_click")

                                        , HQ.Button()
                                        .ToolTip(Util.GetLang("Del")).HQLangCode("Del")
                                        .Icon(Icon.ReverseGreen).MarginSpec("5 5 0 5")
                                        .Handler("DiscDefintion.Event.btnDelFreeItem_click")

                                        , HQ.Button()
                                        .ToolTip(Util.GetLang("DelAll")).HQLangCode("DelAll")
                                        .Icon(Icon.RewindGreen).MarginSpec("5 5 0 5")
                                        .Handler("DiscDefintion.Event.btnDelAllFreeItem_click")
                                    ) // Container

                                    , X.GridPanel().ID("grdFreeItem")
        //.Title(Util.GetLang("FreeItemList"))
        // .Scroll(ScrollMode.Both)
        //.Layout(LayoutType.Fit)
                                    .Region(Region.East).Flex(60)
                                    .View(X.GridView().TrackOver(false))
                                    .SortableColumns(false)
                                    .StoreID("stoFreeItem")

                                        //.Store(
        //    X.Store().ID("stoFreeItem").AutoLoad(false)
        //    .PageSize(50)
        //        .Model(Util.GenerateModel(typeof(OM21100_pgFreeItem_Result), "mdlFreeItem", "DiscID,DiscSeq,LineRef,FreeItemID"))
        //    .Listeners(l =>
        //        {
        //            l.BeforeLoad.Handler = "this.HQFieldKeys=['DiscID', 'DiscSeq', 'LineRef', 'FreeItemID'];";
        //            l.Load.Fn = "Main.Event.sto_load";
        //            l.Update.Handler = "Main.Event.frmMain_fieldChange()";
        //            l.DataChanged.Handler = "Main.Event.frmMain_fieldChange()";
        //        })
        //    .ServerProxy(X.AjaxProxy().Url(Url.Action("GetFreeItem", "OM21100")))
        //    .Parameters(ps =>
        //        {
        //            ps.Add(new StoreParameter("discID", "App.cboDiscID.getValue()", ParameterMode.Raw));
        //            ps.Add(new StoreParameter("discSeq", "App.cboDiscSeq.getValue()", ParameterMode.Raw));
        //        })
        //)


                                    .ColumnModel(
        //X.RowNumbererColumn().Width(40)
                                        X.Column().Text(Util.GetLang("InvtID")).DataIndex("FreeItemID")
                                        .Editor(
                                            HQ.Combo().ID("cboFreeItemID")
                                            .HQProcedure("OM21100_pcInventoryActiveByBranch")
                                            .HQColumnShow("InvtID,Descr,Descr1,BarCode,Color")
                                            .HQHeightWidth(400, 300)
                                            .ValueField("InvtID").DisplayField("InvtID")
                                            .ForceSelection(true).SelectOnFocus(true)
                                            .HQParam(new StoreParameterCollection() { 
                                                new StoreParameter("@BranchID","HQ.cpnyID",ParameterMode.Raw)
                                                 ,new StoreParameter("@UserID", "HQ.userName", ParameterMode.Raw)
                                                , new StoreParameter("@LangID", "HQ.langID", ParameterMode.Raw)
                                                
                                            })
                                            .LoadData()
                                        )

                                        , X.Column().Text(Util.GetLang("Descr")).DataIndex("Descr")
                                        .Renderer("DiscDefintion.Process.renderFreeItemName")

                                        , X.Column().Text(Util.GetLang("UOM")).DataIndex("UnitDescr")
                                        .Renderer("DiscDefintion.Process.renderFreeItemName")
                                        .Editor(
                                            HQ.Combo().ID("cboGUnitDescr")
                                            .HQProcedure("OM21100_pcClassUnitDescrByInvtID")//ok
                                            .HQColumnShow("FromUnit,ClassID")
                                            .HQHeightWidth(400, 300)
                                            .ValueField("FromUnit").DisplayField("FromUnit")
                                            .ForceSelection(true).SelectOnFocus(true)
                                            .HQParam(new StoreParameterCollection() { 
                                                new StoreParameter("@InvtID","Main.Process.getParamForGridCombo(App.grdFreeItem,'FreeItemID')",ParameterMode.Raw)//se fix lai
                                            })
                                            .LoadData()
        //.Listeners(x => x.Expand.Handler = "this.store.reload()")
                                        )

                                        , X.NumberColumn().Text(Util.GetLang("Qty")).DataIndex("FreeItemQty")
                                        .Align(Alignment.Right).Format("0,000")
                                        .Editor(
                                            HQ.NumberField().SelectOnFocus(true).MinValue(0).DecimalPrecision(0)
                                        )

                                        , X.Column().Text(Util.GetLang("BudgetID")).DataIndex("FreeItemBudgetID")
                                        .Editor(
                                            HQ.Combo().ID("cboGFreeItemBudgetID")
                                            .HQProcedure("OM21100_pcBudgetFreeItem").HQColumnShow("BudgetID,Descr")
                                            .HQHeightWidth(400, 300)
                                            .ValueField("BudgetID").DisplayField("BudgetID")
                                            .ForceSelection(true).SelectOnFocus(true)
                                            .HQParam(new StoreParameterCollection() { 
                                                new StoreParameter("@BranchID","HQ.cpnyID",ParameterMode.Raw)
                                            })
                                            .LoadData()
                                        )

                                        , X.CommandColumn()
                                        .Commands(
                                            X.GridCommand()
                                            .Text(Util.GetLang("Reject"))
                                            .ToolTip(t => t.Text = Util.GetLang("Rejectrowchanges"))
                                            .CommandName("reject")
                                            .Icon(Icon.ArrowUndo)
                                        )
                                        .PrepareToolbar(t => t.Handler = "toolbar.items.get(0).setVisible(record.dirty);")
                                        .Listeners(l => l.Command.Handler = "Main.Event.grd_reject(this, record);")
                                    )
                                    .SelectionModel(X.RowSelectionModel().ID("slmFreeItem").Mode(SelectionMode.Multi))
        // .BottomBar(
        //    X.PagingToolbar()
        //    .HideRefresh(true)
        //    .Items(
        //        X.Label("Page size:"),
        //        X.ToolbarSpacer(10),
        //        X.ComboBox()
        //        .Width(80)
        //        .Items("1", "2", "10", "20", "30", "50")
        //        .SelectedItems("50")
        //        .Listeners(l =>
        //            {
        //                l.Select.Fn = "HQ.grid.onPageSelect";
        //            })
        //    )
        //)
                                    .Plugins(
                                        X.CellEditing()
                                        .ClicksToEdit(1)
                                        .Listeners(ls =>
                                        {
                                            ls.BeforeEdit.Fn = "DiscDefintion.Event.grdFreeItem_beforeEdit";
                                            ls.Edit.Fn = "DiscDefintion.Event.grdFreeItem_edit";
                                            ls.ValidateEdit.Fn = "Main.Event.grd_validateEdit";
                                        })
                                    )
                                    .Listeners(ls =>
                                    {
                                        ls.Render.Handler = "HQ.common.control_render(this,'grdFreeItem')";
                                    }) // grdFreeItem
                                )
                            ) // Panel
                        )// pnlDiscSeq

                        , X.Panel().ID("pnlAppComp")
                        .Title(Util.GetLang("AppComp"))
                        .Region(Region.Center)
                        .Layout(LayoutType.Border)
                        .Items(
        // First Column
                            X.Panel().ID("treeBranch")
                            .Region(Region.West).Flex(6)
                            .MinWidth(150).Split(true).AutoScroll(true)
                            .DirectEvents(de =>
                            {
                                de.AfterRender.ExtraParams.Add(new Parameter("panelID", "treeBranch"));
                                de.AfterRender.Url = Url.Action("OM21100GetTreeBranch");
                                //de.AfterRender.FormID = "moduleCatTree" + cat.catID;
                                de.AfterRender.CleanRequest = true;
                                de.AfterRender.Method = HttpMethod.POST;
                                de.AfterRender.Success = "App.treePanelBranch.getRootNode().expand()";
                                de.AfterRender.Timeout = 60000;
                                de.AfterRender.Failure = "Ext.Msg.show({title: 'Login Error',msg: result.errorMessage,buttons: Ext.Msg.OK,icon: Ext.MessageBox.ERROR});";
                                de.AfterRender.EventMask.ShowMask = true;
                                de.AfterRender.EventMask.Msg = Util.GetLang("LoadingData");
                                de.AfterRender.EventMask.MinDelay = 500;
                            })
                            .BottomBar(
                                X.Toolbar()
                                .Items(
                                    X.ToolbarFill()

                                    , HQ.Button().ID("btnExpand")
                                    .HQLangCode("Expand")
                                    .Icon(Icon.BulletTogglePlus)
                                    .Handler("DiscDefintion.Event.btnExpand_click")

                                    , X.ToolbarSpacer()
                                    , X.ToolbarSeparator()
                                    , X.ToolbarSpacer()

                                    , HQ.Button().ID("btnCollapse")
                                    .HQLangCode("Collapse")
                                    .Icon(Icon.BulletToggleMinus)
                                    .Handler("DiscDefintion.Event.btnCollapse_click")

                                    , X.ToolbarFill()
                                )
                            ) // treeBranch

                            // Second Column
                            , X.Panel()
                            .Region(Region.Center).Flex(1)
                            .Layout(LayoutType.VBox)
                            .MinWidth(50)
                            .LayoutConfig(new VBoxLayoutConfig { Align = VBoxAlign.Stretch, Pack = BoxPack.Center })
                            .Items(
                                HQ.Button().ID("btnAddAll")
                                .ToolTip(Util.GetLang("AddAll")).HQLangCode("AddAll")
                                .Icon(Icon.ForwardGreen).MarginSpec("5 5 0 5")
                                .Handler("DiscDefintion.Event.btnAddAll_click")

                                , HQ.Button().ID("btnAdd")
                                .ToolTip(Util.GetLang("Add")).HQLangCode("Add")
                                .Icon(Icon.PlayGreen).MarginSpec("5 5 0 5")
                                .Handler("DiscDefintion.Event.btnAdd_click")

                                , HQ.Button().ID("btnDel")
                                .ToolTip(Util.GetLang("Del")).HQLangCode("Del")
                                .Icon(Icon.ReverseGreen).MarginSpec("5 5 0 5")
                                .Handler("DiscDefintion.Event.btnDel_click")

                                , HQ.Button().ID("btnDelAll")
                                .ToolTip(Util.GetLang("DelAll")).HQLangCode("DelAll")
                                .Icon(Icon.RewindGreen).MarginSpec("5 5 0 5")
                                .Handler("DiscDefintion.Event.btnDelAll_click")
                            ) // Container

                            // Third column
                            , X.GridPanel().ID("grdCompany")
                            .Region(Region.East).Flex(6)
                            .Scroll(ScrollMode.Both)
                            .View(X.GridView().TrackOver(false))
                            .SortableColumns(false)
                            .StoreID("stoCompany")
                            .ColumnModel(
                                X.RowNumbererColumn().Width(40)
                                , X.Column().Text(Util.GetLang("CpnyID")).DataIndex("CpnyID")
                                .Editor(
                                    HQ.Combo().ID("cboGCpnyID")
                                    .HQProcedure("OM21100_pcCompany").HQColumnShow("CpnyID,CpnyName")
                                    .HQHeightWidth(400, 300)
                                    .ValueField("CpnyID").DisplayField("CpnyID")
                                    .ForceSelection(true).SelectOnFocus(true)
                                    .HQParam(new StoreParameterCollection() { 
                                        new StoreParameter("@UserID","HQ.userName",ParameterMode.Raw)
                                    })
                                    .LoadData()
                                )

                                , X.Column().MinWidth(100).Flex(1)
                                .Text(Util.GetLang("CpnyName")).DataIndex("CpnyID")
                                .Renderer("DiscDefintion.Process.renderCpnyName")

                                , X.CommandColumn()
                                .Commands(
                                    X.GridCommand()
                                    .Text(Util.GetLang("Reject"))
                                    .ToolTip(t => t.Text = Util.GetLang("Rejectrowchanges"))
                                    .CommandName("reject")
                                    .Icon(Icon.ArrowUndo)
                                )
                                .PrepareToolbar(t => t.Handler = "toolbar.items.get(0).setVisible(record.dirty);")
                                .Listeners(l => l.Command.Handler = "Main.Event.grd_reject(this, record);")
                            )
                            .SelectionModel(X.RowSelectionModel().ID("slmCompany").Mode(SelectionMode.Multi))
                            .Plugins(
                                X.CellEditing()
                                .ClicksToEdit(1)
                                .Listeners(ls =>
                                {
                                    ls.BeforeEdit.Fn = "Main.Event.grd_beforeEdit";
                                    ls.Edit.Fn = "Main.Event.grd_edit";
                                    ls.ValidateEdit.Fn = "Main.Event.grd_validateEdit";
                                })
                            ) // grdCompany
                        )
                        .Listeners(ls =>
                        {
                            ls.Render.Handler = "HQ.common.control_render(this,'pnlAppComp')";
                        })// pnlAppComp
                    ) // tabDiscDefintionCenter
                ) // pnlDiscDefintion

                , X.Panel().ID("pnlDPII")
                .Region(Region.Center)
                .Title(Util.GetLang("DPII"))
                .Layout(LayoutType.Border)
                .Items(
                        X.Panel().ID("treeInventory")
                            .Region(Region.West).Flex(30)
                            .MinWidth(150).Split(true).AutoScroll(true)
                            .DirectEvents(de =>
                            {
                                de.AfterRender.ExtraParams.Add(new Parameter("panelID", "treeInventory"));
                                de.AfterRender.Url = Url.Action("OM21100LoadTreeInventory");
                                //de.AfterRender.FormID = "moduleCatTree" + cat.catID;
                                de.AfterRender.CleanRequest = true;
                                de.AfterRender.Method = HttpMethod.POST;
                                de.AfterRender.Success = "App.treePanelInvt.getRootNode().expand()";
                                de.AfterRender.Timeout = 60000;
                                de.AfterRender.Failure = "Ext.Msg.show({title: 'Login Error',msg: result.errorMessage,buttons: Ext.Msg.OK,icon: Ext.MessageBox.ERROR});";
                                de.AfterRender.EventMask.ShowMask = true;
                                de.AfterRender.EventMask.Msg = Util.GetLang("LoadingData");
                                de.AfterRender.EventMask.MinDelay = 500;
                            })
                            .BottomBar(
                                X.Toolbar()
                                .Items(
                                    X.ToolbarFill()

                                    , HQ.Button()
                                    .HQLangCode("Expand")
                                    .Icon(Icon.BulletTogglePlus)
                                        .Handler("DiscDefintion.Event.btnInvtExpand_click")

                                    , X.ToolbarSpacer()
                                    , X.ToolbarSeparator()
                                    , X.ToolbarSpacer()

                                    , HQ.Button()
                                    .HQLangCode("Collapse")
                                    .Icon(Icon.BulletToggleMinus)
                                        .Handler("DiscDefintion.Event.btnInvtCollapse_click")

                                    , X.ToolbarFill()
                                )
                            ) // treeBranch

                            // Second Column
                            ,
                            X.Panel()
                            .Region(Region.Center).Flex(8)
                            .Layout(LayoutType.VBox)
                            .MinWidth(50)
                            .LayoutConfig(new VBoxLayoutConfig { Align = VBoxAlign.Stretch, Pack = BoxPack.Center })
                            .Items(
                                HQ.Button().ID("btnInvtAddAll")
                                .ToolTip(Util.GetLang("AddAll")).HQLangCode("AddAll")
                                .Icon(Icon.ForwardGreen).MarginSpec("5 5 0 5")
                                .Handler("DiscDefintion.Event.btnAddAllInvt_click")

                                , HQ.Button().ID("btnInvtAdd")
                                .ToolTip(Util.GetLang("Add")).HQLangCode("Add")
                                .Icon(Icon.PlayGreen).MarginSpec("5 5 0 5")
                                .Handler("DiscDefintion.Event.btnAddInvt_click")

                                , HQ.Button().ID("btnInvtDel")
                                .ToolTip(Util.GetLang("Del")).HQLangCode("Del")
                                .Icon(Icon.ReverseGreen).MarginSpec("5 5 0 5")
                                .Handler("DiscDefintion.Event.btnDelInvt_click")

                                , HQ.Button().ID("btnInvtDelAll")
                                .ToolTip(Util.GetLang("DelAll")).HQLangCode("DelAll")
                                .Icon(Icon.RewindGreen).MarginSpec("5 5 0 5")
                                .Handler("DiscDefintion.Event.btnDelAllInvt_click")
                            ) // Container

                            // Third column
                            ,
                    X.GridPanel().ID("grdDiscItem")
                    .Region(Region.East).Flex(60)
                    .Scroll(ScrollMode.Both)
                    .View(X.GridView().TrackOver(false))
                    .SortableColumns(false)
        // .StoreID("stoDiscItem")                   
                    .Store(
                        X.Store().ID("stoDiscItem").AutoLoad(false)
                        .PageSize(50)
                            .Model(Util.GenerateModel(typeof(OM21100_pgDiscItem_Result), "mdlDiscItem", "DiscID,DiscSeq,InvtID", true))
                        .Listeners(l =>
                            {
                                l.BeforeLoad.Handler = "this.HQFieldKeys=['DiscID', 'DiscSeq', 'InvtID'];";
                                l.Load.Fn = "Main.Event.sto_load";
                                l.Update.Handler = "Main.Event.frmMain_fieldChange()";
                                l.DataChanged.Handler = "Main.Event.frmMain_fieldChange()";
                            })
                        .ServerProxy(X.AjaxProxy().Url(Url.Action("GetDiscItem", "OM21100")))
                        .Parameters(ps =>
                            {
                                ps.Add(new StoreParameter("discID", "App.cboDiscID.getValue()", ParameterMode.Raw));
                                ps.Add(new StoreParameter("discSeq", "App.cboDiscSeq.getValue()", ParameterMode.Raw));
                            })
                    )
                    .ColumnModel(
                        X.RowNumbererColumn().Width(40)
                        , X.Column().Text(Util.GetLang("InvtID")).DataIndex("InvtID").Width(110)
                        .Editor(
                            HQ.Combo().ID("cboDpiiInvtID")
                            .HQProcedure("OM21100_pcInventoryActiveByBranch")
                            .HQColumnShow("InvtID,Descr,Descr1,BarCode,Color")
                            .HQHeightWidth(400, 400)
                            .ValueField("InvtID").DisplayField("InvtID")
                            .ForceSelection(true).SelectOnFocus(true)
                            .HQParam(new StoreParameterCollection() { 
                                 new StoreParameter("@BranchID","HQ.cpnyID",ParameterMode.Raw)
                                                 ,new StoreParameter("@UserID", "HQ.userName", ParameterMode.Raw)
                                                , new StoreParameter("@LangID", "HQ.langID", ParameterMode.Raw)
                            })
                            .LoadData()
                        )

                        , X.Column().Text(Util.GetLang("Descr")).DataIndex("Descr").Width(200)
                        .Renderer("DiscDefintion.Process.renderDpiiInvtName")

                        , X.Column().Text(Util.GetLang("UOM")).DataIndex("UnitDesc")
                        .Renderer("DiscDefintion.Process.renderDpiiInvtName")
                        .Editor(
                            HQ.Combo().ID("cboGItemUnitDescr")
                            .HQProcedure("OM21100_pcClassUnitDescrByInvtID").HQColumnShow("FromUnit,ClassID")//ok
                            .HQHeightWidth(400, 300)
                            .ValueField("FromUnit").DisplayField("FromUnit")
                            .ForceSelection(true).SelectOnFocus(true)
                            .HQParam(new StoreParameterCollection() { 
                                new StoreParameter("@InvtID","Main.Process.getParamForGridCombo(App.grdDiscItem,'InvtID')",ParameterMode.Raw)//se fix lai
                            })
                            .LoadData()
        //.Listeners(x => x.Expand.Handler = "this.store.reload();")
                        )

                        , X.Column().Text(Util.GetLang("DiscID")).DataIndex("DiscID")

                        , X.Column().Text(Util.GetLang("DiscSeq")).DataIndex("DiscSeq")

                        , X.CommandColumn().Width(130)
                        .Commands(
                            X.GridCommand()
                            .Text(Util.GetLang("Reject"))
                            .ToolTip(t => t.Text = Util.GetLang("Rejectrowchanges"))
                            .CommandName("reject")
                            .Icon(Icon.ArrowUndo)
                        )
                        .PrepareToolbar(t => t.Handler = "toolbar.items.get(0).setVisible(record.dirty);")
                        .Listeners(l => l.Command.Handler = "Main.Event.grd_reject(this, record);")
                    )
                    .SelectionModel(X.RowSelectionModel().ID("slmDiscItem").Mode(SelectionMode.Multi))
                        .BottomBar(
                        X.PagingToolbar()
                        .HideRefresh(true)
                        .Items(
                            X.Label("Page size:"),
                            X.ToolbarSpacer(10),
                            X.ComboBox()
                            .Width(80)
                            .Items("1", "2", "10", "20", "30", "50")
                            .SelectedItems("50")
                            .Listeners(l =>
                                {
                                    l.Select.Fn = "HQ.grid.onPageSelect";
                                })
                        )
                    )
                    .Plugins(
                        X.CellEditing()
                        .ClicksToEdit(1)
                        .Listeners(ls =>
                        {
                            ls.BeforeEdit.Fn = "Main.Event.grd_beforeEdit";
                            ls.Edit.Fn = "Main.Event.grd_edit";
                            ls.ValidateEdit.Fn = "Main.Event.grd_validateEdit";
                        })
                    ) // grdDiscItem
                )
                .Listeners(ls =>
                {
                    ls.Render.Handler = "HQ.common.control_render(this,'pnlDPII')";
                })// pnlDPII

                , X.Panel().ID("pnlDPBB")
                .Title(Util.GetLang("DPBB"))
                .Layout(LayoutType.Border)
                .Region(Region.Center)
                .Items(
                        X.Panel().ID("treeBundleItem")
                                .Region(Region.West).Flex(30)
                                .MinWidth(150).Split(true).AutoScroll(true)
                                .DirectEvents(de =>
                                {
                                    de.AfterRender.ExtraParams.Add(new Parameter("panelID", "treeBundleItem"));
                                    de.AfterRender.Url = Url.Action("OM21100LoadTreeBundleItem");
                                    //de.AfterRender.FormID = "moduleCatTree" + cat.catID;
                                    de.AfterRender.CleanRequest = true;
                                    de.AfterRender.Method = HttpMethod.POST;
                                    de.AfterRender.Success = "App.treePanelBundle.getRootNode().expand()";
                                    de.AfterRender.Timeout = 60000;
                                    de.AfterRender.Failure = "Ext.Msg.show({title: 'Login Error',msg: result.errorMessage,buttons: Ext.Msg.OK,icon: Ext.MessageBox.ERROR});";
                                    de.AfterRender.EventMask.ShowMask = true;
                                    de.AfterRender.EventMask.Msg = Util.GetLang("LoadingData");
                                    de.AfterRender.EventMask.MinDelay = 500;
                                })
                                .BottomBar(
                                    X.Toolbar()
                                    .Items(
                                        X.ToolbarFill()

                                        , HQ.Button()
                                        .HQLangCode("Expand")
                                        .Icon(Icon.BulletTogglePlus)
                                            .Handler("DiscDefintion.Event.btnBundleExpand_click")

                                        , X.ToolbarSpacer()
                                        , X.ToolbarSeparator()
                                        , X.ToolbarSpacer()

                                        , HQ.Button()
                                        .HQLangCode("Collapse")
                                        .Icon(Icon.BulletToggleMinus)
                                            .Handler("DiscDefintion.Event.btnBundleCollapse_click")

                                        , X.ToolbarFill()
                                    )
                                ) // treeBranch

                                // Second Column
                                ,
                                X.Panel()
                                .Region(Region.Center).Flex(8)
                                .Layout(LayoutType.VBox)
                                .MinWidth(50)
                                .LayoutConfig(new VBoxLayoutConfig { Align = VBoxAlign.Stretch, Pack = BoxPack.Center })
                                .Items(
                                    HQ.Button()//.ID("btnInvtAddAll")
                                    .ToolTip(Util.GetLang("AddAll")).HQLangCode("AddAll")
                                    .Icon(Icon.ForwardGreen).MarginSpec("5 5 0 5")
                                    .Handler("DiscDefintion.Event.btnAddAllBundle_click")

                                    , HQ.Button()//.ID("btnInvtAdd")
                                    .ToolTip(Util.GetLang("Add")).HQLangCode("Add")
                                    .Icon(Icon.PlayGreen).MarginSpec("5 5 0 5")
                                    .Handler("DiscDefintion.Event.btnAddBundle_click")

                                    , HQ.Button()//.ID("btnInvtDel")
                                    .ToolTip(Util.GetLang("Del")).HQLangCode("Del")
                                    .Icon(Icon.ReverseGreen).MarginSpec("5 5 0 5")
                                    .Handler("DiscDefintion.Event.btnDelBundle_click")

                                    , HQ.Button()//.ID("btnInvtDelAll")
                                    .ToolTip(Util.GetLang("DelAll")).HQLangCode("DelAll")
                                    .Icon(Icon.RewindGreen).MarginSpec("5 5 0 5")
                                    .Handler("DiscDefintion.Event.btnDelAllBundle_click")
                                ) // Container

                                // Third column
                                ,
                    X.GridPanel().ID("grdBundle")
                    .Region(Region.East)
                    .Scroll(ScrollMode.Both).Flex(60)
                    .View(X.GridView().TrackOver(false))
                    .SortableColumns(false)
        //.StoreID("stoBundle")                    
                    .Store(
                        X.Store().ID("stoBundle").AutoLoad(false)
                        .PageSize(50)
                            .Model(Util.GenerateModel(typeof(OM21100_pgDiscBundle_Result), "mdlBundle", "DiscID,DiscSeq,InvtID", true))
                        .Listeners(l =>
                            {
                                l.BeforeLoad.Handler = "this.HQFieldKeys=['DiscID', 'DiscSeq', 'InvtID'];";
                                l.Load.Fn = "Main.Event.sto_load";
                                l.Update.Handler = "Main.Event.frmMain_fieldChange()";
                                l.DataChanged.Handler = "Main.Event.frmMain_fieldChange()";
                            })
                        .ServerProxy(X.AjaxProxy().Url(Url.Action("GetDiscBundle", "OM21100")))
                        .Parameters(ps =>
                            {
                                ps.Add(new StoreParameter("discID", "App.cboDiscID.getValue()", ParameterMode.Raw));
                                ps.Add(new StoreParameter("discSeq", "App.cboDiscSeq.getValue()", ParameterMode.Raw));
                            })
                    )
                    .ColumnModel(
                        X.RowNumbererColumn().Width(40)
                        , X.Column().Text(Util.GetLang("InvtID")).DataIndex("InvtID").Width(110)
                        .Editor(
                            HQ.Combo().ID("cboGInvtID")
                            .HQProcedure("OM21100_pcInventoryActiveByBranch")
                            .HQColumnShow("InvtID,Descr,Descr1,BarCode,Color")
                            .HQHeightWidth(400, 300)
                            .ValueField("InvtID").DisplayField("InvtID")
                            .ForceSelection(true).SelectOnFocus(true)
                            .HQParam(new StoreParameterCollection() { 
                                 new StoreParameter("@BranchID","HQ.cpnyID",ParameterMode.Raw)
                                                 ,new StoreParameter("@UserID", "HQ.userName", ParameterMode.Raw)
                                                , new StoreParameter("@LangID", "HQ.langID", ParameterMode.Raw)
                            })
                            .LoadData()
                        )

                        , X.Column().Text(Util.GetLang("Descr")).DataIndex("InvtID")
                        .Renderer("DiscDefintion.Process.renderGInvtName")

                        , X.Column().Text(Util.GetLang("UOM")).DataIndex("UnitDesc").Width(70)
                        .Renderer("DiscDefintion.Process.renderGInvtName")
                        .Editor(
                            HQ.Combo().ID("cboGInvtUnitDescr")
                            .HQProcedure("OM21100_pcClassUnitDescrByInvtID").HQColumnShow("FromUnit,ClassID")//ok
                            .HQHeightWidth(400, 300)
                            .ValueField("FromUnit").DisplayField("FromUnit")
                            .ForceSelection(true).SelectOnFocus(true)
                            .HQParam(new StoreParameterCollection() { 
                                new StoreParameter("@InvtID","Main.Process.getParamForGridCombo(App.grdBundle,'InvtID')",ParameterMode.Raw)//se fix lai
                            })
                            .LoadData()
        // .Listeners(x => x.Expand.Handler = "this.store.reload();")
                        )

                        , X.NumberColumn().Text(Util.GetLang("BreakQty")).DataIndex("BundleQty")
                        .Align(Alignment.Right).Format("0,000")
                        .Editor(
                            X.NumberField().SelectOnFocus(true).MinValue(0).DecimalPrecision(0)
                        )

                         , X.NumberColumn().Text(Util.GetLang("BreakAmt")).DataIndex("BundleAmt")
                         .Align(Alignment.Right).Format("0,000")
                        .Editor(
                            X.NumberField().SelectOnFocus(true).DecimalPrecision(0)
                        )

                        , X.Column().Text(Util.GetLang("DiscID")).DataIndex("DiscID")

                        , X.Column().Text(Util.GetLang("DiscSeq")).DataIndex("DiscSeq")

                        , X.CommandColumn().Width(130)
                        .Commands(
                            X.GridCommand()
                            .Text(Util.GetLang("Reject"))
                            .ToolTip(t => t.Text = Util.GetLang("Rejectrowchanges"))
                            .CommandName("reject")
                            .Icon(Icon.ArrowUndo)
                        )
                        .PrepareToolbar(t => t.Handler = "toolbar.items.get(0).setVisible(record.dirty);")
                        .Listeners(l => l.Command.Handler = "Main.Event.grd_reject(this, record);")
                    )
                    .SelectionModel(X.RowSelectionModel().ID("slmBundle").Mode(SelectionMode.Multi))
                        .BottomBar(
                        X.PagingToolbar()
                        .HideRefresh(true)
                        .Items(
                            X.Label("Page size:"),
                            X.ToolbarSpacer(10),
                            X.ComboBox()
                            .Width(80)
                            .Items("1", "2", "10", "20", "30", "50")
                            .SelectedItems("50")
                            .Listeners(l =>
                                {
                                    l.Select.Fn = "HQ.grid.onPageSelect";
                                })
                        )
                    )
                    .Plugins(
                        X.CellEditing()
                        .ClicksToEdit(1)
                        .Listeners(ls =>
                        {
                            ls.BeforeEdit.Fn = "Main.Event.grd_beforeEdit";
                            ls.Edit.Fn = "Main.Event.grd_edit";
                            ls.ValidateEdit.Fn = "Main.Event.grd_validateEdit";
                        })
                    )
        //.Features(
        //    X.GridFilters()
        //    .Local(true)
        //    .Filters(
        //            X.StringFilter().DataIndex("InvtID"),
        //        X.StringFilter().DataIndex("CustName"),
        //        X.StringFilter().DataIndex("BranchID"),
        //        X.StringFilter().DataIndex("TerritoryName")
        //    )
        //) // grdBundle
                )
                .Listeners(ls =>
                {
                    ls.Render.Handler = "HQ.common.control_render(this,'pnlDPBB')";
                })// pnlDPBB

                , X.Panel().ID("pnlDPTT")
                .Title(Util.GetLang("DPTT"))
                .Layout(LayoutType.Border)
                .Items(
                    X.GridPanel().ID("grdDiscCustClass")
                    .Region(Region.Center)
                    .Scroll(ScrollMode.Both)
                    .View(X.GridView().TrackOver(false))
                    .SortableColumns(false)
                    .StoreID("stoDiscCustClass")
                    .ColumnModel(
                        X.RowNumbererColumn().Width(40)
                        , X.Column().Text(Util.GetLang("ClassID")).DataIndex("ClassID")
                        .Editor(
                            HQ.Combo()
                            .HQProcedure("OM21100_pcCustomerPriceClass")
                            .HQColumnShow("PriceClassID,Descr")
                            .HQHeightWidth(400, 300)
                            .ForceSelection(true).SelectOnFocus(true)
                            .ValueField("PriceClassID").DisplayField("PriceClassID")
                            .LoadData()
                        )

                        , X.Column().Text(Util.GetLang("DiscID")).DataIndex("DiscID")

                        , X.Column().Text(Util.GetLang("DiscSeq")).DataIndex("DiscSeq")

                        , X.CommandColumn()
                        .Commands(
                            X.GridCommand()
                            .Text(Util.GetLang("Reject"))
                            .ToolTip(t => t.Text = Util.GetLang("Rejectrowchanges"))
                            .CommandName("reject")
                            .Icon(Icon.ArrowUndo)
                        )
                        .PrepareToolbar(t => t.Handler = "toolbar.items.get(0).setVisible(record.dirty);")
                        .Listeners(l => l.Command.Handler = "Main.Event.grd_reject(this, record);")
                    )
                    .SelectionModel(X.RowSelectionModel().ID("slmDiscCustClass").Mode(SelectionMode.Multi))
                    .Plugins(
                        X.CellEditing()
                        .ClicksToEdit(1)
                        .Listeners(ls =>
                        {
                            ls.BeforeEdit.Fn = "Main.Event.grd_beforeEdit";
                            ls.Edit.Fn = "Main.Event.grd_edit";
                            ls.ValidateEdit.Fn = "Main.Event.grd_validateEdit";
                        })
                    )
        // grdDiscCustClass
                )
                .Listeners(ls =>
                {
                    ls.Render.Handler = "HQ.common.control_render(this,'pnlDPTT')";
                }) // pnlDPTT

                , X.Panel().ID("pnlDPCC")
                .Title(Util.GetLang("DPCC"))
                .Layout(LayoutType.Border)
                .Items(
                    X.Panel().ID("treeCustomer")
                    .Region(Region.West).Flex(50)
                    .MinWidth(150).Split(true).AutoScroll(true)
                    .DirectEvents(de =>
                    {
                        de.AfterRender.ExtraParams.Add(new Parameter("panelID", "treeCustomer"));
                        de.AfterRender.Url = Url.Action("OM21100GetTreeCustomer");
                        //de.AfterRender.FormID = "moduleCatTree" + cat.catID;
                        de.AfterRender.CleanRequest = true;
                        de.AfterRender.Method = HttpMethod.POST;
                        de.AfterRender.Success = "App.treePanelCustomer.getRootNode().expand()";
                        de.AfterRender.Timeout = 60000;
                        de.AfterRender.Failure = "Ext.Msg.show({title: 'Login Error',msg: result.errorMessage,buttons: Ext.Msg.OK,icon: Ext.MessageBox.ERROR});";
                        de.AfterRender.EventMask.ShowMask = true;
                        de.AfterRender.EventMask.Msg = Util.GetLang("LoadingData");
                        de.AfterRender.EventMask.MinDelay = 500;
                    })
                    .BottomBar(
                        X.Toolbar()
                        .Items(
                            X.ToolbarFill()

                            , HQ.Button()
                            .HQLangCode("Expand")
                            .Icon(Icon.BulletTogglePlus)
                            .Handler("DiscDefintion.Event.btnCustomerExpand_click")

                            , X.ToolbarSpacer()
                            , X.ToolbarSeparator()
                            , X.ToolbarSpacer()

                            , HQ.Button()
                            .HQLangCode("Collapse")
                            .Icon(Icon.BulletToggleMinus)
                            .Handler("DiscDefintion.Event.btnCustomerCollapse_click")

                            , X.ToolbarFill()
                        )
                    ) // treeBranch

                    // Second Column
                    , X.Panel()
                    .Region(Region.Center).Flex(8)
                    .Layout(LayoutType.VBox)
                    .MinWidth(50)
                    .LayoutConfig(new VBoxLayoutConfig { Align = VBoxAlign.Stretch, Pack = BoxPack.Center })
                    .Items(
                        HQ.Button()
                        .ToolTip(Util.GetLang("AddAll")).HQLangCode("AddAll")
                        .Icon(Icon.ForwardGreen).MarginSpec("5 5 0 5")
                        .Handler("DiscDefintion.Event.btnAddAllCustomer_click")

                        , HQ.Button()
                        .ToolTip(Util.GetLang("Add")).HQLangCode("Add")
                        .Icon(Icon.PlayGreen).MarginSpec("5 5 0 5")
                        .Handler("DiscDefintion.Event.btnAddCustomer_click")

                        , HQ.Button()
                        .ToolTip(Util.GetLang("Del")).HQLangCode("Del")
                        .Icon(Icon.ReverseGreen).MarginSpec("5 5 0 5")
                        .Handler("DiscDefintion.Event.btnDelCustomer_click")

                        , HQ.Button()
                        .ToolTip(Util.GetLang("DelAll")).HQLangCode("DelAll")
                        .Icon(Icon.RewindGreen).MarginSpec("5 5 0 5")
                        .Handler("DiscDefintion.Event.btnDelAllCustomer_click")
                    ) // Container
                    , X.GridPanel().ID("grdDiscCust")
                    .Region(Region.East)
                    .Flex(60)
                    .Scroll(ScrollMode.Both)
                    .View(X.GridView().TrackOver(false))
                    .SortableColumns(false)
        //                    .StoreID("stoDiscCust")
                    .Store(
                        X.Store().ID("stoDiscCust").AutoLoad(false)
                        .PageSize(50)
                        .Model(Util.GenerateModel(typeof(OM21100_pgDiscCust_Result), "mdlDiscCust", "DiscID,DiscSeq,CustID,BranchID", true))
                        .Listeners(l =>
                            {
                                l.BeforeLoad.Handler = "this.HQFieldKeys=['DiscID', 'DiscSeq', 'CustID', 'BranchID'];";
                                l.Load.Fn = "Main.Event.sto_load";
                                l.Update.Handler = "Main.Event.frmMain_fieldChange()";
                                l.DataChanged.Handler = "Main.Event.frmMain_fieldChange()";
                            })
                        .ServerProxy(X.AjaxProxy().Url(Url.Action("GetDiscCust", "OM21100")))
                        .Parameters(ps =>
                            {
                                ps.Add(new StoreParameter("discID", "App.cboDiscID.getValue()", ParameterMode.Raw));
                                ps.Add(new StoreParameter("discSeq", "App.cboDiscSeq.getValue()", ParameterMode.Raw));
                            })
                    )
                    .ColumnModel(
                        X.RowNumbererColumn().Width(40)
                        , X.Column().Text(Util.GetLang("CustID")).DataIndex("CustID").Width(150)
                        .Editor(
                            HQ.Combo().ID("cboGCustID")
                            .HQProcedure("OM21100_pcCustomerActive").HQColumnShow("CustID,Name,BranchID")
                            .HQHeightWidth(400, 300)
                            .ValueField("CustID").DisplayField("CustID")
                            .ForceSelection(true).SelectOnFocus(true)
                            .HQParam(new StoreParameterCollection() { 
                                new StoreParameter("@BranchID","HQ.cpnyID",ParameterMode.Raw),
                                new StoreParameter("@UserName","HQ.userName",ParameterMode.Raw)
                            })
                            .Listeners(l => l.Change.Fn = "DiscDefintion.Event.cboGCustID_Change")
                            .LoadData()
                        )
                        , X.Column().Text(Util.GetLang("CpnyID")).DataIndex("BranchID")

                        , X.Column().Text(Util.GetLang("Territory")).DataIndex("TerritoryName")
                        , X.Column().Text(Util.GetLang("DiscID")).DataIndex("DiscID")

                        , X.Column().Text(Util.GetLang("DiscSeq")).DataIndex("DiscSeq")


                        , X.CommandColumn().Width(130)
                        .Commands(
                            X.GridCommand()
                            .Text(Util.GetLang("Reject"))
                            .ToolTip(t => t.Text = Util.GetLang("Rejectrowchanges"))
                            .CommandName("reject")
                            .Icon(Icon.ArrowUndo)
                        )
                        .PrepareToolbar(t => t.Handler = "toolbar.items.get(0).setVisible(record.dirty);")
                        .Listeners(l => l.Command.Handler = "Main.Event.grd_reject(this, record);")
                    )
                    .SelectionModel(X.RowSelectionModel().ID("slmDiscCust").Mode(SelectionMode.Multi))
                         .BottomBar(
                            X.PagingToolbar()
                            .HideRefresh(true)
                            .Items(
                                X.Label("Page size:"),
                                X.ToolbarSpacer(10),
                                X.ComboBox()
                                .Width(80)
                                .Items("1", "2", "10", "20", "30", "50")
                                .SelectedItems("50")
                                .Listeners(l =>
                                    {
                                        l.Select.Fn = "HQ.grid.onPageSelect";
                                    })
                            )
        //.Plugins(X.ProgressBarPager().ID("paggrdPrice"))
                        )
                    .Plugins(
                        X.CellEditing()
                        .ClicksToEdit(1)
                        .Listeners(ls =>
                        {
                            ls.BeforeEdit.Fn = "Main.Event.grd_beforeEdit";
                            ls.Edit.Fn = "Main.Event.grd_edit";
                            ls.ValidateEdit.Fn = "Main.Event.grd_validateEdit";
                        })
                    )
        //.Features(
        //X.GridFilters()
        //    .Local(true)
        //    .Filters(
        //        X.StringFilter().DataIndex("CustID"),
        //        X.StringFilter().DataIndex("CustName"),
        //        X.StringFilter().DataIndex("BranchID"),
        //        X.StringFilter().DataIndex("TerritoryName")
        //    )
        //)// grdDiscCustClass
                )
                .Listeners(ls =>
                {
                    ls.Render.Handler = "HQ.common.control_render(this,'pnlDPCC')";
                }) // pnlDPCC

                , X.Panel().ID("pnlDPPP")
                .Title(Util.GetLang("DPPP"))
                .Layout(LayoutType.Border)
                .Items(
                    X.GridPanel().ID("grdDiscItemClass")
                    .Region(Region.Center)
                    .Scroll(ScrollMode.Both)
                    .View(X.GridView().TrackOver(false))
                    .SortableColumns(false)
                    .StoreID("stoDiscItemClass")
                    .ColumnModel(
                        X.RowNumbererColumn().Width(40)
                        , X.Column().Text(Util.GetLang("ClassID")).DataIndex("ClassID")
                        .Editor(
                            HQ.Combo().ID("cboGItemClass")
                            .HQProcedure("OM21100_pcItemPriceClass").HQColumnShow("PriceClassID,Descr")
                            .HQHeightWidth(400, 300)
                            .ValueField("PriceClassID").DisplayField("PriceClassID")
                            .ForceSelection(true).SelectOnFocus(true)
                            .LoadData()
                        )

                        , X.Column().Text(Util.GetLang("UOM")).DataIndex("UnitDesc")
                        .Editor(
                            HQ.Combo().ID("cboGClassUnitDescr")
                            .HQProcedure("OM21100_pcClassUnitDescr").HQColumnShow("FromUnit,ClassID")//ok
                            .HQHeightWidth(400, 300)
                            .ValueField("FromUnit").DisplayField("FromUnit")
                            .ForceSelection(true).SelectOnFocus(true)
                            .HQParam(new StoreParameterCollection() { 
                                new StoreParameter("@ClassID","Main.Process.getParamForGridCombo(App.grdDiscItemClass,'ClassID')",ParameterMode.Raw)//se fix lai
                            })
                            .LoadData()
        // .Listeners(x => x.Expand.Handler = "this.store.reload()")
                        )

                        , X.Column().Text(Util.GetLang("DiscID")).DataIndex("DiscID")

                        , X.Column().Text(Util.GetLang("DiscSeq")).DataIndex("DiscSeq")

                        , X.CommandColumn().Width(130)
                        .Commands(
                            X.GridCommand()
                            .Text(Util.GetLang("Reject"))
                            .ToolTip(t => t.Text = Util.GetLang("Rejectrowchanges"))
                            .CommandName("reject")
                            .Icon(Icon.ArrowUndo)
                        )
                        .PrepareToolbar(t => t.Handler = "toolbar.items.get(0).setVisible(record.dirty);")
                        .Listeners(l => l.Command.Handler = "Main.Event.grd_reject(this, record);")
                    )
                    .SelectionModel(X.RowSelectionModel().ID("slmDiscItemClass").Mode(SelectionMode.Multi))
                    .Plugins(
                        X.CellEditing()
                        .ClicksToEdit(1)
                        .Listeners(ls =>
                        {
                            ls.BeforeEdit.Fn = "Main.Event.grd_beforeEdit";
                            ls.Edit.Fn = "Main.Event.grd_edit";
                            ls.ValidateEdit.Fn = "Main.Event.grd_validateEdit";
                        })
                        )
        //.Features(
        //    X.GridFilters()
        //        .Local(true)
        //        .Filters(
        //            X.StringFilter().DataIndex("ClassID"),
        //            X.StringFilter().DataIndex("UnitDesc")
        //        )
        //) // grdDiscItemClass
                )
                .Listeners(ls =>
                {
                    ls.Render.Handler = "HQ.common.control_render(this,'pnlDPPP')";
                }) // pnlDPPP

            ) // tabMain
        )
        .Listeners(l =>
        {
            l.BoxReady.Fn = "Main.Event.frmMain_boxReady";
            l.FieldChange.Fn = "Main.Event.frmMain_fieldChange";
        })// frmMain
    ) // Viewport
)