@using Ext.Net;
@using Ext.Net.MVC;
@using HQ.eSkyFramework;
@using HQ.eSkyFramework.HQControl;
@using OM21100;
@{
    Layout = null;
    var X = Html.X();
    var HQ = Html.HQ();
}

@(
 Html.X().Viewport().Layout(LayoutType.Fit)
    .Items(
        X.FormPanel()
        .Layout(LayoutType.Fit)
        .ID("frmMain")
        .TrackResetOnLoad(true)
        //.DefaultAnchor("100%")
        .BodyPadding(10)
        .BodyBorder(0).AutoScroll(true)
        .TopBar(Util.SetupToolbar("PO20100", "Main.Event.menuClick"))
        .FieldDefaults(act => { act.LabelAlign = LabelAlign.Right; act.LabelWidth = 150; })
        .Items(
            X.TabPanel().ID("tabMain")
            .Layout(LayoutType.Fit)
            .Items(
                X.Panel().ID("pnlDiscDefintion")
                .Title(Util.GetLang("DiscDefintion"))
                .Layout(LayoutType.Border)
                .Items(
                    X.FormPanel().ID("frmDiscDefintionTop")
                    .Layout(LayoutType.HBox).Region(Region.North)
                    .LayoutConfig(new HBoxLayoutConfig { Align = HBoxAlign.Top }).Border(false)
                    .Items(
        // First Column
                        X.Container().Layout(LayoutType.VBox).MarginSpec("0 0 5 0").Flex(1)
                        .LayoutConfig(new VBoxLayoutConfig { Align = VBoxAlign.Stretch })
                        .MinWidth(200).MaxWidth(400)
                        .Items(

                            HQ.Combo().ID("cboDiscID")
                            .MarginSpec("5 5 0 5")
                            .HQLangCode("DiscID").HQProcedure("OM21100_pcDiscountAll").HQColumnShow("DiscID,Descr")
                            .HQHeightWidth(400, 300).ValueField("DiscID").DisplayField("DiscID")
                            .AllowBlank(false).AllowOnlyWhitespace(false).MaxLength(10).EnforceMaxLength(true)
                            .Triggers(new FieldTrigger() { Icon = TriggerIcon.Clear, HideTrigger = false })
                            .HQParam(new StoreParameterCollection() { 
                                new StoreParameter("@BranchID", "HQ.cpnyID", ParameterMode.Raw)
                                , new StoreParameter("@UserID", "HQ.userName", ParameterMode.Raw) 
                            })
                            .LoadData()
                            .Listeners(l =>
                            {
                                l.TriggerClick.Fn = "DiscDefintion.Event.btnHideTrigger_click";
                                l.Change.Fn = "DiscDefintion.Event.cboDiscID_change";
                            })

                            , HQ.Combo().ID("cboDiscType")
                            .MarginSpec("5 5 0 5")
                            .HQLangCode("DiscType").HQProcedure("OM21100_pcDiscType").HQColumnShow("Descr")
                            .HQHeightWidth(400, 300).ValueField("Code").DisplayField("Descr")
                            .ForceSelection(true).DataIndex("DiscType")
                            .AllowBlank(false)
                            .HQParam(new StoreParameterCollection() { 
                                new StoreParameter("@LangID", "HQ.langID", ParameterMode.Raw)
                            })
                            .LoadData()
                        ) // Container

                        // Second Column
                        , X.Container().Layout(LayoutType.VBox).MarginSpec("0 0 5 0").Flex(1)
                        .LayoutConfig(new VBoxLayoutConfig { Align = VBoxAlign.Stretch })
                        .MinWidth(200).MaxWidth(400)
                        .Items(

                            HQ.TextBox().ID("txtDescr")
                            .MarginSpec("5 5 0 5")
                            .HQLangCode("Descr").DataIndex("Descr")
                            .MaxLength(50).EnforceMaxLength(true)

                            , HQ.Combo().ID("cboDiscClass")
                            .MarginSpec("5 5 0 5")
                            .HQLangCode("DiscClass").HQProcedure("OM21100_pcDiscClass").HQColumnShow("Descr")
                            .HQHeightWidth(400, 300).ValueField("Code").DisplayField("Descr")
                            .ForceSelection(true).AllowBlank(false).DataIndex("DiscClass")
                            .HQParam(new StoreParameterCollection() { 
                                new StoreParameter("@LangID", "HQ.langID", ParameterMode.Raw)
                            })
                            .LoadData()
                            .Listeners(l => l.Change.Fn = "DiscDefintion.Event.cboDiscClass_change")

                            , X.Hidden().ID("tstamp").DataIndex("tstamp")
                        ) // Container
                    ) // frmDiscDefintionTop

                    , X.TabPanel().ID("tabDiscDefintionCenter")
                    .Region(Region.Center)
                    .Items(
                        X.Panel().ID("pnlDiscSeq")
                        .Title(Util.GetLang("DiscSeq"))
                        .Layout(LayoutType.Border)
                        .Items(
                            X.FormPanel().ID("frmDiscSeqInfo")
                            .Layout(LayoutType.HBox)
                            .Region(Region.North)
                            .LayoutConfig(new HBoxLayoutConfig { Align = HBoxAlign.Top }).Border(false)
                            .Items(
        // First Column
                                X.Container().Layout(LayoutType.VBox).MarginSpec("0 0 5 0").Flex(1)
                                .LayoutConfig(new VBoxLayoutConfig { Align = VBoxAlign.Stretch })
                                .MinWidth(200)//.MaxWidth(300)
                                .Items(

                                    HQ.Combo().ID("cboDiscSeq")
                                    .MarginSpec("5 5 0 5")
                                    .HQLangCode("DiscSeq").HQProcedure("OM21100_pcDiscSequenceAll").HQColumnShow("DiscSeq,Descr")
                                    .HQHeightWidth(400, 300).ValueField("DiscSeq").DisplayField("DiscSeq")
                                    .HQFirstDefault(true).MaxLength(10).EnforceMaxLength(true)
                                    .AllowBlank(false).AllowOnlyWhitespace(false)
                                    .Triggers(new FieldTrigger() { Icon = TriggerIcon.Clear, HideTrigger = false })
                                    .HQParam(new StoreParameterCollection() { 
                                        new StoreParameter("@DiscID", "App.cboDiscID.getValue()", ParameterMode.Raw)
                                        , new StoreParameter("@BranchID", "HQ.cpnyID", ParameterMode.Raw)
                                        , new StoreParameter("@UserID", "HQ.userName", ParameterMode.Raw) 
                                    })
                                    .LoadData()
                                    .Listeners(l =>
                                    {
                                        l.TriggerClick.Fn = "DiscDefintion.Event.btnHideTrigger_click";
                                        l.Change.Fn = "DiscDefintion.Event.cboDiscSeq_change";
                                    })

                                    , HQ.Combo().ID("cboDiscFor")
                                    .MarginSpec("5 5 0 5")
                                    .HQLangCode("DiscFor").HQProcedure("OM21100_pcDiscFor").HQColumnShow("Descr")
                                    .HQHeightWidth(400, 300).ValueField("Code").DisplayField("Descr").DataIndex("DiscFor")
                                    .ForceSelection(true).AllowBlank(false)
                                    .HQParam(new StoreParameterCollection() { 
                                        new StoreParameter("@LangID", "HQ.langID", ParameterMode.Raw)
                                    })
                                    .LoadData()

                                    , HQ.Combo().ID("cboBreakBy")
                                    .MarginSpec("5 5 0 5")
                                    .HQLangCode("BreakBy").HQProcedure("OM21100_pcBreakBy").HQColumnShow("Descr")
                                    .HQHeightWidth(400, 300).ValueField("Code").DisplayField("Descr").DataIndex("BreakBy")
                                    .ForceSelection(true).AllowBlank(false)
                                    .HQParam(new StoreParameterCollection() { 
                                        new StoreParameter("@LangID", "HQ.langID", ParameterMode.Raw)
                                    })
                                    .LoadData()

                                    , HQ.Combo().ID("cboBudgetID")
                                    .MarginSpec("5 5 0 5")
                                    .HQLangCode("BudgetID").HQProcedure("OM21100_pcBudgetDiscount").HQColumnShow("BudgetID,Descr")
                                    .HQHeightWidth(400, 300).ValueField("BudgetID").DisplayField("Descr").DataIndex("BudgetID")
                                    .ForceSelection(true)
                                    .HQParam(new StoreParameterCollection() { 
                                        new StoreParameter("@BranchID", "HQ.cpnyID", ParameterMode.Raw)
                                    })
                                    .LoadData()

                                    , HQ.TextBox().ID("txtSeqDescr")
                                    .MarginSpec("5 5 0 5")
                                    .HQLangCode("Descr").DataIndex("Descr")
                                    .MaxLength(50).EnforceMaxLength(true)
                                ) // Container

                                // Second Column
                                , X.Container().Layout(LayoutType.VBox).MarginSpec("0 0 5 0").Flex(1)
                                .LayoutConfig(new VBoxLayoutConfig { Align = VBoxAlign.Stretch })
                                .MinWidth(200)//.MaxWidth(300)
                                .Items(

                                    HQ.Combo().ID("cboProAplForItem")
                                    .MarginSpec("5 5 0 5")
                                    .HQLangCode("ProAplForItem").HQProcedure("OM21100_pcProApl").HQColumnShow("Code,Descr")
                                    .HQHeightWidth(400, 300).ValueField("Code").DisplayField("Descr").LabelWidth(160)
                                    .ForceSelection(true).AllowBlank(false).DataIndex("ProAplForItem")
                                    .HQParam(new StoreParameterCollection() { 
                                        new StoreParameter("@LangID", "HQ.langID", ParameterMode.Raw)
                                    })
                                    .LoadData()

                                    , HQ.DateField().ID("dteStartDatePO")
                                    .MarginSpec("5 5 0 5")
                                    .HQLangCode("StartDatePO").DataIndex("POStartDate")

                                    , HQ.DateField().ID("dteEndDatePO")
                                    .MarginSpec("5 5 0 5")
                                    .HQLangCode("EndDatePO").DataIndex("POEndDate")

                                    , HQ.DateField().ID("dteStartDate")
                                    .MarginSpec("5 5 0 5")
                                    .HQLangCode("StartDate").DataIndex("StartDate")

                                    , HQ.DateField().ID("dteEndDate")
                                    .MarginSpec("5 5 0 5")
                                    .HQLangCode("EndDate").DataIndex("EndDate")
                                ) // Container

                                // Third Column
                                , X.Container().Layout(LayoutType.VBox).MarginSpec("0 0 5 0").Flex(1).MinWidth(200)
                                .LayoutConfig(new VBoxLayoutConfig { Align = VBoxAlign.Stretch })
                                .Items(
                                    HQ.Combo().ID("cboStatus")
                                    .MarginSpec("5 5 0 5")
                                    .HQLangCode("Status").HQProcedure("OM21100_pcStatus").HQColumnShow("Descr")
                                    .HQHeightWidth(400, 300).ValueField("Code").DisplayField("Descr")
                                    .ReadOnly(true).DataIndex("Status")
                                    .HQParam(new StoreParameterCollection() { 
                                        new StoreParameter("@UserID", "HQ.userName", ParameterMode.Raw)
                                        , new StoreParameter("@LangID", "HQ.langID", ParameterMode.Raw)
                                    })
                                    .LoadData()
                                    .Listeners(l => l.Change.Handler = "App.cboHandle.store.reload()")

                                    , HQ.Combo().ID("cboHandle")
                                    .MarginSpec("5 5 0 5")
                                    .HQLangCode("Handle").HQProcedure("OM21100_pcHandle").HQColumnShow("Descr")
                                    .HQHeightWidth(400, 300).ValueField("ToStatus").DisplayField("Descr")
                                    .ForceSelection(true)
                                    .HQParam(new StoreParameterCollection() { 
                                        new StoreParameter("@UserID", "HQ.userName", ParameterMode.Raw)
                                        , new StoreParameter("@LangID", "HQ.langID", ParameterMode.Raw)
                                        , new StoreParameter("@Status", "App.cboStatus.getValue()", ParameterMode.Raw)
                                    })
                                    .LoadData()

                                    , HQ.Checkbox().ID("chkPOUse")
                                    .MarginSpec("5 5 0 160")
                                    .BoxLabel(Util.GetLang("POUse")).DataIndex("POUse")
                                ) // Container

                                // Forth Column
                                , X.Container().Layout(LayoutType.VBox).MarginSpec("0 0 5 0").MaxWidth(150)
                                .LayoutConfig(new VBoxLayoutConfig { Align = VBoxAlign.Stretch })
                                .Items(
                                    HQ.Checkbox().ID("chkActive")
                                    .MarginSpec("5 5 0 10")
                                    .BoxLabel(Util.GetLang("Active")).DataIndex("Active")

                                    , HQ.Checkbox().ID("chkDiscTerm")
                                    .MarginSpec("5 5 0 10")
                                    .BoxLabel(Util.GetLang("DiscTerm")).DataIndex("Promo")

                                    , HQ.Checkbox().ID("chkAutoFreeItem")
                                    .MarginSpec("5 5 0 10")
                                    .BoxLabel(Util.GetLang("AutoFreeItem")).DataIndex("AutoFreeItem")

                                    , HQ.Checkbox().ID("chkAllowEditDisc")
                                    .MarginSpec("5 5 0 10")
                                    .BoxLabel(Util.GetLang("AllowEditDisc")).DataIndex("AllowEditDisc")
                                ) // Container
                            ) // Panel

                            , X.Panel()
                            .Region(Region.Center)
                            .Layout(LayoutType.Border)
        //.LayoutConfig(new HBoxLayoutConfig { Align = HBoxAlign.Top})
                            .Items(
                                X.GridPanel().ID("grdDiscBreak")
                                .Title(Util.GetLang("DiscBreak")).TitleAlign(TitleAlign.Center)
                                .Region(Region.West).Flex(3)
                                .Scroll(ScrollMode.Both).Split(true)
                                .View(X.GridView().TrackOver(false))
                                .SortableColumns(false)
                                .StoreID("stoDiscBreak")
                                .ColumnModel(
                                    X.RowNumbererColumn().Width(40)
                                    , X.Column().Text(Util.GetLang("BreakQty")).DataIndex("BreakQty")
                                    .Editor(
                                        X.NumberField().SelectOnFocus(true)
                                    )

                                    , X.Column().Text(Util.GetLang("BreakAmt")).DataIndex("BreakAmt")
                                    .Editor(
                                        X.NumberField().SelectOnFocus(true)
                                    )

                                    , X.Column().Text(Util.GetLang("Discount")).DataIndex("DiscAmt")
                                    .Editor(
                                        X.NumberField().SelectOnFocus(true)
                                    )

                                    , X.Column().Text(Util.GetLang("Descr")).DataIndex("Descr")
                                    .Editor(
                                        HQ.TextBox().SelectOnFocus(true)
                                    )

                                    , X.CommandColumn()
                                    .Commands(
                                        X.GridCommand()
                                        .Text(Util.GetLang("Reject"))
                                        .ToolTip(t => t.Text = Util.GetLang("Rejectrowchanges"))
                                        .CommandName("reject")
                                        .Icon(Icon.ArrowUndo)
                                    )
                                    .PrepareToolbar(t => t.Handler = "toolbar.items.get(0).setVisible(record.dirty);")
                                    .Listeners(l => l.Command.Handler = "Main.Event.grd_reject(this, record);")
                                )
                                .SelectionModel(
                                    X.RowSelectionModel().ID("slmDiscBreak").Mode(SelectionMode.Single)
                                    .Listeners(x => {
                                        x.SelectionChange.Fn = "DiscDefintion.Event.slmDiscBreak_selectChange"; 
                                    })
                                )
                                .Plugins(
                                    X.CellEditing()
                                    .ClicksToEdit(1)
                                    .Listeners(ls =>
                                    {
                                        ls.BeforeEdit.Fn = "Main.Event.grd_beforeEdit";
                                        ls.Edit.Fn = "DiscDefintion.Event.grdDiscBreak_edit";
                                        ls.ValidateEdit.Fn = "Main.Event.grd_validateEdit";
                                    })
                                )
                                .Listeners(ls =>
                                {
                                    ls.Render.Fn = "Main.Event.control_render";
                                }) // grdDiscBreak

                                , X.GridPanel().ID("grdFreeItem")
                                .Title(Util.GetLang("FreeItemList")).TitleAlign(TitleAlign.Center)
                                .Scroll(ScrollMode.Both).Flex(4)
                                .Layout(LayoutType.Fit).Region(Region.Center)
                                .View(X.GridView().TrackOver(false))
                                .SortableColumns(false)
                                .StoreID("stoFreeItem")
                                .ColumnModel(
                                    X.RowNumbererColumn().Width(40)
                                    , X.Column().Text(Util.GetLang("InvtID")).DataIndex("FreeItemID")
                                    .Editor(
                                        HQ.Combo().ID("cboFreeItemID")
                                        .HQProcedure("OM21100_pcInventoryActiveByBranch")
                                        .HQColumnShow("InvtID,Descr,Descr1,BarCode,Color")
                                        .HQHeightWidth(400, 300)
                                        .ValueField("InvtID").DisplayField("InvtID")
                                        .ForceSelection(true).SelectOnFocus(true)
                                        .HQParam(new StoreParameterCollection() { 
                                            new StoreParameter("@BranchID","HQ.cpnyID",ParameterMode.Raw)
                                        })
                                        .LoadData()
                                    )

                                    , X.Column().Text(Util.GetLang("Descr")).DataIndex("FreeItemID")
                                    .Renderer("DiscDefintion.Process.renderFreeItemName")

                                    , X.Column().Text(Util.GetLang("UOM")).DataIndex("UnitDescr")
                                    .Editor(
                                        HQ.Combo().ID("cboGUnitDescr")
                                        .HQProcedure("OM21100_pcClassUnitDescrByInvtID")//ok
                                        .HQColumnShow("FromUnit,ClassID")
                                        .HQHeightWidth(400, 300)
                                        .ValueField("FromUnit").DisplayField("FromUnit")
                                        .ForceSelection(true).SelectOnFocus(true)
                                        .HQParam(new StoreParameterCollection() { 
                                            new StoreParameter("@InvtID","Main.Process.getParamForGridCombo(App.grdFreeItem,'FreeItemID')",ParameterMode.Raw)//se fix lai
                                        })
                                        .LoadData()
                                        .Listeners(x => x.Expand.Handler = "this.store.reload()")
                                    )

                                    , X.Column().Text(Util.GetLang("SiteID")).DataIndex("FreeITemSiteID")
                                    .Editor(
                                        HQ.Combo().ID("cboGFreeItemSite")
                                        .HQProcedure("OM21100_pcSite").HQColumnShow("SiteID,Name")
                                        .HQHeightWidth(400, 300)
                                        .ValueField("SiteID").DisplayField("SiteID")
                                        .ForceSelection(true).SelectOnFocus(true)
                                        .HQParam(new StoreParameterCollection() { 
                                            new StoreParameter("@BranchID","HQ.cpnyID",ParameterMode.Raw)
                                            ,new StoreParameter("@UserID","HQ.userName",ParameterMode.Raw)
                                        })
                                        .LoadData()
                                    )

                                    , X.Column().Text(Util.GetLang("Qty")).DataIndex("FreeItemQty")
                                    .Editor(
                                        HQ.NumberField().SelectOnFocus(true)
                                    )

                                    , X.Column().Text(Util.GetLang("BudgetID")).DataIndex("FreeItemBudgetID")
                                    .Editor(
                                        HQ.Combo().ID("cboGFreeItemBudgetID")
                                        .HQProcedure("OM21100_pcBudgetFreeItem").HQColumnShow("BudgetID,Descr")
                                        .HQHeightWidth(400, 300)
                                        .ValueField("BudgetID").DisplayField("BudgetID")
                                        .ForceSelection(true).SelectOnFocus(true)
                                        .HQParam(new StoreParameterCollection() { 
                                            new StoreParameter("@BranchID","HQ.cpnyID",ParameterMode.Raw)
                                        })
                                        .LoadData()
                                    )

                                    , X.CommandColumn()
                                    .Commands(
                                        X.GridCommand()
                                        .Text(Util.GetLang("Reject"))
                                        .ToolTip(t => t.Text = Util.GetLang("Rejectrowchanges"))
                                        .CommandName("reject")
                                        .Icon(Icon.ArrowUndo)
                                    )
                                    .PrepareToolbar(t => t.Handler = "toolbar.items.get(0).setVisible(record.dirty);")
                                    .Listeners(l => l.Command.Handler = "Main.Event.grd_reject(this, record);")
                                )
                                .SelectionModel(X.RowSelectionModel().ID("slmFreeItem").Mode(SelectionMode.Multi))
                                .Plugins(
                                    X.CellEditing()
                                    .ClicksToEdit(1)
                                    .Listeners(ls =>
                                    {
                                        ls.BeforeEdit.Fn = "Main.Event.grd_beforeEdit";
                                        ls.Edit.Fn = "DiscDefintion.Event.grdFreeItem_edit";
                                        ls.ValidateEdit.Fn = "Main.Event.grd_validateEdit";
                                    })
                                )
                                .Listeners(ls =>
                                {
                                    ls.Render.Fn = "Main.Event.control_render";
                                }) // grdFreeItem
                            ) // Panel
                        )
                        .Listeners(ls =>
                        {
                            //ls.Render.Fn = "Main.Event.control_render"; 
                        })// pnlDiscSeq

                        , X.Panel().ID("pnlAppComp")
                        .Title(Util.GetLang("AppComp"))
                        .Region(Region.Center)
                        .Layout(LayoutType.Border)
                        .Items(
        // First Column
                            X.Panel().ID("treeBranch")
                            .Region(Region.West).Flex(6)
                            .MinWidth(150).Split(true).AutoScroll(true)
                            .DirectEvents(de =>
                            {
                                de.AfterRender.ExtraParams.Add(new Parameter("panelID", "treeBranch"));
                                de.AfterRender.Url = Url.Action("OM21100GetTreeBranch");
                                //de.AfterRender.FormID = "moduleCatTree" + cat.catID;
                                de.AfterRender.CleanRequest = true;
                                de.AfterRender.Method = HttpMethod.POST;
                                de.AfterRender.Success = "";
                                de.AfterRender.Timeout = 60000;
                                de.AfterRender.Failure = "Ext.Msg.show({title: 'Login Error',msg: result.errorMessage,buttons: Ext.Msg.OK,icon: Ext.MessageBox.ERROR});";
                                de.AfterRender.EventMask.ShowMask = true;
                                de.AfterRender.EventMask.Msg = Util.GetLang("LoadingData");
                                de.AfterRender.EventMask.MinDelay = 500;

                                de.Expand.ExtraParams.Add(new Parameter("panelID", "treeBranch"));
                                de.Expand.Url = Url.Action("OM21100GetTreeBranch");
                                //de.Expand.FormID = "moduleCatTree"+cat.catID;
                                de.Expand.CleanRequest = true;
                                de.Expand.Method = HttpMethod.POST;
                                de.Expand.Success = "";
                                de.Expand.Timeout = 60000;
                                de.Expand.Failure = "Ext.Msg.show({title: 'Login Error',msg: result.errorMessage,buttons: Ext.Msg.OK,icon: Ext.MessageBox.ERROR});";
                                de.Expand.EventMask.ShowMask = true;
                                de.Expand.EventMask.Msg = Util.GetLang("LoadingData");
                                de.Expand.EventMask.MinDelay = 500;
                            })
                            .BottomBar(
                                X.Toolbar()
                                .Items(
                                    X.ToolbarFill()

                                    , HQ.Button().ID("btnExpand")
                                    .HQLangCode("Expand")
                                    .Icon(Icon.BulletTogglePlus)
                                    .Handler("DiscDefintion.Event.btnExpand_click")

                                    , X.ToolbarSpacer()
                                    , X.ToolbarSeparator()
                                    , X.ToolbarSpacer()

                                    , HQ.Button().ID("btnCollapse")
                                    .HQLangCode("Collapse")
                                    .Icon(Icon.BulletToggleMinus)
                                    .Handler("DiscDefintion.Event.btnCollapse_click")

                                    , X.ToolbarFill()
                                )
                            ) // treeBranch

                            // Second Column
                            , X.Panel()
                            .Region(Region.Center).Flex(1)
                            .Layout(LayoutType.VBox)
                            .MinWidth(50)
                            .LayoutConfig(new VBoxLayoutConfig { Align = VBoxAlign.Stretch, Pack = BoxPack.Center })
                            .Items(
                                HQ.Button().ID("btnAddAll")
                                .ToolTip(Util.GetLang("AddAll")).HQLangCode("AddAll")
                                .Icon(Icon.ForwardGreen).MarginSpec("5 5 0 5")
                                .Handler("DiscDefintion.Event.btnAddAll_click")

                                , HQ.Button().ID("btnAdd")
                                .ToolTip(Util.GetLang("Add")).HQLangCode("Add")
                                .Icon(Icon.PlayGreen).MarginSpec("5 5 0 5")
                                .Handler("DiscDefintion.Event.btnAdd_click")

                                , HQ.Button().ID("btnDel")
                                .ToolTip(Util.GetLang("Del")).HQLangCode("Del")
                                .Icon(Icon.ReverseGreen).MarginSpec("5 5 0 5")
                                .Handler("DiscDefintion.Event.btnDel_click")

                                , HQ.Button().ID("btnDelAll")
                                .ToolTip(Util.GetLang("DelAll")).HQLangCode("DelAll")
                                .Icon(Icon.RewindGreen).MarginSpec("5 5 0 5")
                                .Handler("DiscDefintion.Event.btnDelAll_click")
                            ) // Container

                            // Third column
                            , X.GridPanel().ID("grdCompany")
                            .Region(Region.East).Flex(6)
                            .Scroll(ScrollMode.Both)
                            .View(X.GridView().TrackOver(false))
                            .SortableColumns(false)
                            .StoreID("stoCompany")
                            .ColumnModel(
                                X.RowNumbererColumn().Width(40)
                                , X.Column().Text(Util.GetLang("CpnyID")).DataIndex("CpnyID")
                                .Editor(
                                    HQ.Combo().ID("cboGCpnyID")
                                    .HQProcedure("OM21100_pcCompany").HQColumnShow("CpnyID,CpnyName")
                                    .HQHeightWidth(400, 300)
                                    .ValueField("CpnyID").DisplayField("CpnyID")
                                    .ForceSelection(true).SelectOnFocus(true)
                                    .HQParam(new StoreParameterCollection() { 
                                        new StoreParameter("@UserID","HQ.userName",ParameterMode.Raw)
                                    })
                                    .LoadData()
                                )

                                , X.Column().MinWidth(100).Flex(1)
                                .Text(Util.GetLang("CpnyName")).DataIndex("CpnyID")
                                .Renderer("DiscDefintion.Process.renderCpnyName")

                                , X.CommandColumn()
                                .Commands(
                                    X.GridCommand()
                                    .Text(Util.GetLang("Reject"))
                                    .ToolTip(t => t.Text = Util.GetLang("Rejectrowchanges"))
                                    .CommandName("reject")
                                    .Icon(Icon.ArrowUndo)
                                )
                                .PrepareToolbar(t => t.Handler = "toolbar.items.get(0).setVisible(record.dirty);")
                                .Listeners(l => l.Command.Handler = "Main.Event.grd_reject(this, record);")
                            )
                            .SelectionModel(X.RowSelectionModel().ID("slmCompany").Mode(SelectionMode.Multi))
                            .Plugins(
                                X.CellEditing()
                                .ClicksToEdit(1)
                                .Listeners(ls =>
                                {
                                    ls.BeforeEdit.Fn = "Main.Event.grd_beforeEdit";
                                    ls.Edit.Fn = "Main.Event.grd_edit";
                                    ls.ValidateEdit.Fn = "Main.Event.grd_validateEdit";
                                })
                            ) // grdCompany
                        )
                        .Listeners(ls =>
                        {
                            ls.Render.Fn = "Main.Event.control_render";
                        })// pnlAppComp
                    ) // tabDiscDefintionCenter
                ) // pnlDiscDefintion

                , X.Panel().ID("pnlDPII")
                .Title(Util.GetLang("DPII"))
                .Layout(LayoutType.Border)
                .Items(
                    X.GridPanel().ID("grdDiscItem")
                    .Region(Region.Center)
                    .Scroll(ScrollMode.Both)
                    .View(X.GridView().TrackOver(false))
                    .SortableColumns(false)
                    .StoreID("stoDiscItem")
                    .ColumnModel(
                        X.RowNumbererColumn().Width(40)
                        , X.Column().Text(Util.GetLang("InvtID")).DataIndex("InvtID")
                        .Editor(
                            HQ.Combo().ID("cboDpiiInvtID")
                            .HQProcedure("OM21100_pcInventoryActiveByBranch")
                            .HQColumnShow("InvtID,Descr,Descr1,BarCode,Color")
                            .HQHeightWidth(400, 300)
                            .ValueField("InvtID").DisplayField("InvtID")
                            .ForceSelection(true).SelectOnFocus(true)
                            .HQParam(new StoreParameterCollection() { 
                                new StoreParameter("@BranchID","HQ.cpnyID",ParameterMode.Raw)
                            })
                            .LoadData()
                        )

                        , X.Column().Text(Util.GetLang("Descr")).DataIndex("InvtID")
                        .Renderer("DiscDefintion.Process.renderDpiiInvtName")

                        , X.Column().Text(Util.GetLang("UOM")).DataIndex("UnitDesc")
                        .Editor(
                            HQ.Combo().ID("cboGItemUnitDescr")
                            .HQProcedure("OM21100_pcClassUnitDescrByInvtID").HQColumnShow("FromUnit,ClassID")//ok
                            .HQHeightWidth(400, 300)
                            .ValueField("FromUnit").DisplayField("FromUnit")
                            .ForceSelection(true).SelectOnFocus(true)
                            .HQParam(new StoreParameterCollection() { 
                                new StoreParameter("@InvtID","Main.Process.getParamForGridCombo(App.grdDiscItem,'InvtID')",ParameterMode.Raw)//se fix lai
                            })
                            .LoadData()
                            .Listeners(x => x.Expand.Handler = "this.store.reload();")
                        )

                        , X.Column().Text(Util.GetLang("DiscID")).DataIndex("DiscID")

                        , X.Column().Text(Util.GetLang("DiscSeq")).DataIndex("DiscSeq")

                        , X.CommandColumn()
                        .Commands(
                            X.GridCommand()
                            .Text(Util.GetLang("Reject"))
                            .ToolTip(t => t.Text = Util.GetLang("Rejectrowchanges"))
                            .CommandName("reject")
                            .Icon(Icon.ArrowUndo)
                        )
                        .PrepareToolbar(t => t.Handler = "toolbar.items.get(0).setVisible(record.dirty);")
                        .Listeners(l => l.Command.Handler = "Main.Event.grd_reject(this, record);")
                    )
                    .SelectionModel(X.RowSelectionModel().ID("slmDiscItem").Mode(SelectionMode.Multi))
                    .Plugins(
                        X.CellEditing()
                        .ClicksToEdit(1)
                        .Listeners(ls =>
                        {
                            ls.BeforeEdit.Fn = "Main.Event.grd_beforeEdit";
                            ls.Edit.Fn = "Main.Event.grd_edit";
                            ls.ValidateEdit.Fn = "Main.Event.grd_validateEdit";
                        })
                    ) // grdDiscItem
                )
                .Listeners(ls =>
                {
                    ls.Render.Fn = "Main.Event.control_render";
                })// pnlDPII

                , X.Panel().ID("pnlDPBB")
                .Title(Util.GetLang("DPBB"))
                .Layout(LayoutType.Border)
                .Items(
                    X.GridPanel().ID("grdBundle")
                    .Region(Region.Center)
                    .Scroll(ScrollMode.Both)
                    .View(X.GridView().TrackOver(false))
                    .SortableColumns(false)
                    .StoreID("stoBundle")
                    .ColumnModel(
                        X.RowNumbererColumn().Width(40)
                        , X.Column().Text(Util.GetLang("InvtID")).DataIndex("InvtID")
                        .Editor(
                            HQ.Combo().ID("cboGInvtID")
                            .HQProcedure("OM21100_pcInventoryActiveByBranch")
                            .HQColumnShow("InvtID,Descr,Descr1,BarCode,Color")
                            .HQHeightWidth(400, 300)
                            .ValueField("InvtID").DisplayField("InvtID")
                            .ForceSelection(true).SelectOnFocus(true)
                            .HQParam(new StoreParameterCollection() { 
                                new StoreParameter("@BranchID","HQ.cpnyID",ParameterMode.Raw)
                            })
                            .LoadData()
                        )

                        , X.Column().Text(Util.GetLang("Descr")).DataIndex("InvtID")
                        .Renderer("DiscDefintion.Process.renderGInvtName")

                        , X.Column().Text(Util.GetLang("BreakQty")).DataIndex("BundleQty")
                        .Editor(
                            X.NumberField().SelectOnFocus(true)
                        )

                         , X.Column().Text(Util.GetLang("BreakAmt")).DataIndex("BundleAmt")
                        .Editor(
                            X.NumberField().SelectOnFocus(true)
                        )

                        , X.Column().Text(Util.GetLang("DiscID")).DataIndex("DiscID")

                        , X.Column().Text(Util.GetLang("DiscSeq")).DataIndex("DiscSeq")

                        , X.CommandColumn()
                        .Commands(
                            X.GridCommand()
                            .Text(Util.GetLang("Reject"))
                            .ToolTip(t => t.Text = Util.GetLang("Rejectrowchanges"))
                            .CommandName("reject")
                            .Icon(Icon.ArrowUndo)
                        )
                        .PrepareToolbar(t => t.Handler = "toolbar.items.get(0).setVisible(record.dirty);")
                        .Listeners(l => l.Command.Handler = "Main.Event.grd_reject(this, record);")
                    )
                    .SelectionModel(X.RowSelectionModel().ID("slmBundle").Mode(SelectionMode.Multi))
                    .Plugins(
                        X.CellEditing()
                        .ClicksToEdit(1)
                        .Listeners(ls =>
                        {
                            ls.BeforeEdit.Fn = "Main.Event.grd_beforeEdit";
                            ls.Edit.Fn = "Main.Event.grd_edit";
                            ls.ValidateEdit.Fn = "Main.Event.grd_validateEdit";
                        })
                    ) // grdBundle
                )
                .Listeners(ls =>
                {
                    ls.Render.Fn = "Main.Event.control_render";
                })// pnlDPBB

                , X.Panel().ID("pnlDPTT")
                .Title(Util.GetLang("DPTT"))
                .Layout(LayoutType.Border)
                .Items(
                    X.GridPanel().ID("grdDiscCustClass")
                    .Region(Region.Center)
                    .Scroll(ScrollMode.Both)
                    .View(X.GridView().TrackOver(false))
                    .SortableColumns(false)
                    .StoreID("stoDiscCustClass")
                    .ColumnModel(
                        X.RowNumbererColumn().Width(40)
                        , X.Column().Text(Util.GetLang("ClassID")).DataIndex("ClassID")
                        .Editor(
                            HQ.Combo()
                            .HQProcedure("OM21100_pcCustomerPriceClass")
                            .HQColumnShow("PriceClassID,Descr")
                            .HQHeightWidth(400, 300)
                            .ForceSelection(true).SelectOnFocus(true)
                            .ValueField("PriceClassID").DisplayField("PriceClassID")
                            .LoadData()
                        )

                        , X.Column().Text(Util.GetLang("DiscID")).DataIndex("DiscID")

                        , X.Column().Text(Util.GetLang("DiscSeq")).DataIndex("DiscSeq")

                        , X.CommandColumn()
                        .Commands(
                            X.GridCommand()
                            .Text(Util.GetLang("Reject"))
                            .ToolTip(t => t.Text = Util.GetLang("Rejectrowchanges"))
                            .CommandName("reject")
                            .Icon(Icon.ArrowUndo)
                        )
                        .PrepareToolbar(t => t.Handler = "toolbar.items.get(0).setVisible(record.dirty);")
                        .Listeners(l => l.Command.Handler = "Main.Event.grd_reject(this, record);")
                    )
                    .SelectionModel(X.RowSelectionModel().ID("slmDiscCustClass").Mode(SelectionMode.Multi))
                    .Plugins(
                        X.CellEditing()
                        .ClicksToEdit(1)
                        .Listeners(ls =>
                        {
                            ls.BeforeEdit.Fn = "Main.Event.grd_beforeEdit";
                            ls.Edit.Fn = "Main.Event.grd_edit";
                            ls.ValidateEdit.Fn = "Main.Event.grd_validateEdit";
                        })
                    ) // grdDiscCustClass
                )
                .Listeners(ls =>
                {
                    ls.Render.Fn = "Main.Event.control_render";
                }) // pnlDPTT

                , X.Panel().ID("pnlDPCC")
                .Title(Util.GetLang("DPCC"))
                .Layout(LayoutType.Border)
                .Items(
                    X.GridPanel().ID("grdDiscCust")
                    .Region(Region.Center)
                    .Scroll(ScrollMode.Both)
                    .View(X.GridView().TrackOver(false))
                    .SortableColumns(false)
                    .StoreID("stoDiscCust")
                    .ColumnModel(
                        X.RowNumbererColumn().Width(40)
                        , X.Column().Text(Util.GetLang("CustID")).DataIndex("CustID")
                        .Editor(
                            HQ.Combo().ID("cboGCustID")
                            .HQProcedure("OM21100_pcCustomerActive").HQColumnShow("CustID,Name")
                            .HQHeightWidth(400, 300)
                            .ValueField("CustID").DisplayField("CustID")
                            .ForceSelection(true).SelectOnFocus(true)
                            .HQParam(new StoreParameterCollection() { 
                                new StoreParameter("@BranchID","HQ.cpnyID",ParameterMode.Raw)
                            })
                            .LoadData()
                        )

                        , X.Column().Text(Util.GetLang("DiscID")).DataIndex("DiscID")

                        , X.Column().Text(Util.GetLang("DiscSeq")).DataIndex("DiscSeq")

                        , X.CommandColumn()
                        .Commands(
                            X.GridCommand()
                            .Text(Util.GetLang("Reject"))
                            .ToolTip(t => t.Text = Util.GetLang("Rejectrowchanges"))
                            .CommandName("reject")
                            .Icon(Icon.ArrowUndo)
                        )
                        .PrepareToolbar(t => t.Handler = "toolbar.items.get(0).setVisible(record.dirty);")
                        .Listeners(l => l.Command.Handler = "Main.Event.grd_reject(this, record);")
                    )
                    .SelectionModel(X.RowSelectionModel().ID("slmDiscCust").Mode(SelectionMode.Multi))
                    .Plugins(
                        X.CellEditing()
                        .ClicksToEdit(1)
                        .Listeners(ls =>
                        {
                            ls.BeforeEdit.Fn = "Main.Event.grd_beforeEdit";
                            ls.Edit.Fn = "Main.Event.grd_edit";
                            ls.ValidateEdit.Fn = "Main.Event.grd_validateEdit";
                        })
                    ) // grdDiscCustClass
                )
                .Listeners(ls =>
                {
                    ls.Render.Fn = "Main.Event.control_render";
                }) // pnlDPCC

                , X.Panel().ID("pnlDPPP")
                .Title(Util.GetLang("DPPP"))
                .Layout(LayoutType.Border)
                .Items(
                    X.GridPanel().ID("grdDiscItemClass")
                    .Region(Region.Center)
                    .Scroll(ScrollMode.Both)
                    .View(X.GridView().TrackOver(false))
                    .SortableColumns(false)
                    .StoreID("stoDiscItemClass")
                    .ColumnModel(
                        X.RowNumbererColumn().Width(40)
                        , X.Column().Text(Util.GetLang("ClassID")).DataIndex("ClassID")
                        .Editor(
                            HQ.Combo().ID("cboGItemClass")
                            .HQProcedure("OM21100_pcItemPriceClass").HQColumnShow("PriceClassID,Descr")
                            .HQHeightWidth(400, 300)
                            .ValueField("PriceClassID").DisplayField("PriceClassID")
                            .ForceSelection(true).SelectOnFocus(true)
                            .LoadData()
                        )

                        , X.Column().Text(Util.GetLang("UOM")).DataIndex("UnitDesc")
                        .Editor(
                            HQ.Combo().ID("cboGClassUnitDescr")
                            .HQProcedure("OM21100_pcClassUnitDescr").HQColumnShow("FromUnit,ClassID")//ok
                            .HQHeightWidth(400, 300)
                            .ValueField("FromUnit").DisplayField("FromUnit")
                            .ForceSelection(true).SelectOnFocus(true)
                            .HQParam(new StoreParameterCollection() { 
                                new StoreParameter("@ClassID","Main.Process.getParamForGridCombo(App.grdDiscItemClass,'ClassID')",ParameterMode.Raw)//se fix lai
                            })
                            .LoadData()
                            .Listeners(x => x.Expand.Handler = "this.store.reload()")
                        )

                        , X.Column().Text(Util.GetLang("DiscID")).DataIndex("DiscID")

                        , X.Column().Text(Util.GetLang("DiscSeq")).DataIndex("DiscSeq")

                        , X.CommandColumn()
                        .Commands(
                            X.GridCommand()
                            .Text(Util.GetLang("Reject"))
                            .ToolTip(t => t.Text = Util.GetLang("Rejectrowchanges"))
                            .CommandName("reject")
                            .Icon(Icon.ArrowUndo)
                        )
                        .PrepareToolbar(t => t.Handler = "toolbar.items.get(0).setVisible(record.dirty);")
                        .Listeners(l => l.Command.Handler = "Main.Event.grd_reject(this, record);")
                    )
                    .SelectionModel(X.RowSelectionModel().ID("slmDiscItemClass").Mode(SelectionMode.Multi))
                    .Plugins(
                        X.CellEditing()
                        .ClicksToEdit(1)
                        .Listeners(ls =>
                        {
                            ls.BeforeEdit.Fn = "Main.Event.grd_beforeEdit";
                            ls.Edit.Fn = "Main.Event.grd_edit";
                            ls.ValidateEdit.Fn = "Main.Event.grd_validateEdit";
                        })
                    ) // grdDiscItemClass
                )
                .Listeners(ls =>
                {
                    ls.Render.Fn = "Main.Event.control_render";
                }) // pnlDPPP

            ) // tabMain
        )
        .Listeners(l =>
        {
            l.BoxReady.Fn = "Main.Event.frmMain_boxReady";
        })// frmMain
    ) // Viewport
)