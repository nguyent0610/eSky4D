@using Ext.Net;
@using Ext.Net.MVC;
@using HQ.eSkyFramework;
@using HQ.eSkyFramework.HQControl;
@using OM29900;
@{
    Layout = null;
    var X = Html.X();
    var HQ = Html.HQ();
}

@(X.Viewport()
.Layout(LayoutType.Fit)
.Items(
    X.FormPanel()
    .ID("frmMain")
    .KeyMap(Util.SetupKeyMap())
    .TopBar(Util.SetupToolbar("Print", true, ""))
    .Layout(LayoutType.Border)
    .FieldDefaults(act => { act.LabelAlign = LabelAlign.Right; act.LabelWidth = 100; })
    .Listeners(l =>
    {
        l.BoxReady.Handler = "firstLoad();";
        l.FieldChange.Fn = "frmChange";
    })
    .Items(
         X.Panel().ID("PnlTypeOfVehicle")
        .Layout(LayoutType.Border).Region(Region.Center)
        .Items(

          X.GridPanel().ID("grdTypeOfVehicle")
            .Scroll(ScrollMode.Both)
            .View(X.GridView().TrackOver(false))
            .Flex(1).Region(Region.Center).AutoScroll(true)
            .SelectionMemory(false)
            .Store(
                X.Store()
                .ID("stoTypeOfVehicle")
                .PageSize(50).AutoLoad(false)
                    .Model(Util.GenerateModel(typeof(OM29900_pgTypeOfVehicle_Result), "mdlOM29900_OM_TypeOfVehicle", ""))
                .Parameters(ps =>
                {
                    //ps.Add(new StoreParameter("BranchID", "App.cboCpnyID.getValue()", ParameterMode.Raw));
                })
                    .ServerProxy(X.AjaxProxy().Url(Url.Action("GetTypeOfVehicle")))
                .Listeners(p =>
                {
                    p.Load.Fn = "stoLoadTypeOfVehicle";
                })
            )
            .Listeners(lst => lst.Render.Handler = "HQ.common.control_render(this,'grdMapCustomer');")
            .SortableColumns(false)
            .ColumnModel(
                X.RowNumbererColumn().MinWidth(20).Width(30).MaxWidth(300).Listeners(x => x.AfterRender.Handler = "this.resizable = true"),
                X.Column().Text(Util.GetLang("OM29900Code")).DataIndex("Code").Width(200)
                .Editor(
                        X.TextField().MaxLength(30).EnforceMaxLength(true).SelectOnFocus(true)
                )
                , X.Column().Text(Util.GetLang("Descr")).DataIndex("Descr").Width(200)
                .Editor(
                        X.TextField().MaxLength(200).EnforceMaxLength(true).SelectOnFocus(true)
                )
                
                , X.CommandColumn()
                .Width(150)
                .Commands(
                    X.GridCommand()
                    .Text(Util.GetLang("Reject"))
                    .ToolTip(t => t.Text = Util.GetLang("Rejectrowchanges"))
                    .CommandName("reject")
                    .Icon(Icon.ArrowUndo)
                )
                .PrepareToolbar(t => t.Handler = "toolbar.items.get(0).setVisible(record.dirty);")
                .Listeners(l => l.Command.Handler = "grdTypeOfVehicle_Reject(record);")
            )
            .SelectionModel(X.RowSelectionModel().ID("slmTypeOfVehicle")
            .Mode(SelectionMode.Multi))
            .BottomBar(
            X.PagingToolbar()
            .Items(
                X.Label("Page size:"),
                X.ToolbarSpacer(10),
                X.ComboBox()
                .Width(80)
                .Items("1", "2", "10", "20", "30", "50")
                .SelectedItems("50")
                .Listeners(l =>
                    {
                        l.Select.Fn = "HQ.grid.onPageSelect";
                    })
            )
            .Plugins(X.ProgressBarPager())
            )
            .Plugins(
                X.CellEditing()
                .ClicksToEdit(1)
                .Listeners(ls =>
                {
                    ls.BeforeEdit.Fn = "grdTypeOfVehicle_BeforeEdit";
                    ls.Edit.Fn = "grdTypeOfVehicle_Edit";
                    ls.ValidateEdit.Fn = "grdTypeOfVehicle_ValidateEdit";
                })
            )
            .Features(
                X.GridFilters()
                    .Local(true)
                    .Filters(

                                X.StringFilter().DataIndex("Code"),
                                X.StringFilter().DataIndex("Descr")
                            )
                    )
            .Listeners(lst =>
                    {
                        lst.Activate.Handler = "HQ.focus = 'grdTypeOfVehicle';";
                    })
            )
        )

     )//pnlGrid
 )
