
@using Ext.Net;
@using Ext.Net.MVC;
@using HQ.eSkyFramework;
@using HQ.eSkyFramework.HQControl;
@using OM24000;
@{
    Layout = null;
    var X = Html.X();
    var HQ = Html.HQ();
}

@(
 X.Viewport()
.Layout(LayoutType.Fit)
.Items(
        X.FormPanel()
        .ID("frmMain")
        .BodyPadding(0)
        .KeyMap(Util.SetupKeyMap())
        .TopBar(Util.SetupToolbar("Print,New,Delete", true, ""))
        .Layout(LayoutType.Border)
        .FieldDefaults(act => { act.LabelAlign = LabelAlign.Right; })
        .Listeners(lst =>
        {
            //lst.BoxReady.Fn = "loadSourceCombo";
        })
        .Items(
            X.Panel().ID("pnlHeader")
            .Region(Region.North)
            .Layout(LayoutType.HBox)
            .AutoScroll(true)
            .Items(

                X.Container().Layout(LayoutType.VBox)
                    .Items(
                        HQ.Combo().ID("cboBranchID").Name("cboBranchID").MarginSpec("5 0 0 0").Width(300)
                        .HQLangCode("BranchID").HQDBSys(false).HQProcedure("OM24000_pcBranchAllByUser")
                        .HQColumnShow("BranchID,BranchName").ForceSelection(true).AllowBlank(false)
                        .DisplayField("BranchID").ValueField("BranchID").HQHeightWidth(400, 300)
                        .HQParam(new StoreParameterCollection() {
                            new StoreParameter() { Name = "@UserID", Value ="HQ.userName", Mode = ParameterMode.Raw}
                        })
                        .Triggers(new FieldTrigger() { Icon = TriggerIcon.Clear, HideTrigger = false })
                        .Listeners(lst =>
                        {
                            lst.Change.Handler = "App.cboSlsperID.store.reload();";
                            lst.TriggerClick.Handler = "if (index == 0) { this.focus(true);this.clearValue(); }";
                        })
                        .LoadData()


                        , HQ.Combo().ID("cboSlsperID").Name("cboSlsperID").MarginSpec("5 0 0 0").Width(300).HQAutoLoad(false)
                        .HQLangCode("SlsperID").HQDBSys(false).HQProcedure("OM24000_pcSalesPerson")
                        .HQColumnShow("SlsperID,Name").ForceSelection(true).AllowBlank(false)
                        .DisplayField("SlsperID").ValueField("SlsperID").HQHeightWidth(400, 300)
                        .HQParam(new StoreParameterCollection() {
                            new StoreParameter() { Name = "@BranchID", Value ="App.cboBranchID.getValue()", Mode = ParameterMode.Raw},
                            new StoreParameter() { Name = "@UserID", Value ="HQ.userName", Mode = ParameterMode.Raw}
                        })
                        .Triggers(new FieldTrigger() { Icon = TriggerIcon.Clear, HideTrigger = false })
                        .Listeners(lst =>
                        {
                            lst.Change.Handler = "App.cboCustID.store.reload();";
                            lst.TriggerClick.Handler = "if (index == 0) { this.focus(true);this.clearValue(); }";
                            lst.Focus.Handler = "this.forceSelection=true;";
                        })
                        .LoadData()

                        , HQ.Combo().ID("cboCustID").Name("cboCustID").MarginSpec("5 0 0 0").Width(300).HQAutoLoad(false)
                        .HQLangCode("CustID").HQDBSys(false).HQProcedure("OM24000_pcCustomer")
                        .HQColumnShow("CustID,Name,Addr1,Addr2").AllowBlank(false).MultiSelect(true).ForceSelection(true)
                        .DisplayField("Name").ValueField("CustID").HQHeightWidth(400, 300)
                        .HQParam(new StoreParameterCollection() {
                            new StoreParameter() { Name = "@BranchID", Value ="App.cboBranchID.getValue()", Mode = ParameterMode.Raw},
                            new StoreParameter() { Name = "@SlsperID", Value ="App.cboSlsperID.getValue()", Mode = ParameterMode.Raw}
                        })
                        .Triggers(new FieldTrigger() { Icon = TriggerIcon.Clear, HideTrigger = false })
                        .Listeners(lst =>
                        {
                            lst.Expand.Handler = "HQ.combo.expand(this,',');";
                            lst.TriggerClick.Handler = "if (index == 0) { this.focus(true);this.clearValue(); }";
                            lst.Focus.Handler = "this.forceSelection=true;";
                        })
                        .LoadData()
                    )
                    
                , X.Container().Layout(LayoutType.VBox)
                    .Items(
                        HQ.DateField().ID("FromDate").MarginSpec("5 0 0 0").HQLangCode("FromDate").Width(250)
                            .Value(DateTime.Now.ToShortDateString()).Format("dd/MM/yyyy").AllowBlank(false)
                        , HQ.DateField().ID("ToDate").MarginSpec("5 0 0 0").HQLangCode("ToDate").Width(250)
                            .Value(DateTime.Now.ToShortDateString()).Format("dd/MM/yyyy").AllowBlank(false)
                        , HQ.Button().ID("btnLoad").HQLangCode("LoadData").MarginSpec("5 0 5 105").Width(145).Icon(Icon.ArrowRefresh)
                            .Listeners(lst =>
                            {
                                lst.Click.Fn = "btnLoad_Click";
                            })
                    )
            )//pnl Header

            , X.Panel().ID("pnlGrid")
            .Region(Region.Center)
            .Layout(LayoutType.Border)
            .Items(
                X.GridPanel()
                .ID("grdPPC_DiscConsumers")
                .Scroll(ScrollMode.Both)
                .View(X.GridView().TrackOver(false).LoadMask(true))
                .Region(Region.Center).Flex(1)
                .SelectionMemory(false)
                .Store(
                    X.Store()
                    .ID("stoPPC_DiscConsumers")
                    .PageSize(50)
                    .Model(Util.GenerateModel(typeof(OM24000_pgLoadGrid_Result), "mdlOM24000_pgLoadGrid", ""))
                    .Parameters(ps =>
                    {
                        ps.Add(new StoreParameter("BranchID", "App.cboBranchID.getValue()", ParameterMode.Raw));
                        ps.Add(new StoreParameter("SlsperID", "App.cboSlsperID.getValue()", ParameterMode.Raw));
                        ps.Add(new StoreParameter("CustID", "App.cboCustID.getValue().join(',')", ParameterMode.Raw));
                        ps.Add(new StoreParameter("FromDate", "App.FromDate.getValue()", ParameterMode.Raw));
                        ps.Add(new StoreParameter("ToDate", "App.ToDate.getValue()", ParameterMode.Raw));
                    })
                    .ServerProxy(X.AjaxProxy().Url(Url.Action("GetPPC_DiscConsumers"))).AutoLoad(false)
                    .Listeners(l =>
                    {
                        l.BeforeLoad.Fn = "stoBeforeLoad";
                        l.Load.Fn = "stoLoad";
                        l.Update.Fn = "stoChanged";
                    })
                )
                .Listeners(p =>
                {
                    p.BoxReady.Handler = "firstLoad();";
                })
                .SortableColumns(false)
                .ColumnModel(
                    X.RowNumbererColumn().Width(40)
                        , X.DateColumn().Text(Util.GetLang("Date")).DataIndex("VisitDate").Width(80).Format("dd/MM/yyyy")
                        , X.Column().Text(Util.GetLang("CustID")).DataIndex("CustID").Width(100)
                        , X.Column().Text(Util.GetLang("CustName")).DataIndex("CustName").Width(170)
                        , X.Column().Text(Util.GetLang("InvtID")).DataIndex("InvtID").Width(100)
                        , X.Column().Text(Util.GetLang("InvtName")).DataIndex("Descr").Width(170)
                        
                        , X.NumberColumn().Text(Util.GetLang("AdvanceNew")).DataIndex("AdvanceNew").Width(100).Align(Alignment.Right).Format("0,000")
                        .Editor(X.NumberField().MinValue(0).DecimalPrecision(0))
                        , X.NumberColumn().Text(Util.GetLang("Recovered")).DataIndex("Recovered").Width(100).Align(Alignment.Right).Format("0,000")
                        .Editor(X.NumberField().MinValue(0).DecimalPrecision(0))
                                         
                        , X.CommandColumn().Width(150)
                    .Commands(
                        X.GridCommand()
                        .Text(Util.GetLang("Reject"))
                        .ToolTip(t => t.Text = Util.GetLang("Rejectrowchanges"))
                        .CommandName("reject")
                        .Icon(Icon.ArrowUndo)
                        )
                    .PrepareToolbar(t => t.Handler = "toolbar.items.get(0).setVisible(record.dirty);")
                    .Listeners(l => l.Command.Handler = "grdPPC_DiscConsumers_Reject(record);")
                )
                .SelectionModel(X.RowSelectionModel().ID("slmPPC_DiscConsumers").Mode(SelectionMode.Multi))
                .BottomBar(
                    X.PagingToolbar()
                    .Items(
                        X.Label("Page size:"),
                        X.ToolbarSpacer(10),
                        X.ComboBox()
                        .Width(80)
                        .Items("1", "2", "10", "20", "30", "50")
                        .SelectedItems("50")
                        .Listeners(l =>
                            {
                                l.Select.Fn = "HQ.grid.onPageSelect";                   
                            })
                    )
                .Plugins(X.ProgressBarPager())
            )
            .Plugins(
                X.CellEditing()
                .ClicksToEdit(1)
                .Listeners(ls =>
                {
                    ls.BeforeEdit.Fn = "grdPPC_DiscConsumers_BeforeEdit";
                    ls.Edit.Fn = "grdPPC_DiscConsumers_Edit";
                    ls.ValidateEdit.Fn = "grdPPC_DiscConsumers_ValidateEdit";
                })
            )

            .Features(
                X.GridFilters()
                    .Local(true)
                    .Filters(
                        X.DateFilter().DataIndex("VisitDate"),
                        X.StringFilter().DataIndex("CustID"),
                        X.StringFilter().DataIndex("CustName"),
                        X.StringFilter().DataIndex("InvtID"),
                        X.StringFilter().DataIndex("Descr"),
                        X.NumericFilter().DataIndex("AdvanceNew"),
                        X.NumericFilter().DataIndex("Recovered")
                    )
            )
            )//pnl Grid

        )//frm Main
)//View port
)
