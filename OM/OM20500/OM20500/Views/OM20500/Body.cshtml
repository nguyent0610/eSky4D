@using Ext.Net;
@using Ext.Net.MVC;
@using HQ.eSkyFramework;
@using HQ.eSkyFramework.HQControl;
@using OM20500;
@{
    Layout = null;
    var X = Html.X();
    var HQ = Html.HQ();
}

@(
 Html.X().Viewport().Layout(LayoutType.Fit)
    .Items(
        X.FormPanel()
        .Layout(LayoutType.Border)
        .ID("frmMain")
        .TrackResetOnLoad(true)
        .DefaultAnchor("100%")
        .BodyBorder(0)
        .DefaultButton("btnLoad")
        .TopBar(Util.SetupToolbar("new,delete,refresh,close", false, "Event.menuClick"))
        .FieldDefaults(act => { act.LabelAlign = LabelAlign.Right; act.LabelWidth = 100; })
        .BottomBar(
            X.Toolbar()
            .Items(
                X.ToolbarFill(),
                X.Label().ID("lblQtyAvail").Width(200).MarginSpec("0 0 0 30")
            )
        )
        .Items(
            X.Panel().ID("pnlHeader")
            .Layout(LayoutType.HBox).Region(Region.North)
            .LayoutConfig(new HBoxLayoutConfig { Align = HBoxAlign.Top }).Border(false)
            .Items(

                // First Column
                X.Container().Layout(LayoutType.VBox).MarginSpec("5 0 5 0")
                .Flex(2).MinWidth(200)
                .LayoutConfig(new VBoxLayoutConfig { Align = VBoxAlign.Stretch })
                .Items(
                    HQ.Combo().ID("cboCpnyID")
                    .Name("cboCpnyID").HQLangCode("CpnyID").HQProcedure("OM20500_pcBranchAllByUser")
                    .HQColumnShow("BranchID,BranchName").DisplayField("BranchID").ValueField("BranchID")
                    .ForceSelection(true)
                    .Width(300).HQHeightWidth(400, 300).HQAutoLoad(false)
                    .HQParam(new StoreParameterCollection() 
                        { 
                            new StoreParameter() { Name = "@UserID", Value = "HQ.userName", Mode = ParameterMode.Raw }
                        })
                    .Triggers(new FieldTrigger() { Icon = TriggerIcon.Clear, HideTrigger = false })
                    .LoadData()
                    .Listeners(lst =>
                        {
                            lst.TriggerClick.Handler = "if (index == 0) { this.clearValue();}";
                            lst.Change.Fn = "Event.Form.cboCpnyID_change";
                        })

                    , HQ.DateField().ID("dteStartDate")
                    .HQLangCode("FromDate").Value(DateTime.Now)
                    .Triggers(new FieldTrigger() { Icon = TriggerIcon.Clear, HideTrigger = false })
                    .Listeners(lst =>
                        {
                            lst.TriggerClick.Handler = "if (index == 0) { this.setValue('');}";
                        })
                ) // First Column

                // Second Column
                , X.Container().Layout(LayoutType.VBox).MarginSpec("5 0 5 0")
                .Flex(2).MinWidth(200)
                .LayoutConfig(new VBoxLayoutConfig { Align = VBoxAlign.Stretch })
                .Items(
                    HQ.Combo().ID("cboSlsperId")
                    .Name("cboSlsperId").HQLangCode("Slsperid").HQProcedure("OM20500_pcSalesPerson")
                    .HQColumnShow("Slsperid,Name").DisplayField("Slsperid").ValueField("Slsperid")
                    .ForceSelection(true)
                    .Width(300).HQHeightWidth(400, 300).HQAutoLoad(false)
                    .HQParam(new StoreParameterCollection() 
                        { 
                            new StoreParameter() { Name = "@UserName", Value = "HQ.userName", Mode = ParameterMode.Raw }
                            ,new StoreParameter() { Name = "@BranchID", Value = "App.cboCpnyID.getValue()", Mode = ParameterMode.Raw }
                        })
                    .Triggers(new FieldTrigger() { Icon = TriggerIcon.Clear, HideTrigger = false })
                    .LoadData()
                    .Listeners(lst =>
                        {
                            lst.TriggerClick.Handler = "if (index == 0) { this.clearValue();}";
                        })

                    , HQ.DateField().ID("dteEndDate")
                    .HQLangCode("ToDate").Value(DateTime.Now)
                    .Triggers(new FieldTrigger() { Icon = TriggerIcon.Clear, HideTrigger = false })
                    .Listeners(lst =>
                        {
                            lst.TriggerClick.Handler = "if (index == 0) { this.setValue('');}";
                        })
                ) // Second Column

                // Third Column
                , X.Container().Layout(LayoutType.VBox).MarginSpec("5 0 5 0")
                .Flex(2).MinWidth(200)
                .LayoutConfig(new VBoxLayoutConfig { Align = VBoxAlign.Stretch })
                .Items(
                    HQ.Combo().ID("cboCustID")
                    .HQColumnShow("CustID,Name,Addr1,Addr2").HQLangCode("CustID")
                    .HQProcedure("OM20500_pcCustomerActive").DisplayField("CustID").ValueField("CustID")
                    .HQHeightWidth(400, 300).ForceSelection(true).HQAutoLoad(false)
                    .HQParam(new StoreParameterCollection() { 
                        new StoreParameter("@BranchID","App.cboCpnyID.getValue()",ParameterMode.Raw)
                        ,new StoreParameter("@UserName","HQ.userName",ParameterMode.Raw)
                    })
                    .LoadData()
                    .Triggers(new FieldTrigger() { Icon = TriggerIcon.Clear, HideTrigger = false })
                    .Listeners(lst =>
                        {
                            lst.TriggerClick.Handler = "if (index == 0) { this.clearValue();}";
                        })

                    , HQ.Combo().ID("cboStatus")
                    .Name("cboStatus").HQLangCode("STATUS").HQProcedure("OM20500_pcApproveStatus")
                    .HQColumnShow("Code,Descr").DisplayField("Descr").ValueField("Code")
                    .ForceSelection(true).HQValue("H", false).MultiSelect(true)
                    .Width(300).HQHeightWidth(400, 300)
                    .HQParam(new StoreParameterCollection() 
                        { 
                            new StoreParameter() { Name = "@UserName", Value = "HQ.userName", Mode = ParameterMode.Raw }
                            , new StoreParameter() { Name = "@CpnyID", Value = "HQ.cpnyID", Mode = ParameterMode.Raw }
                            , new StoreParameter() { Name = "@LangID", Value = "HQ.langID", Mode = ParameterMode.Raw }
                        })
                    .LoadData()
                    .Triggers(new FieldTrigger() { Icon = TriggerIcon.Clear, HideTrigger = false })
                    .Listeners(lst =>
                        {
                            lst.TriggerClick.Handler = "if (index == 0) { this.clearValue();}";
                        })
                ) // Third Column

                // Forth Column
                , X.Container().Layout(LayoutType.VBox).MarginSpec("5 5 5 5")
                .Width(120)
                .LayoutConfig(new VBoxLayoutConfig { Align = VBoxAlign.Stretch })
                .Items(
                    HQ.Button().ID("btnLoad")
                    .HQLangCode("LoadData").Icon(Icon.ArrowRefresh)
                    .Handler("Event.Form.btnLoad_click")


                    , HQ.Button().ID("btnClose")
                    .Icon(Icon.LockEdit)
                    .HQLangCode("ClosePO").MarginSpec("5 0 0 0")
                    .Handler("Event.Form.btnClose_click")
                ) // Forth Column

            ) // pnlHeader

            , X.GridPanel().ID("grdOrder")
            .Region(Region.Center).Scroll(ScrollMode.Both)
            .View(X.GridView().TrackOver(false).GetRowClass(function => function.Fn = "Event.Grid.grdOrder_RowClass"))
            .SortableColumns(false).Flex(1)
            .StoreID("stoOrder")
            .ColumnModel(
                X.RowNumbererColumn().Width(40)

                , X.CheckColumn()
                .HideTitleEl(true).DataIndex("Selected")
                .Align(Alignment.Center).ToolTip(Util.GetLang("Selected"))
                .Width(50).Editable(true)
                .HeaderItems(
                    HQ.Checkbox().ID("chkSelectHeaderOrder")
                    .Handler("Event.Grid.chkSelectHeaderOrder_change")
                )

                , X.CheckColumn()
                .HideTitleEl(true).DataIndex("IsAddStock")
                .Align(Alignment.Center).ToolTip(Util.GetLang("IsAddStock"))
                .Width(150).Editable(true)
                .HeaderItems(
                    HQ.Checkbox().ID("chkSelectHeaderIsAddStock").HQLangCode("OM205AddStock")
                    .Handler("Event.Grid.chkSelectHeaderIsAddStock_change")
                )
                
                , X.Column()
                .Text(Util.GetLang("OrderNbr")).DataIndex("OrderNbr")

                 , X.Column()
                .Text(Util.GetLang("CustOrderNbr")).DataIndex("CustOrderNbr")
                
                , X.Column()
                .Text(Util.GetLang("CustID")).DataIndex("CustID")

                , X.Column()
                .Text(Util.GetLang("CustName")).DataIndex("CustName")

                , HQ.DateColumn()
                .Text(Util.GetLang("OrderDate")).DataIndex("OrderDate")

                , X.Column()
                .Text(Util.GetLang("ClassID")).DataIndex("PriceClassID")

                , X.Column()
                .Text(Util.GetLang("Address")).DataIndex("Addr1")

                , X.Column()
                .Text(Util.GetLang("SlsperID")).DataIndex("SlsPerID")

                , X.Column()
                .Text(Util.GetLang("Status")).DataIndex("Status")

                , X.Column().Align(Alignment.Right)
                .Text(Util.GetLang("Qty")).DataIndex("OrdQty")

                , X.Column().Align(Alignment.Right)
                .Text(Util.GetLang("LineAmt")).DataIndex("OrdAmt")

                , X.Column().Align(Alignment.Right)
                .Text(Util.GetLang("TotTax")).DataIndex("TaxTot")

                //, X.CommandColumn()
        //.Width(150)
        //.Commands(
        //    X.GridCommand()
        //    .Text(Util.GetLang("Reject"))
        //    .ToolTip(t => t.Text = Util.GetLang("Rejectrowchanges"))
        //    .CommandName("reject")
        //    .Icon(Icon.ArrowUndo)
        //)
        //.PrepareToolbar(t => t.Handler = "toolbar.items.get(0).setVisible(record.dirty);")
        //.Listeners(l => l.Command.Handler = "Event.Grid.grd_Reject(record, this);")
            )
            .SelectionModel(
                X.RowSelectionModel().ID("slmOrder").Mode(SelectionMode.Single)
                .Listeners(lst => lst.Select.Fn = "Event.Grid.slmOrder_select")
            )
            .Plugins(
                X.CellEditing()
                .ClicksToEdit(1)
                .Listeners(ls =>
                {
                    ls.Edit.Fn = "Event.Grid.grdOrder_edit";
                    ls.BeforeEdit.Fn = "Event.Grid.grdOrder_beforeEdit";
                })
            )// grdOrder

            , X.TabPanel().ID("tabInfo")
            .Layout(LayoutType.Border)
            .Region(Region.South).Flex(2).Split(true)
            .Items(
                X.Panel()
                .Layout(LayoutType.Border)
                .Region(Region.Center)
                .Title(Util.GetLang("OrderPDA"))
                .Items(
                    X.GridPanel().ID("grdDet")
                    .Region(Region.Center).Scroll(ScrollMode.Both)
                    .View(X.GridView().TrackOver(false))
                    .SortableColumns(false)
                    .StoreID("stoDet")
                    .ColumnModel(
                        X.RowNumbererColumn().Width(40).Renderer("Event.Grid.renderRowNumber")

                        , X.CheckColumn()
                        .HideTitleEl(true).DataIndex("Selected")
                        .Align(Alignment.Center).ToolTip(Util.GetLang("Selected"))
                        .Width(50).Editable(true)
                        .HeaderItems(
                            HQ.Checkbox().ID("chkSelectHeaderDet")
                            .Handler("Event.Grid.chkSelectHeaderDet_change")
                        )

                        , X.Column()
                        .Text(Util.GetLang("InvtID")).DataIndex("InvtID")

                        , X.Column()
                        .Text(Util.GetLang("Descr")).DataIndex("Descr")

                        , X.CheckColumn()
                        .Text(Util.GetLang("FreeItem")).DataIndex("FreeItem")

                        , X.Column().Align(Alignment.Right)
                        .Text(Util.GetLang("OrdQty")).DataIndex("LineQty")

                        , X.NumberColumn().Format("0").Align(Alignment.Right)
                        .Text(Util.GetLang("ShipQty")).DataIndex("QtyShip")
                        .Editor(
                            HQ.NumberField().DecimalPrecision(0).SelectOnFocus(true)
                            .MinValue(0).Listeners(l=>l.Change.Fn="Event.Grid.txtQtyShip_Change")
                        )
                        , Html.X().ImageCommandColumn().Text(Util.GetLang(""))
                                                    .Width(30)
                                                    .Commands(
                                                        Html.X().ImageCommand()
                                                            .Icon(Icon.TabEdit)
                                                            .ToolTip(t =>
                                                            {
                                                                t.Text = Util.GetLang("ShowLot");
                                                            })                                                        
                                                            .CommandName("Update")
                                                    )
                                                    .Listeners(l => {
                                                        l.Command.Handler = "Event.Grid.showLot(record);";
                                                    })
                        , X.Column().Align(Alignment.Right)
                        .Text(Util.GetLang("ShippedQty")).DataIndex("QtyShipped")

                        , X.Column()
                        .Text(Util.GetLang("Unit")).DataIndex("SlsUnit")

                        , X.Column().Align(Alignment.Right)
                        .Text(Util.GetLang("SalesPrice")).DataIndex("SlsPrice")

                        , X.Column().Align(Alignment.Right)
                        .Text(Util.GetLang("DiscAmt")).DataIndex("DiscAmt")

                        , X.Column().Align(Alignment.Right)
                        .Text(Util.GetLang("LineAmt")).DataIndex("LineAmt")

                        , X.Column()
                        .Text(Util.GetLang("DiscCode")).DataIndex("DiscCode")

                        , X.Column()
                        .Text(Util.GetLang("SiteID")).DataIndex("SiteID")

                        , X.Column()
                        .Text(Util.GetLang("TaxID")).DataIndex("TaxID")

                        //, X.CommandColumn()
        //.Width(150)
        //.Commands(
        //    X.GridCommand()
        //    .Text(Util.GetLang("Reject"))
        //    .ToolTip(t => t.Text = Util.GetLang("Rejectrowchanges"))
        //    .CommandName("reject")
        //    .Icon(Icon.ArrowUndo)
        //)
        //.PrepareToolbar(t => t.Handler = "toolbar.items.get(0).setVisible(record.dirty);")
        //.Listeners(l => l.Command.Handler = "Event.Grid.grd_Reject(record, this);")
                    )
                    .SelectionModel(
                        X.RowSelectionModel().ID("slmDet").Mode(SelectionMode.Single)
                        .Listeners(lst => lst.Select.Fn = "Event.Grid.slmDet_select")
                    )
                    .Plugins(
                        X.CellEditing()
                        .ClicksToEdit(1)
                        .Listeners(ls =>
                        {
                            ls.Edit.Fn = "Event.Grid.grdDet_edit";
                            ls.ValidateEdit.Fn = "Event.Grid.grdDet_validateEdit";
                            ls.BeforeEdit.Fn = "Event.Grid.grdDet_beforeEdit";

                        })
                    )// grdDet
                )

                , X.Panel()
                .Title(Util.GetLang("History"))
                .Layout(LayoutType.Border)
                .Region(Region.Center)
                .Items(
                    X.GridPanel().ID("grdHisOrd")
                    .Region(Region.North).Scroll(ScrollMode.Both)
                    .View(X.GridView().TrackOver(false))
                    .SortableColumns(false).Flex(1).Split(true)
                    .StoreID("stoHisOrd")
                    .ColumnModel(
                        X.RowNumbererColumn().Width(40)

                        , X.Column()
                        .Text(Util.GetLang("OrderNbr")).DataIndex("OrderNbr")

                        , X.Column()
                        .Text(Util.GetLang("CustID")).DataIndex("CustID")

                        , X.Column()
                        .Text(Util.GetLang("CustName")).DataIndex("CustName")

                        , X.Column()
                        .Text(Util.GetLang("Address")).DataIndex("Addr1")

                        , X.Column()
                        .Text(Util.GetLang("SlsperID")).DataIndex("SlsPerID")

                        , X.Column()
                        .Text(Util.GetLang("DeliveryID")).DataIndex("DeliveryID")

                        , HQ.DateColumn()
                        .Text(Util.GetLang("OrderDate")).DataIndex("OrderDate")

                        , HQ.DateColumn()
                        .Text(Util.GetLang("ARDocDate")).DataIndex("ARDocDate")

                        , X.Column()
                        .Text(Util.GetLang("Status")).DataIndex("Status")

                        , X.Column().Align(Alignment.Right)
                        .Text(Util.GetLang("Qty")).DataIndex("OrdQty")

                        , X.Column().Align(Alignment.Right)
                        .Text(Util.GetLang("LineAmt")).DataIndex("OrdAmt")

                        , X.Column().Align(Alignment.Right)
                        .Text(Util.GetLang("TotTax")).DataIndex("TaxTot")

                        //, X.CommandColumn()
        //.Width(150)
        //.Commands(
        //    X.GridCommand()
        //    .Text(Util.GetLang("Reject"))
        //    .ToolTip(t => t.Text = Util.GetLang("Rejectrowchanges"))
        //    .CommandName("reject")
        //    .Icon(Icon.ArrowUndo)
        //)
        //.PrepareToolbar(t => t.Handler = "toolbar.items.get(0).setVisible(record.dirty);")
        //.Listeners(l => l.Command.Handler = "Event.grdSalesRouteMaster_Reject(record);")
                    )
                    .SelectionModel(
                        X.RowSelectionModel().ID("slmHisOrd").Mode(SelectionMode.Single)
                        .Listeners(lst => lst.Select.Fn = "Event.Grid.slmHisOrd_select")
                    )// grdHisOrd

                    , X.GridPanel().ID("grdHisDet")
                    .Region(Region.Center).Scroll(ScrollMode.Both)
                    .View(X.GridView().TrackOver(false))
                    .SortableColumns(false).Flex(1)
                    .StoreID("stoHisDet")
                    .ColumnModel(
                        X.RowNumbererColumn().Width(40)

                        , X.Column()
                        .Text(Util.GetLang("InvtID")).DataIndex("InvtID")

                        , X.Column()
                        .Text(Util.GetLang("Descr")).DataIndex("Descr")

                        , X.CheckColumn()
                        .Text(Util.GetLang("FreeItem")).DataIndex("FreeItem")

                        , X.Column().Align(Alignment.Right)
                        .Text(Util.GetLang("Qty")).DataIndex("LineQty")

                        , X.Column()
                        .Text(Util.GetLang("Unit")).DataIndex("SlsUnit")

                        , X.Column().Align(Alignment.Right)
                        .Text(Util.GetLang("SalesPrice")).DataIndex("SlsPrice")

                        , X.Column().Align(Alignment.Right)
                        .Text(Util.GetLang("DiscAmt")).DataIndex("DiscAmt")

                        , X.Column().Align(Alignment.Right)
                        .Text(Util.GetLang("LineAmt")).DataIndex("LineAmt")

                        , X.Column()
                        .Text(Util.GetLang("DiscCode")).DataIndex("DiscCode")

                        , X.Column()
                        .Text(Util.GetLang("SiteID")).DataIndex("SiteID")

                        , X.Column()
                        .Text(Util.GetLang("TaxID")).DataIndex("TaxID")

                        //, X.CommandColumn()
        //.Width(150)
        //.Commands(
        //    X.GridCommand()
        //    .Text(Util.GetLang("Reject"))
        //    .ToolTip(t => t.Text = Util.GetLang("Rejectrowchanges"))
        //    .CommandName("reject")
        //    .Icon(Icon.ArrowUndo)
        //)
        //.PrepareToolbar(t => t.Handler = "toolbar.items.get(0).setVisible(record.dirty);")
        //.Listeners(l => l.Command.Handler = "Event.grdSalesRouteMaster_Reject(record);")
                    )
                    .SelectionModel(
                        X.RowSelectionModel().ID("slmHisDet").Mode(SelectionMode.Single)
                    )// grdHisDet
                )
            ) // tabInfo
        )
        .Listeners(lst =>
        {
            lst.BoxReady.Fn = "Event.Form.frmMain_boxReady";
        })// Form: frmMain

        ,
        X.Window()
        .ID("winOrder")
        .Hidden(true)
        .Modal(true)
        .Closable(false)
        .Title(Util.GetLang("OM205Order"))        
        .Height(170)
        .Width(400)
        .Items(
           X.Container().Layout(LayoutType.VBox).MarginSpec("5 0 5 0").Width(350)
                .LayoutConfig(new VBoxLayoutConfig { Align = VBoxAlign.Stretch })
                .Items(
                    HQ.Combo().ID("cboDelivery").LabelWidth(150)
                        .Name("Delivery").HQLangCode("Delivery").HQProcedure("OM20500_pcDeliveryPerson")
                        .HQColumnShow("SlsperID,Name").DisplayField("Name").ValueField("SlsperID")
                        .ForceSelection(true)
                        .Width(300).HQHeightWidth(400, 300).HQAutoLoad(false)
                        .HQParam(new StoreParameterCollection() 
                            { 
                                new StoreParameter() { Name = "@UserName", Value = "HQ.userName", Mode = ParameterMode.Raw }
                                ,new StoreParameter() { Name = "@BranchID", Value = "App.cboCpnyID.getValue()", Mode = ParameterMode.Raw }
                            })
                        .Triggers(new FieldTrigger() { Icon = TriggerIcon.Clear, HideTrigger = false })
                        .LoadData()
                        .Listeners(lst =>
                            {
                                lst.TriggerClick.Handler = "if (index == 0) { this.clearValue();}";
                            })
                    , HQ.DateField().ID("dteShipDate").Name("dteShipDate").LabelWidth(150).AllowBlank(false)
                        .HQLangCode("ShipDate").Value(DateTime.Now)
                        .Triggers(new FieldTrigger() { Icon = TriggerIcon.Clear, HideTrigger = false })
                        .Listeners(lst =>
                            {
                                lst.TriggerClick.Handler = "if (index == 0) { this.setValue('');}";
                            })
                    , HQ.DateField().ID("dteARDocDate").Name("dteARDocDate").LabelWidth(150).AllowBlank(false)
                        .HQLangCode("ARDocDate").Value(DateTime.Now)
                        .Triggers(new FieldTrigger() { Icon = TriggerIcon.Clear, HideTrigger = false })
                        .Listeners(lst =>
                            {
                                lst.TriggerClick.Handler = "if (index == 0) { this.setValue('');}";
                            })
                    //,HQ.Checkbox().ID("chkAddStock").HQLangCode("OM205AddStock").MarginSpec("0 0 0 155")   
                )
                , X.Container().Layout(LayoutType.HBox)
                        .Items(
                                HQ.Button().ID("btnOK")
                                    .HQLangCode("btnOK")
                                    .Handler("Event.Popup.btnOK_click").Width(95).MarginSpec("0 0 0 155")
                                , HQ.Button().ID("btnCancel").Width(95)                                
                                    .HQLangCode("btnCancel").MarginSpec("0 0 0 5")
                                    .Handler("Event.Popup.btnCancel_click")

                        )
        )
    )
)
@(X.Window()
        .ID("winLot")
        .Hidden(true)
        .Layout(LayoutType.Fit)
        .Height(300)
        .Width(550)
        .Modal(true)
        .Closable(false)
        .Buttons(
            X.Button().ID("btnLotDel").Text(Util.GetLang("DeleteRights"))
                .Listeners(p => p.Click.Fn = "PopupWinLot.btnLotDel_Click")
            , X.Button().ID("btnLotOK").Text(Util.GetLang("OK"))
                .Listeners(p => p.Click.Fn = "PopupWinLot.btnLotOK_Click")
        )
        .BottomBar(
            X.Toolbar()
            .Border(false)
            .Items(
                X.Label().ID("lblLotQtyAvail").Width(200).MarginSpec("0 0 0 5")
            )
        )
        .Items(
            X.GridPanel().ID("grdLot")
            .Border(true).BorderSpec("1 0 0 0")
            .StoreID("stoLotTrans")
            .ColumnModel(
                X.RowNumbererColumn().Renderer("PopupWinLot.renderRowNumberLot")
                , X.Column().ID("colLotSerNbr").DataIndex("LotSerNbr").Text(Util.GetLang("LotSerNbr"))
                    .Editor(HQ.Combo().ID("cboLotSerNbr").Name("cboLotSerNbr").HideLabel(true).LabelWidth(0).HQAutoLoad(false)
                                        .HQDBSys(false).HQProcedure("OM20500_pcLotSerNbr").ForceSelection(true)
                                        .HQColumnShow("LotSerNbr,ExpDate,Qty")
                                        .DisplayField("LotSerNbr")
                                        .ValueField("LotSerNbr")
                                        .HQHeightWidth(400, 300)
                                        .HQParam(new StoreParameterCollection() {
                                                new StoreParameter() { Name = "@BranchID", Value = "_branchID", Mode = ParameterMode.Raw}                                              
                                                ,new StoreParameter() { Name = "@SiteID", Value = "_siteID", Mode = ParameterMode.Raw}
                                                ,new StoreParameter() { Name = "@InvtID", Value = "_invtID", Mode = ParameterMode.Raw}		
                                            })
                                        .Triggers(new FieldTrigger() { Icon = TriggerIcon.Clear, HideTrigger = false })
                                        .Listeners(lst =>
                                        {
                                            lst.TriggerClick.Handler = "if (index == 0) { this.clearValue();}";
                                            lst.Change.Fn = "PopupWinLot.cboLotTrans_Change";
                                        })
                                        .LoadData()

                    )
                .Width(120)
                , Html.X().Column().ID("colLotUnitDesc").Text(Util.GetLang("Unit")).DataIndex("UnitDesc")
                        //.Editor(HQ.Combo().ID("cbocolLotUnitDesc").Name("cbocolLotUnitDesc").HideLabel(true).LabelWidth(0)
                        //.HQDBSys(false).HQProcedure("PO10201_pcINUnit_Invt_Class_From_To").HQValue("_purUnit", true)
                        //.HQColumnShow("FromUnit").ForceSelection(true)
                        //.DisplayField("FromUnit")
                        //.ValueField("FromUnit")
                        //.HQHeightWidth(400, 300)
                        //.HQParam(new StoreParameterCollection() {
                        //    new StoreParameter() { Name = "@ClassID", Value = "_classID", Mode = ParameterMode.Raw}
                        //    ,new StoreParameter() { Name = "@StkUnit", Value = "_stkUnit", Mode = ParameterMode.Raw}
                        //    ,new StoreParameter() { Name = "@InvtID", Value = "_invtID", Mode = ParameterMode.Raw}											                          
                        //})
                        //.Triggers(new FieldTrigger() { Icon = TriggerIcon.Clear, HideTrigger = false })
                        //        .Listeners(lst =>
                        //        {
                        //            lst.TriggerClick.Handler = "if (index == 0) { this.clearValue();}";
                        //            lst.Focus.Handler = "this.forceSelection=true;";
                        //        })
                        //        .LoadData()
                        //        )
                , X.Column().ID("colLotQty").DataIndex("Qty").Text(Util.GetLang("Qty")).Width(75).Align(Alignment.Right)
                    .Editor(Html.X().NumberField().MinValue(0).DecimalPrecision(0))
                , X.NumberColumn().Format("##,###").ID("colLotPrice").DataIndex("UnitPrice").Text(Util.GetLang("Price"))
                .Width(75)
                .Align(Alignment.Right)
        //.Renderer("renderQtyAmt") 

                , HQ.DateColumn().ID("ExpDate").DataIndex("ExpDate").Text(Util.GetLang("ExpDate")).Editor(HQ.DateField().MinDate(@DateTime.Now.ToDateShort()))
            )
            .Listeners(lst =>
            {
                lst.Select.Handler = "HQ.focus='lot';";
                lst.Edit.Fn = "PopupWinLot.grdLot_Edit";
                lst.BeforeEdit.Fn = "PopupWinLot.grdLot_BeforeEdit";
                lst.ValidateEdit.Fn = "PopupWinLot.grdLot_ValidateEdit";
                lst.SelectionChange.Fn = "PopupWinLot.grdLot_SelectionChange";
            })
            .SelectionModel(Html.X().RowSelectionModel().ID("smlLot").Mode(SelectionMode.Single))
            .View(X.GridView().TrackOver(false))
            .Plugins(X.CellEditing().ClicksToEdit(1))
        )
)

@(X.Window()
        .ID("winCloseOrder")
        .Title(Util.GetLang("ClosePO"))
        .Hidden(true)
        .Layout(LayoutType.Fit)
        .Height(500)
        .Width(700)
        .Modal(true)
        .Closable(true)
        .Buttons(
            X.Button().ID("btnCloseOK").Text(Util.GetLang("OK"))
                .Listeners(p => p.Click.Fn = "PopupWinClose.btnCloseOK_Click")
        )       
        .Items(
         X.GridPanel().ID("grdCloseOrder")
            .Region(Region.Center).Scroll(ScrollMode.Both)
            .View(X.GridView().TrackOver(false))
            .SortableColumns(false).Flex(1)
            .Store(X.Store().ID("stoCloseOrder").PageSize(50)
                .AutoLoad(false)
                .Model(Util.GenerateModel(typeof(OM20500_pgOrder_Result), "mdlCloseOrder", ""))
                .ServerProxy(
                    X.AjaxProxy()
                    .Url(Url.Action("GetCloseOrder", "OM20500"))
                    .ActionMethods(action =>
                    {
                        action.Read = HttpMethod.POST;
                    })
                    .Reader(X.JsonReader().Root("data").TotalProperty("totaldata"))
                )
                .Parameters(ps =>
                {
                    ps.Add(new StoreParameter("branchID", "App.cboCpnyID.getValue()", ParameterMode.Raw));
                    ps.Add(new StoreParameter("slsperID", "App.cboSlsperId.getValue()", ParameterMode.Raw));
                    ps.Add(new StoreParameter("custID", "App.cboCustID.getValue()", ParameterMode.Raw));
                    ps.Add(new StoreParameter("status", "App.cboStatus.getValue().join(',')", ParameterMode.Raw));
                    ps.Add(new StoreParameter("startDate", "App.dteStartDate.getValue()", ParameterMode.Raw));
                    ps.Add(new StoreParameter("endDate", "App.dteEndDate.getValue()", ParameterMode.Raw));
                })
                .Listeners(p =>
                        {
                            p.Load.Fn = "Store.stoCloseOrder_load";
                        
                        }))
            .ColumnModel(
                X.RowNumbererColumn().Width(40)

                , X.CheckColumn()
                .HideTitleEl(true).DataIndex("Selected")
                .Align(Alignment.Center).ToolTip(Util.GetLang("Selected"))
                .Width(50).Editable(true)
                .HeaderItems(
                    HQ.Checkbox().ID("chkSelectHeaderCloseOrder")
                    .Handler("PopupWinClose.chkSelectHeaderCloseOrder_change")
                )
                              
                , X.Column()
                .Text(Util.GetLang("OrderNbr")).DataIndex("OrderNbr")

                , X.Column()
                .Text(Util.GetLang("CustID")).DataIndex("CustID")

                , X.Column()
                .Text(Util.GetLang("CustName")).DataIndex("CustName")

                , HQ.DateColumn()
                .Text(Util.GetLang("OrderDate")).DataIndex("OrderDate")

                , X.Column()
                .Text(Util.GetLang("ClassID")).DataIndex("PriceClassID")

                , X.Column()
                .Text(Util.GetLang("Address")).DataIndex("Addr1")

                , X.Column()
                .Text(Util.GetLang("SlsperID")).DataIndex("SlsPerID")

                , X.Column()
                .Text(Util.GetLang("Status")).DataIndex("Status")

                , X.Column().Align(Alignment.Right)
                .Text(Util.GetLang("Qty")).DataIndex("OrdQty")

                , X.Column().Align(Alignment.Right)
                .Text(Util.GetLang("LineAmt")).DataIndex("OrdAmt")

                , X.Column().Align(Alignment.Right)
                .Text(Util.GetLang("TotTax")).DataIndex("TaxTot")

            )
            .SelectionModel(
                X.RowSelectionModel().ID("slmCloseOrder").Mode(SelectionMode.Single)               
            )
            .Features(
            X.GridFilters()
                .Local(true)
                .Filters(
                    X.BooleanFilter().DataIndex("Selected"),
                    X.StringFilter().DataIndex("OrderNbr"),
                    X.StringFilter().DataIndex("CustID"),
                    X.StringFilter().DataIndex("CustName"),
                    X.DateFilter().DataIndex("OrderDate"),
                    X.StringFilter().DataIndex("PriceClassID"),
                    X.StringFilter().DataIndex("Addr1"),
                    X.StringFilter().DataIndex("SlsPerID"),
                    X.StringFilter().DataIndex("Status"),
                    X.NumericFilter().DataIndex("OrdQty"),
                    X.NumericFilter().DataIndex("OrdAmt"),
                    X.NumericFilter().DataIndex("TaxTot")
                )
            )
            .Plugins(
                X.CellEditing()
                .ClicksToEdit(1)
                .Listeners(ls =>
                {
                    //ls.Edit.Fn = "PopupWinClose.grdCloseOrder_edit";
                    //ls.BeforeEdit.Fn = "PopupWinClose.grdCloseOrder_beforeEdit";
                })
            )// grdOrder
        
        )
)