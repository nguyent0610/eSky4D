@using Ext.Net;
@using Ext.Net.MVC;
@using HQ.eSkyFramework;
@using HQ.eSkyFramework.HQControl;
@using OM30400;

@model System.Collections.IEnumerable
  
@{
    Layout = null;
    var X = Html.X();
    ViewBag.Title = "OM30400";
    var acc = Session["OM30400"] as AccessRight;
    var HQ = Html.HQ();
}
<!DOCTYPE html>
<html>
    <head>
        <title>@ViewBag.Title</title>

        <meta name="viewport" content="width=device-width, initial-scale=1.0, user-scalable=no" />
        <link href="~/Content/ComboXTemplate.css" rel="stylesheet" />
        <script src='@Url.Content("Scripts/hq.language"+Current.LangID+".js")' type="text/javascript"></script>
        <script src='@Url.Content("Scripts/hq.common.js")' type="text/javascript"></script>
        <script src='@Url.Content("Scripts/Screen/OM30400.js")' type="text/javascript"></script>

        <script type="text/javascript" src="http://maps.googleapis.com/maps/api/js?key=AIzaSyD1KCqJiFRTtXsU2UxG3Zf7D55Gjft7JJI&sensor=false&libraries=drawing"></script>
        <script src="~/Scripts/Screen/OM30400_map_label.js"></script>
        <script src="~/Scripts/Screen/OM30400_map_contextMenu.js"></script>

        <script type="text/javascript">
            HQ.cpnyID = '@Current.CpnyID';
            HQ.langID = '@Current.LangID';
            HQ.userName = '@Current.UserName';
            HQ.isUpdate = HQ.util.toBool('@acc.Update.ToString()');
            HQ.isInsert = HQ.util.toBool('@acc.Insert.ToString()');
            HQ.isDelete = HQ.util.toBool('@acc.Delete.ToString()');
        </script>
        <style type="text/css">
            html {
                height: 100%;
            }
            body {
                height: 100%;
                margin: 0;
                padding: 0;
            }
            #map_canvas {
                height: 100%;
            }
            .x-grid3-hd-inner {
                white-space: normal;
            }
            #content {
                line-height: 1.35;
                overflow: hidden;
                white-space: nowrap;
            }

            .ci-row .x-grid-cell, .dirty-row .x-grid-rowwrap-div {
	            background-color: #CCFF33 !important;
            }
        
            .co-row .x-grid-cell, .new-row .x-grid-rowwrap-div {
	            background-color: #FF0000 !important;
            }

            .row-FF0000 .x-grid-cell {
                color: #FF0000 !important;
            }

            .row-CCFF33 .x-grid-cell {
                background-color: #CCFF33 !important;
            }

            .row-000000 .x-grid-cell {
                color: #000000 !important;
            }

            .labels {
                color: #FF0000;
                background-color: white;
                font-family: "Lucida Grande", "Arial", sans-serif;
                font-size: 10px;
                font-weight: bold;
                text-align: center;
                width: 60px;
                border: 2px solid black;
                white-space: nowrap;
            }

           
            /*	start styles for the ContextMenu	*/
            .context_menu{
	            background-color:white;
	            border:1px solid gray;
            }
            .context_menu_item{
	            padding:3px 6px;
            }
            .context_menu_item:hover{
	            background-color:#CCCCCC;
            }
            .context_menu_separator{
	            background-color:gray;
	            height:1px;
	            margin:0;
	            padding:0;
            }
            /*	end styles for the ContextMenu	*/
        </style>


    </head>
    <body>
        @(X.ResourceManager()
        .ShowWarningOnAjaxFailure(false)
        .Theme((Theme)Enum.Parse(typeof(Theme), Current.Theme.PassNull() == "" ? "Gray" : Current.Theme.PassNull())))

        @(
 X.Store().ID("storeVisitCustomerPlan")
                //.RemotePaging(true).PageSize(50)
            .AutoLoad(false)
            .Model(Util.GenerateModel(typeof(OM30400_pgVisitCustomerPlan_Result), "OM30400VisitCustomerPlan_ResultModel", ""))
            .ServerProxy(X.AjaxProxy().Url(Url.Action("LoadVisitCustomerPlan")))
            .Parameters(ps =>
            {
                ps.Add(new StoreParameter("channel", "", ParameterMode.Value));
                ps.Add(new StoreParameter("territory", "Index.joinParams(App.cboAreaPlan)", ParameterMode.Raw));
                ps.Add(new StoreParameter("province", "Index.joinParams(App.cboProvincePlan)", ParameterMode.Raw));
                ps.Add(new StoreParameter("distributor", "Index.joinParams(App.cboDistributorPlan)", ParameterMode.Raw));
                ps.Add(new StoreParameter("shopType", "", ParameterMode.Value));
                ps.Add(new StoreParameter("slsperId", "App.cboSalesManPlan.value", ParameterMode.Raw));
                ps.Add(new StoreParameter("daysOfWeek", "App.cboDayOfWeek.value", ParameterMode.Raw));
                ps.Add(new StoreParameter("weekOfVisit", "App.cboWeekOfVisit.value", ParameterMode.Raw));
            })
            .Listeners(l => {
                l.BeforeLoad.Handler = "App.dataForm.getEl().mask('Loading Maps', 'x-mask-loading');";
                l.Load.Fn = "Index.storeVisitCustomerPlan_load"; 
            })
        )

         @(
            X.Store().ID("storeMCL")
            .RemotePaging(true).PageSize(50)
            .AutoLoad(false)
            .Model(Util.GenerateModel(typeof(OM30400_pgLoadMCL_Result),"OM30400LoadMCL_ResultModel",""))
            .ServerProxy(X.AjaxProxy().Url(Url.Action("LoadMCL")))
            .Parameters(ps=>{
                ps.Add(new StoreParameter("channel", "Index.joinParams(App.cboChannelMCL)", ParameterMode.Raw));
                ps.Add(new StoreParameter("territory", "Index.joinParams(App.cboAreaMCL)", ParameterMode.Raw));
                ps.Add(new StoreParameter("province", "Index.joinParams(App.cboProvinceMCL)", ParameterMode.Raw));
                ps.Add(new StoreParameter("distributor", "Index.joinParams(App.cboDistributorMCL)", ParameterMode.Raw));
                ps.Add(new StoreParameter("shopType", "Index.joinParams(App.cboShopTypeMCL)", ParameterMode.Raw));
                ps.Add(new StoreParameter("slsperId", "App.cboSalesManMCL.value", ParameterMode.Raw));
                ps.Add(new StoreParameter("daysOfWeek", "App.cboDayOfWeekMCL.value", ParameterMode.Raw));
                ps.Add(new StoreParameter("weekOfVisit", "App.cboWeekOfVisitMCL.value", ParameterMode.Raw));
            })
                .Listeners(l => { 
                    l.BeforeLoad.Handler = "App.dataForm.getEl().mask('Loading Maps', 'x-mask-loading');";
                    l.Load.Fn = "Index.storeMCL_load";
                })
        )

        @(
            X.Store().ID("storeGridActualVisit")
            //.RemotePaging(true).PageSize(50)
            .AutoLoad(false)
            .Model(Util.GenerateModel(typeof(OM30400_pgGridActualVisit_Result),"OM30400GridActualVisit_ResultModel",""))
            .ServerProxy(X.AjaxProxy().Url(Url.Action("LoadGridActualVisit")))
            .Parameters(ps=>{
                ps.Add(new StoreParameter("distributor", "Index.joinParams(App.cboDistributorActual)", ParameterMode.Raw));
                ps.Add(new StoreParameter("slsperId", "App.cboSalesManActual.value", ParameterMode.Raw));
                ps.Add(new StoreParameter("visitDate", "App.dateVisit.value", ParameterMode.Raw));
                ps.Add(new StoreParameter("realTime", "App.chkRealTime.value", ParameterMode.Raw));
            })
            .Listeners(l => {
                l.BeforeLoad.Handler = "App.dataForm.getEl().mask('Loading Maps', 'x-mask-loading');";
                l.Load.Fn = "Index.storeGridActualVisit_load"; 
            })
        )

        @*@(
            X.Store().ID("storeVisitCustomerActual")
            //.RemotePaging(true).PageSize(50)
            .AutoLoad(false)
            .Model(Util.GenerateModel(typeof(OM30400_pgVisitCustomerActual_Result),"OM30400VisitCustomerActual_ResultModel",""))
            .ServerProxy(X.AjaxProxy().Url(Url.Action("LoadVisitCustomerActual")))
            .Parameters(ps=>{
                ps.Add(new StoreParameter("distributor", "Index.joinParams(App.cboDistributorActual)", ParameterMode.Raw));
                ps.Add(new StoreParameter("slsperId", "App.cboSalesManActual.value", ParameterMode.Raw));
                ps.Add(new StoreParameter("visitDate", "App.dateVisit.value", ParameterMode.Raw));
                ps.Add(new StoreParameter("realTime", "App.chkRealTime.value", ParameterMode.Raw));
            })
            //.Listeners(l=>l.Load.Fn="Index.storeVisitCustomerActual_load")
        )*@

        @(
 X.Store().ID("storeAllCurrentSalesman")
                //.RemotePaging(true).PageSize(50)
            .AutoLoad(false)
            .Model(Util.GenerateModel(typeof(OM30400_pgAllCurrentSalesman_Result), "OM30400AllCurrentSalesman_ResultModel", ""))
            .ServerProxy(X.AjaxProxy().Url(Url.Action("LoadAllCurrentSalesman")))
            .Parameters(ps =>
            {
                ps.Add(new StoreParameter("distributor", "Index.joinParams(App.cboDistributorActual)", ParameterMode.Raw));
                ps.Add(new StoreParameter("visitDate", "App.dateVisit.value", ParameterMode.Raw));
            })
            .Listeners(l => {
                l.BeforeLoad.Handler = "App.dataForm.getEl().mask('Loading Maps', 'x-mask-loading');";
                l.Load.Fn = "Index.storeAllCurrentSalesman_load"; 
            })
        )

        @(
 X.Store().ID("storeCustHistory")
                //.RemotePaging(true).PageSize(50)
            .AutoLoad(false)
            .Model(Util.GenerateModel(typeof(OM30400_pgHistory_Result), "OM30400History_ResultModel", ""))
            .ServerProxy(X.AjaxProxy().Url(Url.Action("LoadCustHistory")))
            .Parameters(ps =>
            {
                ps.Add(new StoreParameter("distributor", "Index.joinParams(App.cboDistributorHistory)", ParameterMode.Raw));
                ps.Add(new StoreParameter("slsperId", "App.cboSalesManHistory.value", ParameterMode.Raw));
                ps.Add(new StoreParameter("customer", "App.cboCustomerHistory.value", ParameterMode.Raw));
                ps.Add(new StoreParameter("startDate", "App.dateFrom.value", ParameterMode.Raw));
                ps.Add(new StoreParameter("endDate", "App.dateTo.value", ParameterMode.Raw));
            })
            .Listeners(l => {
                l.BeforeLoad.Handler = "App.dataForm.getEl().mask('Loading Maps', 'x-mask-loading');"; 
                l.Load.Fn = "Index.storeCustHistory_load"; 
            })
        )

        @(
            X.Store().ID("storeMcpInfo")
            //.RemotePaging(true).PageSize(50)
            .AutoLoad(false)
            .Model(Util.GenerateModel(typeof(OM_SalesRouteMaster),"OM_SalesRouteMasterModel","PJPID,SalesRouteID,CustID,SlsPerID,BranchID"))
            .ServerProxy(X.AjaxProxy().Url(Url.Action("LoadSalesRouteMaster")))
                    .Parameters(ps =>
                    {
                        //ps.Add(new StoreParameter("CustID", "", ParameterMode.Value));
                        //ps.Add(new StoreParameter("SlsPerID", "", ParameterMode.Value));
                        //ps.Add(new StoreParameter("BranchID", "", ParameterMode.Value));
                    })
            .Listeners(l=>l.Load.Fn="McpInfo.storeMcpInfo_load")
        )

        @(
            X.ToolTip()
            .Target("={App.grdActualVisit.getView().el}")
            .TrackMouse(true)
            .Delegate(".x-grid-cell")
            .Listeners(l=>l.Show.Handler="Index.onShow(this, App.grdActualVisit, false);")
        )

        @X.GridFilters() <!--Khi cache cho grid-->
        @X.ProgressBarPager() <!--Khi cache cho grid -->

        <!-- Gọi hàm Body trong OM22001Controller để dựng view Body.cshtml, mục đích tạo cache. -->
        @{ Html.RenderAction("Body", new { lang = Current.LangID }); }

        @(
            X.Window().ID("winMcpInfo")
            .Title(Util.GetLang("UpdateToMcp"))
            .Icon(Icon.BookOpen).Layout(LayoutType.Fit)
            .Hidden(true).Maximizable(true)
            .Height(350)
            .Width(700)
            .Modal(true)
            .Items(
                X.FormPanel().ID("frmMcpInfo")
                .Layout(LayoutType.Border)
                .TrackResetOnLoad(true)
                .DefaultAnchor("100%")
                .BodyPadding(5)
                .BodyBorder(0)
                .FieldDefaults(act => { act.LabelAlign = LabelAlign.Right; act.LabelWidth = 100; })
                .Items(
                    X.FieldSet().ID("fdsHeaderMcp")
                    .Title(Util.GetLang("CustInfo"))
                    .Layout(LayoutType.HBox).Region(Region.North)
                    .LayoutConfig(new HBoxLayoutConfig { Align = HBoxAlign.Top })
                    .Items(
                        X.Container()
                        .Layout(LayoutType.VBox).Flex(1).MarginSpec("5 5 5 5")
                        .LayoutConfig(new VBoxLayoutConfig { Align = VBoxAlign.Stretch })
                        .Items(
                            HQ.TextBox().ID("txtCustIDMcpInfo")
                            .HQLangCode("CustID").ReadOnly(true)

                            , X.Hidden().ID("hdnSlsperIDMcpInfo")
                            , HQ.TextBox().ID("txtSlsperIDMcpInfo")
                            .HQLangCode("SlsperID").ReadOnly(true)

                            , X.Hidden().ID("hdnBranchIDMcpInfo")
                            , HQ.TextBox().ID("txtDistributorMcpInfo")
                            .HQLangCode("Distributor").ReadOnly(true)
                            
                            , HQ.Checkbox().ID("chkCustStatusMcpInfo")
                            .HQLangCode("Active").FieldLabel(Util.GetLang("Status"))
                            .Handler("McpInfo.chkCustStatusMcpInfo_change")
                        )

                        , X.Container()
                        .Layout(LayoutType.VBox).Flex(1).MarginSpec("5 5 5 0")
                        .LayoutConfig(new VBoxLayoutConfig { Align = VBoxAlign.Stretch })
                        .Items(
                            HQ.TextBox().ID("txtCustNameMcpInfo")
                            .HQLangCode("CustName").ReadOnly(true)
                            
                            ,X.TextArea().ID("txtAddressMcpInfo")
                            .FieldLabel(Util.GetLang("Address")).Height(50).ReadOnly(true)
                        )
                    ) // fdsHeaderMcp

                    , X.FieldSet().ID("fdsContentMcp")
                    .Title(Util.GetLang("MCP"))
                    .Layout(LayoutType.VBox).Region(Region.Center)
                    .LayoutConfig(new VBoxLayoutConfig { Align = VBoxAlign.Stretch })
                    .Flex(1).Disabled(true)
                    .Items(
                        X.Container()
                        .Layout(LayoutType.HBox).MarginSpec("5 5 5 5")
                        .LayoutConfig(new HBoxLayoutConfig { Align = HBoxAlign.Top })
                        .Items(
                            HQ.Combo().ID("cboSlsFreqMcpInfo")
                            .Flex(1).ForceSelection(true).AllowBlank(false)
                            .DataIndex("SlsFreq")
                            .HQLangCode("SLSFREQ").HQProcedure("OM30400_pcSlsFreq")
                            .HQColumnShow("Descr").DisplayField("Descr").ValueField("Code")
                            .HQParam(new StoreParameterCollection() { 
                                new StoreParameter("@langid", "HQ.langID", ParameterMode.Raw)
                            })
                            .LoadData()
                            .Listeners(x => x.Change.Handler = "App.cboWeekofVisitMcpInfo.store.reload()")

                            , HQ.Combo().ID("cboWeekofVisitMcpInfo")
                            .Flex(1).ForceSelection(true).AllowBlank(false)
                            .HQFirstDefault(true).DataIndex("WeekofVisit")
                            .HQLangCode("WEEKOFVISIT").HQProcedure("OM30400_pcWeekofVisitMCL")
                            .HQColumnShow("Descr").DisplayField("Descr").ValueField("Code")
                            .HQParam(new StoreParameterCollection() { 
                                new StoreParameter("@SlsFreq", "App.cboSlsFreqMcpInfo.value", ParameterMode.Raw)
                                ,new StoreParameter("@SlsFreqType", "R", ParameterMode.Value)
                                ,new StoreParameter("@langid", "HQ.langID", ParameterMode.Raw)
                            })
                            .LoadData()
                        )

                        , X.Container()
                        .Layout(LayoutType.HBox).MarginSpec("5 5 5 5")
                        .LayoutConfig(new HBoxLayoutConfig { Align = HBoxAlign.Top })
                        .Items(
                            HQ.NumberField().ID("numVisitSortMcpInfo")
                            .HQLangCode("VisitSort").DataIndex("VisitSort")
                            .AllowBlank(false).DecimalPrecision(0).Width(150).MinValue(1)

                            , X.Container().Layout(LayoutType.HBox).Flex(1)
                            .LayoutConfig(new HBoxLayoutConfig { Align = HBoxAlign.Top, Pack = BoxPack.Center })
                            .Items(
                                HQ.Checkbox()
                                .HQLangCode("Sun").DataIndex("Sun")
                                .MarginSpec("0 0 0 10")

                                , HQ.Checkbox()
                                .HQLangCode("Mon").DataIndex("Mon")
                                .MarginSpec("0 0 0 5")

                                , HQ.Checkbox()
                                .HQLangCode("Tue").DataIndex("Tue")
                                .MarginSpec("0 0 0 5")

                                , HQ.Checkbox()
                                .HQLangCode("Wed").DataIndex("Wed")
                                .MarginSpec("0 0 0 5")

                                , HQ.Checkbox()
                                .HQLangCode("Thu").DataIndex("Thu")
                                .MarginSpec("0 0 0 5")

                                , HQ.Checkbox()
                                .HQLangCode("Fri").DataIndex("Fri")
                                .MarginSpec("0 0 0 5")

                                , HQ.Checkbox()
                                .HQLangCode("Sat").DataIndex("Sat")
                                .MarginSpec("0 0 0 5")
                            )
                        )
                        
                        , X.Container()
                        .Layout(LayoutType.HBox).MarginSpec("5 5 5 5")
                        .LayoutConfig(new HBoxLayoutConfig { Align = HBoxAlign.Top, Pack = BoxPack.Center })
                        .Items(
                            HQ.Button().ID("btnDeleteMcpInfo")
                            .HQLangCode("Delete").Icon(Icon.Delete)
                            .MarginSpec("0 0 0 10")
                            .Handler("McpInfo.btnDeleteMcpInfo_click")
                        ) // buttons
                    ) // fdsContentMcp
                    
                    , X.Container()
                    .Region(Region.South)
                    .Layout(LayoutType.HBox).MarginSpec("5 5 5 5")
                    .LayoutConfig(new HBoxLayoutConfig { Align = HBoxAlign.Top, Pack = BoxPack.Center })
                    .Items(
                        HQ.Button().ID("btnSaveMcpInfo")
                        .HQLangCode("Save").Icon(Icon.Disk)
                        .Handler("McpInfo.btnSaveMcpInfo_click")
                            
                        , HQ.Button().ID("btnCancelMcpInfo")
                        .HQLangCode("Cancel").Icon(Icon.Decline)
                        .MarginSpec("0 0 0 5")
                        .Handler("McpInfo.btnCancelMcpInfo_click")
                    ) // buttons
                )// FormPanel: frmMcpInfo
            )
            .Listeners(l =>
            {
                //l.BeforeShow.Fn = "EmailQuotation.winEmail_beforeShow";
                //l.BeforeClose.Fn = "EmailQuotation.winEmail_beforeClose";
                //l.Close.Fn = "EmailQuotation.winEmail_close";
            }) // Window: winMcpInfo
        )
    </body>
</html>