@using Ext.Net;
@using Ext.Net.MVC;
@using HQ.eSkyFramework;
@using HQ.eSkyFramework.HQControl;
@using CA20300;
@{
    Layout = null;
    var X = Html.X();
    var HQ = Html.HQ();
}

@(X.Viewport()
    .Layout(LayoutType.Fit)
    .Items(
        X.FormPanel()
        .ID("frmMain")
        .BodyPadding(0)
        .KeyMap(Util.SetupKeyMap())
        .TopBar(Util.SetupToolbar("Print", true, ""))
        .Layout(LayoutType.Fit)
        .Listeners(l =>
                        {
                            l.BoxReady.Handler = "firstLoad()";
                        })
        .Items(
            ////Thiet ke giao dien o day

            X.GridPanel()
            .Scroll(ScrollMode.Both)
            .View(X.GridView().TrackOver(false))
            .ID("grdCostType")
            .Store(
                X.Store()
                .ID("stoCostType")
                .PageSize(50)
                .Model(Util.GenerateModel(typeof(CA20300_pgLoadCostType_Result), "mdCA_CostType", "TypeID"))
                .ServerProxy(X.AjaxProxy().Url(Url.Action("GetCostType"))).AutoLoad(false)
                .Listeners(l =>
                {
                   // l.BeforeLoad.Handler = "HQ.common.showBusy(true,HQ.common.getLang(\"loadingdata\"));";
                   // l.Load.Handler = "HQ.common.showBusy(false);";
                    l.Load.Fn = "stoLoad";
                    l.Update.Fn = "frmChange";
                })
            )
            .Listeners(lst => lst.Render.Handler = "HQ.common.control_render(this,'grdCostType');")
           // .Listeners(p => p.BoxReady.Handler = "App.stoCostType.reload();")
            .SortableColumns(false)
            .ColumnModel(
                X.RowNumbererColumn().Width(40)
                , X.Column().ID("TypeID").Text(Util.GetLang("TypeID")).DataIndex("TypeID").Width(150)
                    .Editor(Html.X().TextField().MaxLength(25).EnforceMaxLength(true))
                , X.Column().Text(Util.GetLang("Descr")).DataIndex("Descr").Width(150)
                    .Editor(Html.X().TextField().MaxLength(255).EnforceMaxLength(true))
                , X.CommandColumn().Width(150)
                                        .Commands(
                                            Html.X().GridCommand()
                                                .Text(Util.GetLang("Reject"))
                                                .ToolTip(t =>
                                                {
                                                    t.Text = Util.GetLang("Rejectrowchanges");
                                                })
                                                .CommandName("reject")
                                                .Icon(Icon.ArrowUndo)
                                        )
                                        .PrepareToolbar(t =>
                                        {
                                            t.Handler = "toolbar.items.get(0).setVisible(record.dirty);";
                                        })
                                        .Listeners(l =>
                                        {
                                            l.Command.Handler = "grd_Reject(record);";
                                        })
            )
            .SelectionModel(X.RowSelectionModel().ID("slmCostType").Mode(SelectionMode.Multi))
            .BottomBar(
                X.PagingToolbar()
                .Items(
                    X.Label("Page size:"),
                    X.ToolbarSpacer(10),
                    X.ComboBox()
                    .Width(80)
                    .Items("1", "2", "10", "20", "30", "50")
                    .SelectedItems("50")
                    .Listeners(l => l.Select.Fn = "HQ.grid.onPageSelect")
                )
                .Plugins(X.ProgressBarPager())
            )
                  .Plugins(
                    X.CellEditing()
                    .ClicksToEdit(1)
                    .Listeners(ls =>
                    {
                        ls.BeforeEdit.Fn = "grdCostType_BeforeEdit";
                        ls.Edit.Fn = "grdCostType_Edit";
                        ls.ValidateEdit.Fn = "grdCostType_ValidateEdit";
                    })
                )


            .Features(
                X.GridFilters()
                    .Local(true)
                    .Filters(
                        X.StringFilter().DataIndex("TypeID"),
                        X.StringFilter().DataIndex("Descr")
                     )
            )
        )
    )
)
