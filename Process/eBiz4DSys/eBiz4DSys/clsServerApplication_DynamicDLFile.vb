'-- ------------------------------------------------------------
'-- Class name    :  clsServerApplication_DynamicDLFile
'-- Created date  :  12/11/2012
'-- Created by    :  
'-- Updated by    :  
'-- Generated by    :  Class Maker v1.0
'-- ------------------------------------------------------------

'-- Import Libraries --
Imports HQFramework
Imports HQFramework.DAL
Imports HQFramework.Common

Public Class clsServerApplication_DynamicDLFile
#Region "Constants"
    Private Const PP_ServerApplication_DynamicDLFile As String = "PP_ServerApplication_DynamicDLFile"
#End Region

#Region "Member Variables"
    Private mvarUsrId As System.String

    Private mvarFileName As System.String

    Private mvarVersion As System.String

    Private mvarClientPath As System.String

    Private mvarSyncID As System.String

    Private mvarPlanSync As System.Int32

#End Region

    Private m_Dal As DataAccess
#Region "Constructors"
    Public Sub New()
        m_Dal = New DataAccess
        Reset()
    End Sub
    Public Sub New(ByVal dal As DataAccess)
        m_Dal = dal
        Reset()
    End Sub
#End Region

#Region "Public Properties"
    Public Property UsrId() As System.String
        Get
            Return mvarUsrId
        End Get
        Set(ByVal Value As System.String)
            mvarUsrId = Value
        End Set
    End Property

    Public Property FileName() As System.String
        Get
            Return mvarFileName
        End Get
        Set(ByVal Value As System.String)
            mvarFileName = Value
        End Set
    End Property

    Public Property Version() As System.String
        Get
            Return mvarVersion
        End Get
        Set(ByVal Value As System.String)
            mvarVersion = Value
        End Set
    End Property

    Public Property ClientPath() As System.String
        Get
            Return mvarClientPath
        End Get
        Set(ByVal Value As System.String)
            mvarClientPath = Value
        End Set
    End Property

    Public Property SyncID() As System.String
        Get
            Return mvarSyncID
        End Get
        Set(ByVal Value As System.String)
            mvarSyncID = Value
        End Set
    End Property

    Public Property PlanSync() As System.Int32
        Get
            Return mvarPlanSync
        End Get
        Set(ByVal Value As System.Int32)
            mvarPlanSync = Value
        End Set
    End Property

#End Region

#Region "Public Methods"
    Public Function Add() As Boolean
        Dim DAL As DataAccess = m_Dal
        Try
            Dim pc As New ParamCollection
            pc.Add(New ParamStruct("@Action", DbType.String, "AddNew", ParameterDirection.Input, 50))
            pc.Add(New ParamStruct("@UsrId", DbType.String, clsCommon.GetValueDBNull(Me.mvarUsrId), ParameterDirection.Input, 10))
            pc.Add(New ParamStruct("@FileName", DbType.String, clsCommon.GetValueDBNull(Me.mvarFileName), ParameterDirection.Input, 200))
            pc.Add(New ParamStruct("@Version", DbType.String, clsCommon.GetValueDBNull(Me.mvarVersion), ParameterDirection.Input, 20))
            pc.Add(New ParamStruct("@ClientPath", DbType.String, clsCommon.GetValueDBNull(Me.mvarClientPath), ParameterDirection.Input, 50))
            pc.Add(New ParamStruct("@SyncID", DbType.String, clsCommon.GetValueDBNull(Me.mvarSyncID), ParameterDirection.Input, 20))
            pc.Add(New ParamStruct("@PlanSync", DbType.Int32, clsCommon.GetValueDBNull(Me.mvarPlanSync), ParameterDirection.Input, 4))
            DAL.ExecPreparedSQL(PP_ServerApplication_DynamicDLFile, CommandType.StoredProcedure, pc, "")
            Me.mvarUsrId = clsCommon.GetValue(pc.Item("@UsrId").Value, mvarUsrId.GetType().FullName)
            Return (Me.mvarUsrId <> String.Empty)
        Catch ex As Exception
            Throw ex
        End Try
    End Function
    Public Function Update() As Boolean
        Dim DAL As DataAccess = m_Dal
        Try
            Dim pc As New ParamCollection
            pc.Add(New ParamStruct("@Action", DbType.String, "Update", ParameterDirection.Input, 50))
            pc.Add(New ParamStruct("@UsrId", DbType.String, clsCommon.GetValueDBNull(Me.mvarUsrId), ParameterDirection.Input, 10))
            pc.Add(New ParamStruct("@FileName", DbType.String, clsCommon.GetValueDBNull(Me.mvarFileName), ParameterDirection.Input, 200))
            pc.Add(New ParamStruct("@Version", DbType.String, clsCommon.GetValueDBNull(Me.mvarVersion), ParameterDirection.Input, 20))
            pc.Add(New ParamStruct("@ClientPath", DbType.String, clsCommon.GetValueDBNull(Me.mvarClientPath), ParameterDirection.Input, 50))
            pc.Add(New ParamStruct("@SyncID", DbType.String, clsCommon.GetValueDBNull(Me.mvarSyncID), ParameterDirection.Input, 20))
            pc.Add(New ParamStruct("@PlanSync", DbType.Int32, clsCommon.GetValueDBNull(Me.mvarPlanSync), ParameterDirection.Input, 4))
            Return (DAL.ExecNonQuery(PP_ServerApplication_DynamicDLFile, CommandType.StoredProcedure, pc, "") > 0)
        Catch ex As Exception
            Throw ex
        End Try
    End Function
    Public Function Delete(ByVal UsrId As System.String, ByVal FileName As System.String, ByVal Version As System.String) As Boolean
        Dim DAL As DataAccess = m_Dal
        Try
            Dim pc As New ParamCollection
            pc.Add(New ParamStruct("@Action", DbType.String, "Delete", ParameterDirection.Input, 50))
            pc.Add(New ParamStruct("@UsrId", DbType.String, clsCommon.GetValueDBNull(UsrId), ParameterDirection.Input, 10))
            pc.Add(New ParamStruct("@FileName", DbType.String, clsCommon.GetValueDBNull(FileName), ParameterDirection.Input, 200))
            pc.Add(New ParamStruct("@Version", DbType.String, clsCommon.GetValueDBNull(Version), ParameterDirection.Input, 20))
            Return (DAL.ExecNonQuery(PP_ServerApplication_DynamicDLFile, CommandType.StoredProcedure, pc, "") > 0)
        Catch ex As Exception
            Throw ex
        End Try
    End Function
    Public Function GetAll(ByVal UsrId As System.String, ByVal FileName As System.String, ByVal Version As System.String) As DataTable
        Dim DAL As DataAccess = m_Dal
        Try
            Dim pc As New ParamCollection
            Dim ds As New DataSet
            pc.Add(New ParamStruct("@Action", DbType.String, "GetListData", ParameterDirection.Input, 50))
            pc.Add(New ParamStruct("@UsrId", DbType.String, clsCommon.GetValueDBNull(UsrId), ParameterDirection.Input, 10))
            pc.Add(New ParamStruct("@FileName", DbType.String, clsCommon.GetValueDBNull(FileName), ParameterDirection.Input, 200))
            pc.Add(New ParamStruct("@Version", DbType.String, clsCommon.GetValueDBNull(Version), ParameterDirection.Input, 20))
            ds = DAL.ExecDataSet(PP_ServerApplication_DynamicDLFile, CommandType.StoredProcedure, pc, "")
            Dim keys(2) As DataColumn
            Dim column As DataColumn
            column = ds.Tables(0).Columns("UsrId")
            keys(0) = column
            column = ds.Tables(0).Columns("FileName")
            keys(1) = column
            column = ds.Tables(0).Columns("Version")
            keys(2) = column
            ds.Tables(0).PrimaryKey = keys
            Return ds.Tables(0)
        Catch ex As Exception
            Throw ex
        End Try
    End Function
    Public Sub Reset()
        mvarUsrId = String.Empty
        mvarFileName = String.Empty
        mvarVersion = String.Empty
        mvarClientPath = String.Empty
        mvarSyncID = String.Empty
        mvarPlanSync = 0
    End Sub
    Public Function GetByKey(ByVal UsrId As System.String, ByVal FileName As System.String, ByVal Version As System.String) As Boolean
        Dim DAL As DataAccess = m_Dal
        Dim ds As New DataSet
        Try
            Dim pc As New ParamCollection
            pc.Add(New ParamStruct("@Action", DbType.String, "GetData_ByKey", ParameterDirection.Input, 50))
            pc.Add(New ParamStruct("@UsrId", DbType.String, clsCommon.GetValueDBNull(UsrId), ParameterDirection.InputOutput, 10))
            pc.Add(New ParamStruct("@FileName", DbType.String, clsCommon.GetValueDBNull(FileName), ParameterDirection.InputOutput, 200))
            pc.Add(New ParamStruct("@Version", DbType.String, clsCommon.GetValueDBNull(Version), ParameterDirection.InputOutput, 20))
            ds = DAL.ExecDataSet(PP_ServerApplication_DynamicDLFile, CommandType.StoredProcedure, pc, "")
            Me.Reset()
            If ds Is Nothing Then
                Return False
            End If
            If ds.Tables(0).Rows.Count > 0 Then
                FillData(ds.Tables(0).Rows(0))
                Return True
            End If
        Catch ex As Exception
            Throw ex
        End Try
        Return False
    End Function
    Public Sub FillData(row As DataRow)
        mvarUsrId = clsCommon.GetValue(row("UsrId"), mvarUsrId.GetType().FullName)
        mvarFileName = clsCommon.GetValue(row("FileName"), mvarFileName.GetType().FullName)
        mvarVersion = clsCommon.GetValue(row("Version"), mvarVersion.GetType().FullName)
        mvarClientPath = clsCommon.GetValue(row("ClientPath"), mvarClientPath.GetType().FullName)
        mvarSyncID = clsCommon.GetValue(row("SyncID"), mvarSyncID.GetType().FullName)
        mvarPlanSync = clsCommon.GetValue(row("PlanSync"), mvarPlanSync.GetType().FullName)
    End Sub
#End Region

#Region "Private Methods"
#End Region

End Class
