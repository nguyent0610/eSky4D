'-- ------------------------------------------------------------
'-- Class name    :  clsSYS_SubCompany
'-- Created date  :  12/11/2012
'-- Created by    :  
'-- Updated by    :  
'-- Generated by    :  Class Maker v1.0
'-- ------------------------------------------------------------

'-- Import Libraries --
Imports HQFramework
Imports HQFramework.DAL
Imports HQFramework.Common

Public Class clsSYS_SubCompany
#Region "Constants"
    Private Const PP_SYS_SubCompany As String = "PP_SYS_SubCompany"
#End Region

#Region "Member Variables"
    Private mvarCpnyID As System.String

    Private mvarSubCpnyID As System.String

#End Region

    Private m_Dal As DataAccess
#Region "Constructors"
    Public Sub New()
        m_Dal = New DataAccess
        Reset()
    End Sub
    Public Sub New(ByVal dal As DataAccess)
        m_Dal = dal
        Reset()
    End Sub
#End Region

#Region "Public Properties"
    Public Property CpnyID() As System.String
        Get
            Return mvarCpnyID
        End Get
        Set(ByVal Value As System.String)
            mvarCpnyID = Value
        End Set
    End Property

    Public Property SubCpnyID() As System.String
        Get
            Return mvarSubCpnyID
        End Get
        Set(ByVal Value As System.String)
            mvarSubCpnyID = Value
        End Set
    End Property

#End Region

#Region "Public Methods"
    Public Function Add() As Boolean
        Dim DAL As DataAccess = m_Dal
        Try
            Dim pc As New ParamCollection
            pc.Add(New ParamStruct("@Action", DbType.String, "AddNew", ParameterDirection.Input, 50))
            pc.Add(New ParamStruct("@CpnyID", DbType.String, clsCommon.GetValueDBNull(Me.mvarCpnyID), ParameterDirection.Input, 10))
            pc.Add(New ParamStruct("@SubCpnyID", DbType.String, clsCommon.GetValueDBNull(Me.mvarSubCpnyID), ParameterDirection.Input, 10))
            DAL.ExecPreparedSQL(PP_SYS_SubCompany, CommandType.StoredProcedure, pc, "")
            Me.mvarCpnyID = clsCommon.GetValue(pc.Item("@CpnyID").Value, mvarCpnyID.GetType().FullName)
            Return (Me.mvarCpnyID <> String.Empty)
        Catch ex As Exception
            Throw ex
        End Try
    End Function
    Public Function Update() As Boolean
        Dim DAL As DataAccess = m_Dal
        Try
            Dim pc As New ParamCollection
            pc.Add(New ParamStruct("@Action", DbType.String, "Update", ParameterDirection.Input, 50))
            pc.Add(New ParamStruct("@CpnyID", DbType.String, clsCommon.GetValueDBNull(Me.mvarCpnyID), ParameterDirection.Input, 10))
            pc.Add(New ParamStruct("@SubCpnyID", DbType.String, clsCommon.GetValueDBNull(Me.mvarSubCpnyID), ParameterDirection.Input, 10))
            Return (DAL.ExecNonQuery(PP_SYS_SubCompany, CommandType.StoredProcedure, pc, "") > 0)
        Catch ex As Exception
            Throw ex
        End Try
    End Function
    Public Function Delete(ByVal CpnyID As System.String, ByVal Sub1CpnyID As System.String) As Boolean
        Dim DAL As DataAccess = m_Dal
        Try
            Dim pc As New ParamCollection
            pc.Add(New ParamStruct("@Action", DbType.String, "Delete", ParameterDirection.Input, 50))
            pc.Add(New ParamStruct("@CpnyID", DbType.String, clsCommon.GetValueDBNull(CpnyID), ParameterDirection.Input, 10))
            pc.Add(New ParamStruct("@SubCpnyID", DbType.String, clsCommon.GetValueDBNull(SubCpnyID), ParameterDirection.Input, 10))
            Return (DAL.ExecNonQuery(PP_SYS_SubCompany, CommandType.StoredProcedure, pc, "") > 0)
        Catch ex As Exception
            Throw ex
        End Try
    End Function
    Public Function GetAll(ByVal CpnyID As System.String, ByVal Sub1CpnyID As System.String) As DataTable
        Dim DAL As DataAccess = m_Dal
        Try
            Dim pc As New ParamCollection
            Dim ds As New DataSet
            pc.Add(New ParamStruct("@Action", DbType.String, "GetListData", ParameterDirection.Input, 50))
            pc.Add(New ParamStruct("@CpnyID", DbType.String, clsCommon.GetValueDBNull(CpnyID), ParameterDirection.Input, 10))
            pc.Add(New ParamStruct("@SubCpnyID", DbType.String, clsCommon.GetValueDBNull(SubCpnyID), ParameterDirection.Input, 10))
            ds = DAL.ExecDataSet(PP_SYS_SubCompany, CommandType.StoredProcedure, pc, "")
            Dim keys(1) As DataColumn
            Dim column As DataColumn
            column = ds.Tables(0).Columns("CpnyID")
            keys(0) = column
            column = ds.Tables(0).Columns("SubCpnyID")
            keys(1) = column
            ds.Tables(0).PrimaryKey = keys
            Return ds.Tables(0)
        Catch ex As Exception
            Throw ex
        End Try
    End Function
    Public Sub Reset()
        mvarCpnyID = String.Empty
        mvarSubCpnyID = String.Empty
    End Sub
    Public Function GetByKey(ByVal CpnyID As System.String, ByVal Sub1CpnyID As System.String) As Boolean
        Dim DAL As DataAccess = m_Dal
        Dim ds As New DataSet
        Try
            Dim pc As New ParamCollection
            pc.Add(New ParamStruct("@Action", DbType.String, "GetData_ByKey", ParameterDirection.Input, 50))
            pc.Add(New ParamStruct("@CpnyID", DbType.String, clsCommon.GetValueDBNull(CpnyID), ParameterDirection.InputOutput, 10))
            pc.Add(New ParamStruct("@SubCpnyID", DbType.String, clsCommon.GetValueDBNull(SubCpnyID), ParameterDirection.InputOutput, 10))
            ds = DAL.ExecDataSet(PP_SYS_SubCompany, CommandType.StoredProcedure, pc, "")
            Me.Reset()
            If ds Is Nothing Then
                Return False
            End If
            If ds.Tables(0).Rows.Count > 0 Then
                FillData(ds.Tables(0).Rows(0))
                Return True
            End If
        Catch ex As Exception
            Throw ex
        End Try
        Return False
    End Function
    Public Sub FillData(row As DataRow)
        mvarCpnyID = clsCommon.GetValue(row("CpnyID"), mvarCpnyID.GetType().FullName)
        mvarSubCpnyID = clsCommon.GetValue(row("SubCpnyID"), mvarSubCpnyID.GetType().FullName)
    End Sub
#End Region

#Region "Private Methods"
#End Region

End Class
