'-- ------------------------------------------------------------
'-- Class name    :  clssysdiagrams
'-- Created date  :  12/11/2012
'-- Created by    :  
'-- Updated by    :  
'-- Generated by    :  Class Maker v1.0
'-- ------------------------------------------------------------

'-- Import Libraries --
Imports HQFramework
Imports HQFramework.DAL
Imports HQFramework.Common

Public Class clssysdiagrams
#Region "Constants"
    Private Const PP_sysdiagrams As String = "PP_sysdiagrams"
#End Region

#Region "Member Variables"
    Private mvarname As System.String

    Private mvarprincipal_id As System.Int32

    Private mvardiagram_id As System.Int32

    Private mvarversion As System.Int32

    Private mvardefinition As System.Byte

#End Region

    Private m_Dal As DataAccess
#Region "Constructors"
    Public Sub New()
        m_Dal = New DataAccess
        Reset()
    End Sub
    Public Sub New(ByVal dal As DataAccess)
        m_Dal = dal
        Reset()
    End Sub
#End Region

#Region "Public Properties"
    Public Property name() As System.String
        Get
            Return mvarname
        End Get
        Set(ByVal Value As System.String)
            mvarname = Value
        End Set
    End Property

    Public Property principal_id() As System.Int32
        Get
            Return mvarprincipal_id
        End Get
        Set(ByVal Value As System.Int32)
            mvarprincipal_id = Value
        End Set
    End Property

    Public Property diagram_id() As System.Int32
        Get
            Return mvardiagram_id
        End Get
        Set(ByVal Value As System.Int32)
            mvardiagram_id = Value
        End Set
    End Property

    Public Property version() As System.Int32
        Get
            Return mvarversion
        End Get
        Set(ByVal Value As System.Int32)
            mvarversion = Value
        End Set
    End Property

    Public Property definition() As System.Byte
        Get
            Return mvardefinition
        End Get
        Set(ByVal Value As System.Byte)
            mvardefinition = Value
        End Set
    End Property

#End Region

#Region "Public Methods"
    Public Function Add() As Boolean
        Dim DAL As DataAccess = m_Dal
        Try
            Dim pc As New ParamCollection
            pc.Add(New ParamStruct("@Action", DbType.String, "AddNew", ParameterDirection.Input, 50))
            pc.Add(New ParamStruct("@name", DbType.String, clsCommon.GetValueDBNull(Me.mvarname), ParameterDirection.Input, 128))
            pc.Add(New ParamStruct("@principal_id", DbType.Int32, clsCommon.GetValueDBNull(Me.mvarprincipal_id), ParameterDirection.Input, 4))
            pc.Add(New ParamStruct("@diagram_id", DbType.Int32, clsCommon.GetValueDBNull(Me.mvardiagram_id), ParameterDirection.Input, 4))
            pc.Add(New ParamStruct("@version", DbType.Int32, clsCommon.GetValueDBNull(Me.mvarversion), ParameterDirection.Input, 4))
            pc.Add(New ParamStruct("@definition", DbType.Byte, clsCommon.GetValueDBNull(Me.mvardefinition), ParameterDirection.Input, Nothing))
            DAL.ExecPreparedSQL(PP_sysdiagrams, CommandType.StoredProcedure, pc, "")
            Me.mvarname = clsCommon.GetValue(pc.Item("@name").Value, mvarname.GetType().FullName)
            Return (Me.mvarname <> String.Empty)
        Catch ex As Exception
            Throw ex
        End Try
    End Function
    Public Function Update() As Boolean
        Dim DAL As DataAccess = m_Dal
        Try
            Dim pc As New ParamCollection
            pc.Add(New ParamStruct("@Action", DbType.String, "Update", ParameterDirection.Input, 50))
            pc.Add(New ParamStruct("@name", DbType.String, clsCommon.GetValueDBNull(Me.mvarname), ParameterDirection.Input, 128))
            pc.Add(New ParamStruct("@principal_id", DbType.Int32, clsCommon.GetValueDBNull(Me.mvarprincipal_id), ParameterDirection.Input, 4))
            pc.Add(New ParamStruct("@diagram_id", DbType.Int32, clsCommon.GetValueDBNull(Me.mvardiagram_id), ParameterDirection.Input, 4))
            pc.Add(New ParamStruct("@version", DbType.Int32, clsCommon.GetValueDBNull(Me.mvarversion), ParameterDirection.Input, 4))
            pc.Add(New ParamStruct("@definition", DbType.Byte, clsCommon.GetValueDBNull(Me.mvardefinition), ParameterDirection.Input, Nothing))
            Return (DAL.ExecNonQuery(PP_sysdiagrams, CommandType.StoredProcedure, pc, "") > 0)
        Catch ex As Exception
            Throw ex
        End Try
    End Function
    Public Function Delete(ByVal diagram_id As System.Int32) As Boolean
        Dim DAL As DataAccess = m_Dal
        Try
            Dim pc As New ParamCollection
            pc.Add(New ParamStruct("@Action", DbType.String, "Delete", ParameterDirection.Input, 50))
            pc.Add(New ParamStruct("@diagram_id", DbType.Int32, clsCommon.GetValueDBNull(diagram_id), ParameterDirection.Input, 4))
            Return (DAL.ExecNonQuery(PP_sysdiagrams, CommandType.StoredProcedure, pc, "") > 0)
        Catch ex As Exception
            Throw ex
        End Try
    End Function
    Public Function GetAll(ByVal diagram_id As System.Int32) As DataTable
        Dim DAL As DataAccess = m_Dal
        Try
            Dim pc As New ParamCollection
            Dim ds As New DataSet
            pc.Add(New ParamStruct("@Action", DbType.String, "GetListData", ParameterDirection.Input, 50))
            pc.Add(New ParamStruct("@diagram_id", DbType.Int32, clsCommon.GetValueDBNull(diagram_id), ParameterDirection.Input, 4))
            ds = DAL.ExecDataSet(PP_sysdiagrams, CommandType.StoredProcedure, pc, "")
            Dim keys(0) As DataColumn
            Dim column As DataColumn
            column = ds.Tables(0).Columns("diagram_id")
            keys(0) = column
            ds.Tables(0).PrimaryKey = keys
            Return ds.Tables(0)
        Catch ex As Exception
            Throw ex
        End Try
    End Function
    Public Sub Reset()
        mvarname = String.Empty
        mvarprincipal_id = 0
        mvardiagram_id = 0
        mvarversion = 0
        mvardefinition = Nothing
    End Sub
    Public Function GetByKey(ByVal diagram_id As System.Int32) As Boolean
        Dim DAL As DataAccess = m_Dal
        Dim ds As New DataSet
        Try
            Dim pc As New ParamCollection
            pc.Add(New ParamStruct("@Action", DbType.String, "GetData_ByKey", ParameterDirection.Input, 50))
            pc.Add(New ParamStruct("@diagram_id", DbType.Int32, clsCommon.GetValueDBNull(diagram_id), ParameterDirection.InputOutput, 4))
            ds = DAL.ExecDataSet(PP_sysdiagrams, CommandType.StoredProcedure, pc, "")
            Me.Reset()
            If ds Is Nothing Then
                Return False
            End If
            If ds.Tables(0).Rows.Count > 0 Then
                FillData(ds.Tables(0).Rows(0))
                Return True
            End If
        Catch ex As Exception
            Throw ex
        End Try
        Return False
    End Function
    Public Sub FillData(row As DataRow)
        mvarname = clsCommon.GetValue(row("name"), mvarname.GetType().FullName)
        mvarprincipal_id = clsCommon.GetValue(row("principal_id"), mvarprincipal_id.GetType().FullName)
        mvardiagram_id = clsCommon.GetValue(row("diagram_id"), mvardiagram_id.GetType().FullName)
        mvarversion = clsCommon.GetValue(row("version"), mvarversion.GetType().FullName)
        mvardefinition = clsCommon.GetValue(row("definition"), mvardefinition.GetType().FullName)
    End Sub
#End Region

#Region "Private Methods"
#End Region

End Class
