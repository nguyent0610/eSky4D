'-- ------------------------------------------------------------
'-- Class name    :  clsSYS_BuildLog
'-- Created date  :  12/11/2012
'-- Created by    :  
'-- Updated by    :  
'-- Generated by    :  Class Maker v1.0
'-- ------------------------------------------------------------

'-- Import Libraries --
Imports HQFramework
Imports HQFramework.DAL
Imports HQFramework.Common

Public Class clsSYS_BuildLog
#Region "Constants"
    Private Const PP_SYS_BuildLog As String = "PP_SYS_BuildLog"
#End Region

#Region "Member Variables"
    Private mvarVersion As System.String

    Private mvarBuildID As System.Int32

    Private mvarDescr As System.String

    Private mvarAppliedDate As System.DateTime

#End Region

    Private m_Dal As DataAccess
#Region "Constructors"
    Public Sub New()
        m_Dal = New DataAccess
        Reset()
    End Sub
    Public Sub New(ByVal dal As DataAccess)
        m_Dal = dal
        Reset()
    End Sub
#End Region

#Region "Public Properties"
    Public Property Version() As System.String
        Get
            Return mvarVersion
        End Get
        Set(ByVal Value As System.String)
            mvarVersion = Value
        End Set
    End Property

    Public Property BuildID() As System.Int32
        Get
            Return mvarBuildID
        End Get
        Set(ByVal Value As System.Int32)
            mvarBuildID = Value
        End Set
    End Property

    Public Property Descr() As System.String
        Get
            Return mvarDescr
        End Get
        Set(ByVal Value As System.String)
            mvarDescr = Value
        End Set
    End Property

    Public Property AppliedDate() As System.DateTime
        Get
            Return mvarAppliedDate
        End Get
        Set(ByVal Value As System.DateTime)
            mvarAppliedDate = Value
        End Set
    End Property

#End Region

#Region "Public Methods"
    Public Function Add() As Boolean
        Dim DAL As DataAccess = m_Dal
        Try
            Dim pc As New ParamCollection
            pc.Add(New ParamStruct("@Action", DbType.String, "AddNew", ParameterDirection.Input, 50))
            pc.Add(New ParamStruct("@Version", DbType.String, clsCommon.GetValueDBNull(Me.mvarVersion), ParameterDirection.Input, 20))
            pc.Add(New ParamStruct("@BuildID", DbType.Int32, clsCommon.GetValueDBNull(Me.mvarBuildID), ParameterDirection.Input, 4))
            pc.Add(New ParamStruct("@Descr", DbType.String, clsCommon.GetValueDBNull(Me.mvarDescr), ParameterDirection.Input, Nothing))
            pc.Add(New ParamStruct("@AppliedDate", DbType.DateTime, clsCommon.GetValueDBNull(Me.mvarAppliedDate), ParameterDirection.Input, 16))
            DAL.ExecPreparedSQL(PP_SYS_BuildLog, CommandType.StoredProcedure, pc, "")
            Me.mvarVersion = clsCommon.GetValue(pc.Item("@Version").Value, mvarVersion.GetType().FullName)
            Return (Me.mvarVersion <> String.Empty)
        Catch ex As Exception
            Throw ex
        End Try
    End Function
    Public Function Update() As Boolean
        Dim DAL As DataAccess = m_Dal
        Try
            Dim pc As New ParamCollection
            pc.Add(New ParamStruct("@Action", DbType.String, "Update", ParameterDirection.Input, 50))
            pc.Add(New ParamStruct("@Version", DbType.String, clsCommon.GetValueDBNull(Me.mvarVersion), ParameterDirection.Input, 20))
            pc.Add(New ParamStruct("@BuildID", DbType.Int32, clsCommon.GetValueDBNull(Me.mvarBuildID), ParameterDirection.Input, 4))
            pc.Add(New ParamStruct("@Descr", DbType.String, clsCommon.GetValueDBNull(Me.mvarDescr), ParameterDirection.Input, Nothing))
            pc.Add(New ParamStruct("@AppliedDate", DbType.DateTime, clsCommon.GetValueDBNull(Me.mvarAppliedDate), ParameterDirection.Input, 16))
            Return (DAL.ExecNonQuery(PP_SYS_BuildLog, CommandType.StoredProcedure, pc, "") > 0)
        Catch ex As Exception
            Throw ex
        End Try
    End Function
    Public Function Delete(ByVal Version As System.String) As Boolean
        Dim DAL As DataAccess = m_Dal
        Try
            Dim pc As New ParamCollection
            pc.Add(New ParamStruct("@Action", DbType.String, "Delete", ParameterDirection.Input, 50))
            pc.Add(New ParamStruct("@Version", DbType.String, clsCommon.GetValueDBNull(Version), ParameterDirection.Input, 20))
            Return (DAL.ExecNonQuery(PP_SYS_BuildLog, CommandType.StoredProcedure, pc, "") > 0)
        Catch ex As Exception
            Throw ex
        End Try
    End Function
    Public Function GetAll(ByVal Version As System.String) As DataTable
        Dim DAL As DataAccess = m_Dal
        Try
            Dim pc As New ParamCollection
            Dim ds As New DataSet
            pc.Add(New ParamStruct("@Action", DbType.String, "GetListData", ParameterDirection.Input, 50))
            pc.Add(New ParamStruct("@Version", DbType.String, clsCommon.GetValueDBNull(Version), ParameterDirection.Input, 20))
            ds = DAL.ExecDataSet(PP_SYS_BuildLog, CommandType.StoredProcedure, pc, "")
            Dim keys(0) As DataColumn
            Dim column As DataColumn
            column = ds.Tables(0).Columns("Version")
            keys(0) = column
            ds.Tables(0).PrimaryKey = keys
            Return ds.Tables(0)
        Catch ex As Exception
            Throw ex
        End Try
    End Function
    Public Sub Reset()
        mvarVersion = String.Empty
        mvarBuildID = 0
        mvarDescr = String.Empty
        mvarAppliedDate = Today
    End Sub
    Public Function GetByKey(ByVal Version As System.String) As Boolean
        Dim DAL As DataAccess = m_Dal
        Dim ds As New DataSet
        Try
            Dim pc As New ParamCollection
            pc.Add(New ParamStruct("@Action", DbType.String, "GetData_ByKey", ParameterDirection.Input, 50))
            pc.Add(New ParamStruct("@Version", DbType.String, clsCommon.GetValueDBNull(Version), ParameterDirection.InputOutput, 20))
            ds = DAL.ExecDataSet(PP_SYS_BuildLog, CommandType.StoredProcedure, pc, "")
            Me.Reset()
            If ds Is Nothing Then
                Return False
            End If
            If ds.Tables(0).Rows.Count > 0 Then
                FillData(ds.Tables(0).Rows(0))
                Return True
            End If
        Catch ex As Exception
            Throw ex
        End Try
        Return False
    End Function
    Public Sub FillData(row As DataRow)
        mvarVersion = clsCommon.GetValue(row("Version"), mvarVersion.GetType().FullName)
        mvarBuildID = clsCommon.GetValue(row("BuildID"), mvarBuildID.GetType().FullName)
        mvarDescr = clsCommon.GetValue(row("Descr"), mvarDescr.GetType().FullName)
        mvarAppliedDate = clsCommon.GetValue(row("AppliedDate"), mvarAppliedDate.GetType().FullName)
    End Sub
#End Region

#Region "Private Methods"
#End Region

End Class
