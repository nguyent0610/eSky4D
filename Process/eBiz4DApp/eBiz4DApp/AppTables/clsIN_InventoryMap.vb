'-- ------------------------------------------------------------
'-- Class name    :  clsIN_InventoryMap
'-- Created date  :  5/13/2015
'-- Created by    :  
'-- Updated by    :  
'-- Generated by    :  Class Maker v1.0
'-- ------------------------------------------------------------

'-- Import Libraries --
Imports HQFramework.Common
Imports HQFramework.DAL
Public Class clsIN_InventoryMap
#Region "Constants"
	Private Const PP_IN_InventoryMap As String = "PP_IN_InventoryMap"
#End Region 

#Region "Member Variables"
	Private mvarInvtID As System.String

	Private mvarInvtIDMap As System.Int32

	Private mvarDescrMap As System.String

	Private mvarPrice As System.Double

#End Region 

	Private m_Dal As DataAccess
#Region "Constructors"
	Public Sub New()
		m_Dal = New DataAccess
		Reset()
	End Sub
	Public Sub New(ByVal dal As DataAccess)
		m_Dal = dal
		Reset()
	End Sub
#End Region 

#Region "Public Properties"
	Public Property InvtID() As System.String
		Get
			Return mvarInvtID
		End Get
		Set(ByVal Value As System.String)
			mvarInvtID = Value
		End Set
	End Property

	Public Property InvtIDMap() As System.Int32
		Get
			Return mvarInvtIDMap
		End Get
		Set(ByVal Value As System.Int32)
			mvarInvtIDMap = Value
		End Set
	End Property

	Public Property DescrMap() As System.String
		Get
			Return mvarDescrMap
		End Get
		Set(ByVal Value As System.String)
			mvarDescrMap = Value
		End Set
	End Property

	Public Property Price() As System.Double
		Get
			Return mvarPrice
		End Get
		Set(ByVal Value As System.Double)
			mvarPrice = Value
		End Set
	End Property

#End Region 

#Region "Public Methods"
	Public Function Add() as Boolean 
		Dim DAL As DataAccess = m_Dal
		Try
			Dim pc As New ParamCollection
			pc.Add(New ParamStruct("@Action", DbType.String, "AddNew", ParameterDirection.Input,50 ))
			pc.Add(New ParamStruct("@InvtID", DbType.String,clsCommon.GetValueDBNull(Me.mvarInvtID), ParameterDirection.Input,30 ))
			pc.Add(New ParamStruct("@InvtIDMap", DbType.int32,clsCommon.GetValueDBNull(Me.mvarInvtIDMap), ParameterDirection.Input,4 ))
			pc.Add(New ParamStruct("@DescrMap", DbType.String,clsCommon.GetValueDBNull(Me.mvarDescrMap), ParameterDirection.Input,100 ))
			pc.Add(New ParamStruct("@Price", DbType.Decimal,clsCommon.GetValueDBNull(Me.mvarPrice), ParameterDirection.Input,8 ))
			DAL.ExecPreparedSQL(PP_IN_InventoryMap, CommandType.StoredProcedure, pc,"")
		Me.mvarInvtID = clsCommon.GetValue(pc.Item("@InvtID").Value, mvarInvtID.GetType().FullName)
		Return (Me.mvarInvtID <> String.Empty )
		Catch ex As Exception
			Throw ex 
		End Try
	End Function
	Public Function Update() as Boolean 
		Dim DAL As DataAccess = m_Dal
		Try
			Dim pc As New ParamCollection
			pc.Add(New ParamStruct("@Action", DbType.String, "Update", ParameterDirection.Input,50 ))
			 pc.Add(New ParamStruct("@InvtID",DbType.String, clsCommon.GetValueDBNull(me.mvarInvtID), ParameterDirection.Input,30 ))
			 pc.Add(New ParamStruct("@InvtIDMap",DbType.int32, clsCommon.GetValueDBNull(me.mvarInvtIDMap), ParameterDirection.Input,4 ))
			 pc.Add(New ParamStruct("@DescrMap",DbType.String, clsCommon.GetValueDBNull(me.mvarDescrMap), ParameterDirection.Input,100 ))
			 pc.Add(New ParamStruct("@Price",DbType.Decimal, clsCommon.GetValueDBNull(me.mvarPrice), ParameterDirection.Input,8 ))
			Return (DAL.ExecNonQuery(PP_IN_InventoryMap, CommandType.StoredProcedure, pc,"") > 0)
		Catch ex As Exception
			Throw ex 
		End Try
	End Function
	Public Function Delete(ByVal InvtID As System.String) as Boolean 
		Dim DAL As DataAccess = m_Dal
		Try
			Dim pc As New ParamCollection
			pc.Add(New ParamStruct("@Action", DbType.String, "Delete", ParameterDirection.Input,50 ))
			pc.Add(New ParamStruct("@InvtID",DbType.String, clsCommon.GetValueDBNull(InvtID), ParameterDirection.Input,30 ))
			Return (DAL.ExecNonQuery(PP_IN_InventoryMap, CommandType.StoredProcedure, pc,"") > 0)
		Catch ex As Exception
			Throw ex 
		End Try
	End Function
	Public Function GetAll(ByVal InvtID As System.String) as DataTable 
		Dim DAL As DataAccess = m_Dal
		Try
			Dim pc As New ParamCollection
			Dim ds As New DataSet
			pc.Add(New ParamStruct("@Action", DbType.String, "GetListData", ParameterDirection.Input,50 ))
			pc.Add(New ParamStruct("@InvtID", DbType.String, clsCommon.GetValueDBNull(InvtID), ParameterDirection.Input, 30 ))
			ds = DAL.ExecDataSet(PP_IN_InventoryMap, CommandType.StoredProcedure, pc,"")
			Dim keys(0) As DataColumn
			Dim column As DataColumn
			column = ds.Tables(0).Columns("InvtID")
			Keys(0) = column
			ds.Tables(0).PrimaryKey = Keys
			Return ds.Tables(0)
		Catch ex As Exception
			Throw ex 
		End Try
	End Function
	Public Sub Reset()
		mvarInvtID = String.Empty
		mvarInvtIDMap = 0
		mvarDescrMap = String.Empty
		mvarPrice = 0
	End Sub
	Public Function GetByKey(ByVal InvtID As System.String) as Boolean 
		Dim DAL As DataAccess = m_Dal
		Dim ds As New DataSet 
		Try
			Dim pc As New ParamCollection
			pc.Add(New ParamStruct("@Action", DbType.String, "GetData_ByKey", ParameterDirection.Input,50 ))
			pc.Add(New ParamStruct("@InvtID", DbType.String, clsCommon.GetValueDBNull(InvtID), ParameterDirection.InputOutput, 30 ))
			ds = DAL.ExecDataSet(PP_IN_InventoryMap, CommandType.StoredProcedure, pc,"")
			me.Reset()
			If ds Is Nothing Then
				Return False
			End If
			If ds.Tables(0).Rows.Count > 0 Then
				FillData(ds.Tables(0).Rows(0))
				Return True
			End If
		Catch ex As Exception
			Throw ex 
		End Try
		Return False
	End Function
	Public Sub FillData(row as DataRow)
		mvarInvtID =  clsCommon.GetValue(row("InvtID"), mvarInvtID.GetType().FullName)
		mvarInvtIDMap =  clsCommon.GetValue(row("InvtIDMap"), mvarInvtIDMap.GetType().FullName)
		mvarDescrMap =  clsCommon.GetValue(row("DescrMap"), mvarDescrMap.GetType().FullName)
		mvarPrice =  clsCommon.GetValue(row("Price"), mvarPrice.GetType().FullName)
	End Sub
#End Region 

#Region "Private Methods"
#End Region 

End Class
