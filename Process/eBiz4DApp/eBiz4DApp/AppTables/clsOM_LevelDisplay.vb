'-- ------------------------------------------------------------
'-- Class name    :  clsOM_LevelDisplay
'-- Created date  :  5/13/2015
'-- Created by    :  
'-- Updated by    :  
'-- Generated by    :  Class Maker v1.0
'-- ------------------------------------------------------------

'-- Import Libraries --
Imports HQFramework.Common
Imports HQFramework.DAL
Public Class clsOM_LevelDisplay
#Region "Constants"
	Private Const PP_OM_LevelDisplay As String = "PP_OM_LevelDisplay"
#End Region 

#Region "Member Variables"
	Private mvarLevelID As System.String

	Private mvarSales As System.Double

	Private mvarReward As System.Double

	Private mvarType As System.String

	Private mvarDescr As System.String

	Private mvarProgramType As System.String

#End Region 

	Private m_Dal As DataAccess
#Region "Constructors"
	Public Sub New()
		m_Dal = New DataAccess
		Reset()
	End Sub
	Public Sub New(ByVal dal As DataAccess)
		m_Dal = dal
		Reset()
	End Sub
#End Region 

#Region "Public Properties"
	Public Property LevelID() As System.String
		Get
			Return mvarLevelID
		End Get
		Set(ByVal Value As System.String)
			mvarLevelID = Value
		End Set
	End Property

	Public Property Sales() As System.Double
		Get
			Return mvarSales
		End Get
		Set(ByVal Value As System.Double)
			mvarSales = Value
		End Set
	End Property

	Public Property Reward() As System.Double
		Get
			Return mvarReward
		End Get
		Set(ByVal Value As System.Double)
			mvarReward = Value
		End Set
	End Property

	Public Property Type() As System.String
		Get
			Return mvarType
		End Get
		Set(ByVal Value As System.String)
			mvarType = Value
		End Set
	End Property

	Public Property Descr() As System.String
		Get
			Return mvarDescr
		End Get
		Set(ByVal Value As System.String)
			mvarDescr = Value
		End Set
	End Property

	Public Property ProgramType() As System.String
		Get
			Return mvarProgramType
		End Get
		Set(ByVal Value As System.String)
			mvarProgramType = Value
		End Set
	End Property

#End Region 

#Region "Public Methods"
	Public Function Add() as Boolean 
		Dim DAL As DataAccess = m_Dal
		Try
			Dim pc As New ParamCollection
			pc.Add(New ParamStruct("@Action", DbType.String, "AddNew", ParameterDirection.Input,50 ))
			pc.Add(New ParamStruct("@LevelID", DbType.String,clsCommon.GetValueDBNull(Me.mvarLevelID), ParameterDirection.Input,50 ))
			pc.Add(New ParamStruct("@Sales", DbType.Decimal,clsCommon.GetValueDBNull(Me.mvarSales), ParameterDirection.Input,8 ))
			pc.Add(New ParamStruct("@Reward", DbType.Decimal,clsCommon.GetValueDBNull(Me.mvarReward), ParameterDirection.Input,8 ))
			pc.Add(New ParamStruct("@Type", DbType.String,clsCommon.GetValueDBNull(Me.mvarType), ParameterDirection.Input,2 ))
			pc.Add(New ParamStruct("@Descr", DbType.String,clsCommon.GetValueDBNull(Me.mvarDescr), ParameterDirection.Input,200 ))
			pc.Add(New ParamStruct("@ProgramType", DbType.String,clsCommon.GetValueDBNull(Me.mvarProgramType), ParameterDirection.Input,5 ))
			DAL.ExecPreparedSQL(PP_OM_LevelDisplay, CommandType.StoredProcedure, pc,"")
		Me.mvarLevelID = clsCommon.GetValue(pc.Item("@LevelID").Value, mvarLevelID.GetType().FullName)
		Return (Me.mvarLevelID <> String.Empty )
		Catch ex As Exception
			Throw ex 
		End Try
	End Function
	Public Function Update() as Boolean 
		Dim DAL As DataAccess = m_Dal
		Try
			Dim pc As New ParamCollection
			pc.Add(New ParamStruct("@Action", DbType.String, "Update", ParameterDirection.Input,50 ))
			 pc.Add(New ParamStruct("@LevelID",DbType.String, clsCommon.GetValueDBNull(me.mvarLevelID), ParameterDirection.Input,50 ))
			 pc.Add(New ParamStruct("@Sales",DbType.Decimal, clsCommon.GetValueDBNull(me.mvarSales), ParameterDirection.Input,8 ))
			 pc.Add(New ParamStruct("@Reward",DbType.Decimal, clsCommon.GetValueDBNull(me.mvarReward), ParameterDirection.Input,8 ))
			 pc.Add(New ParamStruct("@Type",DbType.String, clsCommon.GetValueDBNull(me.mvarType), ParameterDirection.Input,2 ))
			 pc.Add(New ParamStruct("@Descr",DbType.String, clsCommon.GetValueDBNull(me.mvarDescr), ParameterDirection.Input,200 ))
			 pc.Add(New ParamStruct("@ProgramType",DbType.String, clsCommon.GetValueDBNull(me.mvarProgramType), ParameterDirection.Input,5 ))
			Return (DAL.ExecNonQuery(PP_OM_LevelDisplay, CommandType.StoredProcedure, pc,"") > 0)
		Catch ex As Exception
			Throw ex 
		End Try
	End Function
	Public Function Delete(ByVal LevelID As System.String) as Boolean 
		Dim DAL As DataAccess = m_Dal
		Try
			Dim pc As New ParamCollection
			pc.Add(New ParamStruct("@Action", DbType.String, "Delete", ParameterDirection.Input,50 ))
			pc.Add(New ParamStruct("@LevelID",DbType.String, clsCommon.GetValueDBNull(LevelID), ParameterDirection.Input,50 ))
			Return (DAL.ExecNonQuery(PP_OM_LevelDisplay, CommandType.StoredProcedure, pc,"") > 0)
		Catch ex As Exception
			Throw ex 
		End Try
	End Function
	Public Function GetAll(ByVal LevelID As System.String) as DataTable 
		Dim DAL As DataAccess = m_Dal
		Try
			Dim pc As New ParamCollection
			Dim ds As New DataSet
			pc.Add(New ParamStruct("@Action", DbType.String, "GetListData", ParameterDirection.Input,50 ))
			pc.Add(New ParamStruct("@LevelID", DbType.String, clsCommon.GetValueDBNull(LevelID), ParameterDirection.Input, 50 ))
			ds = DAL.ExecDataSet(PP_OM_LevelDisplay, CommandType.StoredProcedure, pc,"")
			Dim keys(0) As DataColumn
			Dim column As DataColumn
			column = ds.Tables(0).Columns("LevelID")
			Keys(0) = column
			ds.Tables(0).PrimaryKey = Keys
			Return ds.Tables(0)
		Catch ex As Exception
			Throw ex 
		End Try
	End Function
	Public Sub Reset()
		mvarLevelID = String.Empty
		mvarSales = 0
		mvarReward = 0
		mvarType = String.Empty
		mvarDescr = String.Empty
		mvarProgramType = String.Empty
	End Sub
	Public Function GetByKey(ByVal LevelID As System.String) as Boolean 
		Dim DAL As DataAccess = m_Dal
		Dim ds As New DataSet 
		Try
			Dim pc As New ParamCollection
			pc.Add(New ParamStruct("@Action", DbType.String, "GetData_ByKey", ParameterDirection.Input,50 ))
			pc.Add(New ParamStruct("@LevelID", DbType.String, clsCommon.GetValueDBNull(LevelID), ParameterDirection.InputOutput, 50 ))
			ds = DAL.ExecDataSet(PP_OM_LevelDisplay, CommandType.StoredProcedure, pc,"")
			me.Reset()
			If ds Is Nothing Then
				Return False
			End If
			If ds.Tables(0).Rows.Count > 0 Then
				FillData(ds.Tables(0).Rows(0))
				Return True
			End If
		Catch ex As Exception
			Throw ex 
		End Try
		Return False
	End Function
	Public Sub FillData(row as DataRow)
		mvarLevelID =  clsCommon.GetValue(row("LevelID"), mvarLevelID.GetType().FullName)
		mvarSales =  clsCommon.GetValue(row("Sales"), mvarSales.GetType().FullName)
		mvarReward =  clsCommon.GetValue(row("Reward"), mvarReward.GetType().FullName)
		mvarType =  clsCommon.GetValue(row("Type"), mvarType.GetType().FullName)
		mvarDescr =  clsCommon.GetValue(row("Descr"), mvarDescr.GetType().FullName)
		mvarProgramType =  clsCommon.GetValue(row("ProgramType"), mvarProgramType.GetType().FullName)
	End Sub
#End Region 

#Region "Private Methods"
#End Region 

End Class
