'-- ------------------------------------------------------------
'-- Class name    :  clsPPC_License
'-- Created date  :  10/2/2012
'-- Created by    :  
'-- Updated by    :  
'-- Generated by    :  Class Maker v1.0
'-- ------------------------------------------------------------

'-- Import Libraries --
Imports HQFramework.Common
Imports HQFramework.DAL
Public Class clsPPC_License
#Region "Constants"
	Private Const PP_PPC_License As String = "PP_PPC_License"
#End Region 

#Region "Member Variables"
	Private mvarPDAID As System.String

	Private mvarBranchID As System.String

	Private mvarSlsperId As System.String

	Private mvarPassword As System.String

	Private mvarLicenseKey As System.String

	Private mvarActivitionDay As System.Int32

	Private mvarCheckAct As System.Boolean

	Private mvarLastSyncDate As System.DateTime

	Private mvarWorkingDate As System.DateTime

	Private mvarSIMID As System.String

	Private mvarStatus As System.Boolean

#End Region 

	Private m_Dal As DataAccess
#Region "Constructors"
	Public Sub New()
		m_Dal = New DataAccess
		Reset()
	End Sub
	Public Sub New(ByVal dal As DataAccess)
		m_Dal = dal
		Reset()
	End Sub
#End Region 

#Region "Public Properties"
	Public Property PDAID() As System.String
		Get
			Return mvarPDAID
		End Get
		Set(ByVal Value As System.String)
			mvarPDAID = Value
		End Set
	End Property

	Public Property BranchID() As System.String
		Get
			Return mvarBranchID
		End Get
		Set(ByVal Value As System.String)
			mvarBranchID = Value
		End Set
	End Property

	Public Property SlsperId() As System.String
		Get
			Return mvarSlsperId
		End Get
		Set(ByVal Value As System.String)
			mvarSlsperId = Value
		End Set
	End Property

	Public Property Password() As System.String
		Get
			Return mvarPassword
		End Get
		Set(ByVal Value As System.String)
			mvarPassword = Value
		End Set
	End Property

	Public Property LicenseKey() As System.String
		Get
			Return mvarLicenseKey
		End Get
		Set(ByVal Value As System.String)
			mvarLicenseKey = Value
		End Set
	End Property

	Public Property ActivitionDay() As System.Int32
		Get
			Return mvarActivitionDay
		End Get
		Set(ByVal Value As System.Int32)
			mvarActivitionDay = Value
		End Set
	End Property

	Public Property CheckAct() As System.Boolean
		Get
			Return mvarCheckAct
		End Get
		Set(ByVal Value As System.Boolean)
			mvarCheckAct = Value
		End Set
	End Property

	Public Property LastSyncDate() As System.DateTime
		Get
			Return mvarLastSyncDate
		End Get
		Set(ByVal Value As System.DateTime)
			mvarLastSyncDate = Value
		End Set
	End Property

	Public Property WorkingDate() As System.DateTime
		Get
			Return mvarWorkingDate
		End Get
		Set(ByVal Value As System.DateTime)
			mvarWorkingDate = Value
		End Set
	End Property

	Public Property SIMID() As System.String
		Get
			Return mvarSIMID
		End Get
		Set(ByVal Value As System.String)
			mvarSIMID = Value
		End Set
	End Property

	Public Property Status() As System.Boolean
		Get
			Return mvarStatus
		End Get
		Set(ByVal Value As System.Boolean)
			mvarStatus = Value
		End Set
	End Property

#End Region 

#Region "Public Methods"
	Public Function Add() as Boolean 
		Dim DAL As DataAccess = m_Dal
		Try
			Dim pc As New ParamCollection
			pc.Add(New ParamStruct("@Action", DbType.String, "AddNew", ParameterDirection.Input,50 ))
			pc.Add(New ParamStruct("@PDAID", DbType.String,clsCommon.GetValueDBNull(Me.mvarPDAID), ParameterDirection.Input,100 ))
			pc.Add(New ParamStruct("@BranchID",DbType.String, clsCommon.GetValueDBNull(BranchID), ParameterDirection.Input,30 ))
			pc.Add(New ParamStruct("@SlsperId", DbType.String,clsCommon.GetValueDBNull(Me.mvarSlsperId), ParameterDirection.Input,10 ))
			pc.Add(New ParamStruct("@Password", DbType.String,clsCommon.GetValueDBNull(Me.mvarPassword), ParameterDirection.Input,100 ))
			pc.Add(New ParamStruct("@LicenseKey", DbType.String,clsCommon.GetValueDBNull(Me.mvarLicenseKey), ParameterDirection.Input,100 ))
			pc.Add(New ParamStruct("@ActivitionDay", DbType.int32,clsCommon.GetValueDBNull(Me.mvarActivitionDay), ParameterDirection.Input,4 ))
			pc.Add(New ParamStruct("@CheckAct", DbType.Boolean,clsCommon.GetValueDBNull(Me.mvarCheckAct), ParameterDirection.Input,2 ))
			pc.Add(New ParamStruct("@LastSyncDate", DbType.DateTime,clsCommon.GetValueDBNull(Me.mvarLastSyncDate), ParameterDirection.Input,16 ))
			pc.Add(New ParamStruct("@WorkingDate", DbType.DateTime,clsCommon.GetValueDBNull(Me.mvarWorkingDate), ParameterDirection.Input,16 ))
			pc.Add(New ParamStruct("@SIMID", DbType.String,clsCommon.GetValueDBNull(Me.mvarSIMID), ParameterDirection.Input,100 ))
			pc.Add(New ParamStruct("@Status", DbType.Boolean,clsCommon.GetValueDBNull(Me.mvarStatus), ParameterDirection.Input,2 ))
			DAL.ExecPreparedSQL(PP_PPC_License, CommandType.StoredProcedure, pc,"")
		Me.mvarPDAID = clsCommon.GetValue(pc.Item("@PDAID").Value, mvarPDAID.GetType().FullName)
		Return (Me.mvarPDAID <> String.Empty )
		Catch ex As Exception
			Throw ex 
		End Try
	End Function
	Public Function Update() as Boolean 
		Dim DAL As DataAccess = m_Dal
		Try
			Dim pc As New ParamCollection
			pc.Add(New ParamStruct("@Action", DbType.String, "Update", ParameterDirection.Input,50 ))
			 pc.Add(New ParamStruct("@PDAID",DbType.String, clsCommon.GetValueDBNull(me.mvarPDAID), ParameterDirection.Input,100 ))
			 pc.Add(New ParamStruct("@BranchID",DbType.String, clsCommon.GetValueDBNull(me.mvarBranchID), ParameterDirection.Input,30 ))
			 pc.Add(New ParamStruct("@SlsperId",DbType.String, clsCommon.GetValueDBNull(me.mvarSlsperId), ParameterDirection.Input,10 ))
			 pc.Add(New ParamStruct("@Password",DbType.String, clsCommon.GetValueDBNull(me.mvarPassword), ParameterDirection.Input,100 ))
			 pc.Add(New ParamStruct("@LicenseKey",DbType.String, clsCommon.GetValueDBNull(me.mvarLicenseKey), ParameterDirection.Input,100 ))
			 pc.Add(New ParamStruct("@ActivitionDay",DbType.int32, clsCommon.GetValueDBNull(me.mvarActivitionDay), ParameterDirection.Input,4 ))
			 pc.Add(New ParamStruct("@CheckAct",DbType.Boolean, clsCommon.GetValueDBNull(me.mvarCheckAct), ParameterDirection.Input,2 ))
			 pc.Add(New ParamStruct("@LastSyncDate",DbType.DateTime, clsCommon.GetValueDBNull(me.mvarLastSyncDate), ParameterDirection.Input,16 ))
			 pc.Add(New ParamStruct("@WorkingDate",DbType.DateTime, clsCommon.GetValueDBNull(me.mvarWorkingDate), ParameterDirection.Input,16 ))
			 pc.Add(New ParamStruct("@SIMID",DbType.String, clsCommon.GetValueDBNull(me.mvarSIMID), ParameterDirection.Input,100 ))
			 pc.Add(New ParamStruct("@Status",DbType.Boolean, clsCommon.GetValueDBNull(me.mvarStatus), ParameterDirection.Input,2 ))
			Return (DAL.ExecNonQuery(PP_PPC_License, CommandType.StoredProcedure, pc,"") > 0)
		Catch ex As Exception
			Throw ex 
		End Try
	End Function
	Public Function Delete(ByVal PDAID As System.String) as Boolean 
		Dim DAL As DataAccess = m_Dal
		Try
			Dim pc As New ParamCollection
			pc.Add(New ParamStruct("@Action", DbType.String, "Delete", ParameterDirection.Input,50 ))
			pc.Add(New ParamStruct("@PDAID",DbType.String, clsCommon.GetValueDBNull(PDAID), ParameterDirection.Input,100 ))
			Return (DAL.ExecNonQuery(PP_PPC_License, CommandType.StoredProcedure, pc,"") > 0)
		Catch ex As Exception
			Throw ex 
		End Try
	End Function
	Public Function GetAll(ByVal PDAID As System.String) as DataTable 
		Dim DAL As DataAccess = m_Dal
		Try
			Dim pc As New ParamCollection
			Dim ds As New DataSet
			pc.Add(New ParamStruct("@Action", DbType.String, "GetListData", ParameterDirection.Input,50 ))
			pc.Add(New ParamStruct("@PDAID", DbType.String, clsCommon.GetValueDBNull(PDAID), ParameterDirection.Input, 100 ))
			ds = DAL.ExecDataSet(PP_PPC_License, CommandType.StoredProcedure, pc,"")
			Dim keys(0) As DataColumn
			Dim column As DataColumn
			column = ds.Tables(0).Columns("PDAID")
			Keys(0) = column
			ds.Tables(0).PrimaryKey = Keys
			Return ds.Tables(0)
		Catch ex As Exception
			Throw ex 
		End Try
	End Function
	Public Sub Reset()
		mvarPDAID = String.Empty
		mvarBranchID = String.Empty
		mvarSlsperId = String.Empty
		mvarPassword = String.Empty
		mvarLicenseKey = String.Empty
		mvarActivitionDay = 0
		mvarCheckAct = False
		mvarLastSyncDate = Today
		mvarWorkingDate = Today
		mvarSIMID = String.Empty
		mvarStatus = False
	End Sub
	Public Function GetByKey(ByVal PDAID As System.String) as Boolean 
		Dim DAL As DataAccess = m_Dal
		Dim ds As New DataSet 
		Try
			Dim pc As New ParamCollection
			pc.Add(New ParamStruct("@Action", DbType.String, "GetData_ByKey", ParameterDirection.Input,50 ))
			pc.Add(New ParamStruct("@PDAID", DbType.String, clsCommon.GetValueDBNull(PDAID), ParameterDirection.InputOutput, 100 ))
			ds = DAL.ExecDataSet(PP_PPC_License, CommandType.StoredProcedure, pc,"")
			me.Reset()
			If ds Is Nothing Then
				Return False
			End If
			If ds.Tables(0).Rows.Count > 0 Then
				FillData(ds.Tables(0).Rows(0))
				Return True
			End If
		Catch ex As Exception
			Throw ex 
		End Try
		Return False
	End Function
	Public Sub FillData(row as DataRow)
		mvarPDAID =  clsCommon.GetValue(row("PDAID"), mvarPDAID.GetType().FullName)
		mvarBranchID =  clsCommon.GetValue(row("BranchID"), mvarBranchID.GetType().FullName)
		mvarSlsperId =  clsCommon.GetValue(row("SlsperId"), mvarSlsperId.GetType().FullName)
		mvarPassword =  clsCommon.GetValue(row("Password"), mvarPassword.GetType().FullName)
		mvarLicenseKey =  clsCommon.GetValue(row("LicenseKey"), mvarLicenseKey.GetType().FullName)
		mvarActivitionDay =  clsCommon.GetValue(row("ActivitionDay"), mvarActivitionDay.GetType().FullName)
		mvarCheckAct =  clsCommon.GetValue(row("CheckAct"), mvarCheckAct.GetType().FullName)
		mvarLastSyncDate =  clsCommon.GetValue(row("LastSyncDate"), mvarLastSyncDate.GetType().FullName)
		mvarWorkingDate =  clsCommon.GetValue(row("WorkingDate"), mvarWorkingDate.GetType().FullName)
		mvarSIMID =  clsCommon.GetValue(row("SIMID"), mvarSIMID.GetType().FullName)
		mvarStatus =  clsCommon.GetValue(row("Status"), mvarStatus.GetType().FullName)
	End Sub
#End Region 

#Region "Private Methods"
#End Region 

End Class
