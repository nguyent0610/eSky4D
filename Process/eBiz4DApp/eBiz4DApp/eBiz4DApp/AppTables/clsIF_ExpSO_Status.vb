'-- ------------------------------------------------------------
'-- Class name    :  clsIF_ExpSO_Status
'-- Created date  :  10/2/2012
'-- Created by    :  
'-- Updated by    :  
'-- Generated by    :  Class Maker v1.0
'-- ------------------------------------------------------------

'-- Import Libraries --
Imports HQFramework.Common
Imports HQFramework.DAL
Public Class clsIF_ExpSO_Status
#Region "Constants"
	Private Const PP_IF_ExpSO_Status As String = "PP_IF_ExpSO_Status"
#End Region 

#Region "Member Variables"
	Private mvarOrderNbr As System.String

	Private mvarBranchID As System.String

	Private mvarSalesType As System.String

	Private mvarImpExp As System.String

#End Region 

	Private m_Dal As DataAccess
#Region "Constructors"
	Public Sub New()
		m_Dal = New DataAccess
		Reset()
	End Sub
	Public Sub New(ByVal dal As DataAccess)
		m_Dal = dal
		Reset()
	End Sub
#End Region 

#Region "Public Properties"
	Public Property OrderNbr() As System.String
		Get
			Return mvarOrderNbr
		End Get
		Set(ByVal Value As System.String)
			mvarOrderNbr = Value
		End Set
	End Property

	Public Property BranchID() As System.String
		Get
			Return mvarBranchID
		End Get
		Set(ByVal Value As System.String)
			mvarBranchID = Value
		End Set
	End Property

	Public Property SalesType() As System.String
		Get
			Return mvarSalesType
		End Get
		Set(ByVal Value As System.String)
			mvarSalesType = Value
		End Set
	End Property

	Public Property ImpExp() As System.String
		Get
			Return mvarImpExp
		End Get
		Set(ByVal Value As System.String)
			mvarImpExp = Value
		End Set
	End Property

#End Region 

#Region "Public Methods"
	Public Function Add() as Boolean 
		Dim DAL As DataAccess = m_Dal
		Try
			Dim pc As New ParamCollection
			pc.Add(New ParamStruct("@Action", DbType.String, "AddNew", ParameterDirection.Input,50 ))
			pc.Add(New ParamStruct("@OrderNbr", DbType.String,clsCommon.GetValueDBNull(Me.mvarOrderNbr), ParameterDirection.Input,15 ))
			pc.Add(New ParamStruct("@BranchID",DbType.String, clsCommon.GetValueDBNull(BranchID), ParameterDirection.Input,30 ))
			pc.Add(New ParamStruct("@SalesType", DbType.String,clsCommon.GetValueDBNull(Me.mvarSalesType), ParameterDirection.Input,2 ))
			pc.Add(New ParamStruct("@ImpExp", DbType.String,clsCommon.GetValueDBNull(Me.mvarImpExp), ParameterDirection.Input,1 ))
			DAL.ExecPreparedSQL(PP_IF_ExpSO_Status, CommandType.StoredProcedure, pc,"")
		Me.mvarOrderNbr = clsCommon.GetValue(pc.Item("@OrderNbr").Value, mvarOrderNbr.GetType().FullName)
		Return (Me.mvarOrderNbr <> String.Empty )
		Catch ex As Exception
			Throw ex 
		End Try
	End Function
	Public Function Update() as Boolean 
		Dim DAL As DataAccess = m_Dal
		Try
			Dim pc As New ParamCollection
			pc.Add(New ParamStruct("@Action", DbType.String, "Update", ParameterDirection.Input,50 ))
			 pc.Add(New ParamStruct("@OrderNbr",DbType.String, clsCommon.GetValueDBNull(me.mvarOrderNbr), ParameterDirection.Input,15 ))
			 pc.Add(New ParamStruct("@BranchID",DbType.String, clsCommon.GetValueDBNull(me.mvarBranchID), ParameterDirection.Input,30 ))
			 pc.Add(New ParamStruct("@SalesType",DbType.String, clsCommon.GetValueDBNull(me.mvarSalesType), ParameterDirection.Input,2 ))
			 pc.Add(New ParamStruct("@ImpExp",DbType.String, clsCommon.GetValueDBNull(me.mvarImpExp), ParameterDirection.Input,1 ))
			Return (DAL.ExecNonQuery(PP_IF_ExpSO_Status, CommandType.StoredProcedure, pc,"") > 0)
		Catch ex As Exception
			Throw ex 
		End Try
	End Function
	Public Function Delete(ByVal OrderNbr As System.String, ByVal BranchID As System.String, ByVal SalesType As System.String) as Boolean 
		Dim DAL As DataAccess = m_Dal
		Try
			Dim pc As New ParamCollection
			pc.Add(New ParamStruct("@Action", DbType.String, "Delete", ParameterDirection.Input,50 ))
			pc.Add(New ParamStruct("@OrderNbr",DbType.String, clsCommon.GetValueDBNull(OrderNbr), ParameterDirection.Input,15 ))
			pc.Add(New ParamStruct("@BranchID",DbType.String, clsCommon.GetValueDBNull(BranchID), ParameterDirection.Input,30 ))
			pc.Add(New ParamStruct("@SalesType",DbType.String, clsCommon.GetValueDBNull(SalesType), ParameterDirection.Input,2 ))
			Return (DAL.ExecNonQuery(PP_IF_ExpSO_Status, CommandType.StoredProcedure, pc,"") > 0)
		Catch ex As Exception
			Throw ex 
		End Try
	End Function
	Public Function GetAll(ByVal OrderNbr As System.String, ByVal BranchID As System.String, ByVal SalesType As System.String) as DataTable 
		Dim DAL As DataAccess = m_Dal
		Try
			Dim pc As New ParamCollection
			Dim ds As New DataSet
			pc.Add(New ParamStruct("@Action", DbType.String, "GetListData", ParameterDirection.Input,50 ))
			pc.Add(New ParamStruct("@OrderNbr", DbType.String, clsCommon.GetValueDBNull(OrderNbr), ParameterDirection.Input, 15 ))
			pc.Add(New ParamStruct("@BranchID",DbType.String, clsCommon.GetValueDBNull(BranchID), ParameterDirection.Input,30 ))
			pc.Add(New ParamStruct("@SalesType", DbType.String, clsCommon.GetValueDBNull(SalesType), ParameterDirection.Input, 2 ))
			ds = DAL.ExecDataSet(PP_IF_ExpSO_Status, CommandType.StoredProcedure, pc,"")
			Dim keys(2) As DataColumn
			Dim column As DataColumn
			column = ds.Tables(0).Columns("OrderNbr")
			Keys(0) = column
			column = ds.Tables(0).Columns("BranchID")
			Keys(1) = column
			column = ds.Tables(0).Columns("SalesType")
			Keys(2) = column
			ds.Tables(0).PrimaryKey = Keys
			Return ds.Tables(0)
		Catch ex As Exception
			Throw ex 
		End Try
	End Function
	Public Sub Reset()
		mvarOrderNbr = String.Empty
		mvarBranchID = String.Empty
		mvarSalesType = String.Empty
		mvarImpExp = String.Empty
	End Sub
	Public Function GetByKey(ByVal OrderNbr As System.String, ByVal BranchID As System.String, ByVal SalesType As System.String) as Boolean 
		Dim DAL As DataAccess = m_Dal
		Dim ds As New DataSet 
		Try
			Dim pc As New ParamCollection
			pc.Add(New ParamStruct("@Action", DbType.String, "GetData_ByKey", ParameterDirection.Input,50 ))
			pc.Add(New ParamStruct("@OrderNbr", DbType.String, clsCommon.GetValueDBNull(OrderNbr), ParameterDirection.InputOutput, 15 ))
			pc.Add(New ParamStruct("@BranchID", DbType.String, clsCommon.GetValueDBNull(BranchID), ParameterDirection.InputOutput, 30 ))
			pc.Add(New ParamStruct("@SalesType", DbType.String, clsCommon.GetValueDBNull(SalesType), ParameterDirection.InputOutput, 2 ))
			ds = DAL.ExecDataSet(PP_IF_ExpSO_Status, CommandType.StoredProcedure, pc,"")
			me.Reset()
			If ds Is Nothing Then
				Return False
			End If
			If ds.Tables(0).Rows.Count > 0 Then
				FillData(ds.Tables(0).Rows(0))
				Return True
			End If
		Catch ex As Exception
			Throw ex 
		End Try
		Return False
	End Function
	Public Sub FillData(row as DataRow)
		mvarOrderNbr =  clsCommon.GetValue(row("OrderNbr"), mvarOrderNbr.GetType().FullName)
		mvarBranchID =  clsCommon.GetValue(row("BranchID"), mvarBranchID.GetType().FullName)
		mvarSalesType =  clsCommon.GetValue(row("SalesType"), mvarSalesType.GetType().FullName)
		mvarImpExp =  clsCommon.GetValue(row("ImpExp"), mvarImpExp.GetType().FullName)
	End Sub
#End Region 

#Region "Private Methods"
#End Region 

End Class
