'-- ------------------------------------------------------------
'-- Class name    :  clsPPC_OM_DiscBreak
'-- Created date  :  10/2/2012
'-- Created by    :  
'-- Updated by    :  
'-- Generated by    :  Class Maker v1.0
'-- ------------------------------------------------------------

'-- Import Libraries --
Imports HQFramework.Common
Imports HQFramework.DAL
Public Class clsPPC_OM_DiscBreak
#Region "Constants"
	Private Const PP_PPC_OM_DiscBreak As String = "PP_PPC_OM_DiscBreak"
#End Region 

#Region "Member Variables"
	Private mvarSlsperID As System.String

	Private mvarDiscID As System.String

	Private mvarDiscSeq As System.String

	Private mvarLineRef As System.String

	Private mvarIsWrk As System.String

	Private mvartstamp As System.String

#End Region 

	Private m_Dal As DataAccess
#Region "Constructors"
	Public Sub New()
		m_Dal = New DataAccess
		Reset()
	End Sub
	Public Sub New(ByVal dal As DataAccess)
		m_Dal = dal
		Reset()
	End Sub
#End Region 

#Region "Public Properties"
	Public Property SlsperID() As System.String
		Get
			Return mvarSlsperID
		End Get
		Set(ByVal Value As System.String)
			mvarSlsperID = Value
		End Set
	End Property

	Public Property DiscID() As System.String
		Get
			Return mvarDiscID
		End Get
		Set(ByVal Value As System.String)
			mvarDiscID = Value
		End Set
	End Property

	Public Property DiscSeq() As System.String
		Get
			Return mvarDiscSeq
		End Get
		Set(ByVal Value As System.String)
			mvarDiscSeq = Value
		End Set
	End Property

	Public Property LineRef() As System.String
		Get
			Return mvarLineRef
		End Get
		Set(ByVal Value As System.String)
			mvarLineRef = Value
		End Set
	End Property

	Public Property IsWrk() As System.String
		Get
			Return mvarIsWrk
		End Get
		Set(ByVal Value As System.String)
			mvarIsWrk = Value
		End Set
	End Property

	Public Property tstamp() As System.String
		Get
			Return mvartstamp
		End Get
		Set(ByVal Value As System.String)
			mvartstamp = Value
		End Set
	End Property

#End Region 

#Region "Public Methods"
	Public Function Add() as Boolean 
		Dim DAL As DataAccess = m_Dal
		Try
			Dim pc As New ParamCollection
			pc.Add(New ParamStruct("@Action", DbType.String, "AddNew", ParameterDirection.Input,50 ))
			pc.Add(New ParamStruct("@SlsperID", DbType.String,clsCommon.GetValueDBNull(Me.mvarSlsperID), ParameterDirection.Input,10 ))
			pc.Add(New ParamStruct("@DiscID", DbType.String,clsCommon.GetValueDBNull(Me.mvarDiscID), ParameterDirection.Input,10 ))
			pc.Add(New ParamStruct("@DiscSeq", DbType.String,clsCommon.GetValueDBNull(Me.mvarDiscSeq), ParameterDirection.Input,10 ))
			pc.Add(New ParamStruct("@LineRef", DbType.String,clsCommon.GetValueDBNull(Me.mvarLineRef), ParameterDirection.Input,5 ))
			pc.Add(New ParamStruct("@IsWrk", DbType.String,clsCommon.GetValueDBNull(Me.mvarIsWrk), ParameterDirection.Input,1 ))
			pc.Add(New ParamStruct("@tstamp", DbType.String,clsCommon.GetValueDBNull(Me.mvartstamp), ParameterDirection.Input,18 ))
			DAL.ExecPreparedSQL(PP_PPC_OM_DiscBreak, CommandType.StoredProcedure, pc,"")
		Me.mvarSlsperID = clsCommon.GetValue(pc.Item("@SlsperID").Value, mvarSlsperID.GetType().FullName)
		Return (Me.mvarSlsperID <> String.Empty )
		Catch ex As Exception
			Throw ex 
		End Try
	End Function
	Public Function Update() as Boolean 
		Dim DAL As DataAccess = m_Dal
		Try
			Dim pc As New ParamCollection
			pc.Add(New ParamStruct("@Action", DbType.String, "Update", ParameterDirection.Input,50 ))
			 pc.Add(New ParamStruct("@SlsperID",DbType.String, clsCommon.GetValueDBNull(me.mvarSlsperID), ParameterDirection.Input,10 ))
			 pc.Add(New ParamStruct("@DiscID",DbType.String, clsCommon.GetValueDBNull(me.mvarDiscID), ParameterDirection.Input,10 ))
			 pc.Add(New ParamStruct("@DiscSeq",DbType.String, clsCommon.GetValueDBNull(me.mvarDiscSeq), ParameterDirection.Input,10 ))
			 pc.Add(New ParamStruct("@LineRef",DbType.String, clsCommon.GetValueDBNull(me.mvarLineRef), ParameterDirection.Input,5 ))
			 pc.Add(New ParamStruct("@IsWrk",DbType.String, clsCommon.GetValueDBNull(me.mvarIsWrk), ParameterDirection.Input,1 ))
			 pc.Add(New ParamStruct("@tstamp",DbType.String, clsCommon.GetValueDBNull(me.mvartstamp), ParameterDirection.Input,18 ))
			Return (DAL.ExecNonQuery(PP_PPC_OM_DiscBreak, CommandType.StoredProcedure, pc,"") > 0)
		Catch ex As Exception
			Throw ex 
		End Try
	End Function
	Public Function Delete(ByVal SlsperID As System.String, ByVal DiscID As System.String, ByVal DiscSeq As System.String, ByVal LineRef As System.String, ByVal IsWrk As System.String) as Boolean 
		Dim DAL As DataAccess = m_Dal
		Try
			Dim pc As New ParamCollection
			pc.Add(New ParamStruct("@Action", DbType.String, "Delete", ParameterDirection.Input,50 ))
			pc.Add(New ParamStruct("@SlsperID",DbType.String, clsCommon.GetValueDBNull(SlsperID), ParameterDirection.Input,10 ))
			pc.Add(New ParamStruct("@DiscID",DbType.String, clsCommon.GetValueDBNull(DiscID), ParameterDirection.Input,10 ))
			pc.Add(New ParamStruct("@DiscSeq",DbType.String, clsCommon.GetValueDBNull(DiscSeq), ParameterDirection.Input,10 ))
			pc.Add(New ParamStruct("@LineRef",DbType.String, clsCommon.GetValueDBNull(LineRef), ParameterDirection.Input,5 ))
			pc.Add(New ParamStruct("@IsWrk",DbType.String, clsCommon.GetValueDBNull(IsWrk), ParameterDirection.Input,1 ))
			Return (DAL.ExecNonQuery(PP_PPC_OM_DiscBreak, CommandType.StoredProcedure, pc,"") > 0)
		Catch ex As Exception
			Throw ex 
		End Try
	End Function
	Public Function GetAll(ByVal SlsperID As System.String, ByVal DiscID As System.String, ByVal DiscSeq As System.String, ByVal LineRef As System.String, ByVal IsWrk As System.String) as DataTable 
		Dim DAL As DataAccess = m_Dal
		Try
			Dim pc As New ParamCollection
			Dim ds As New DataSet
			pc.Add(New ParamStruct("@Action", DbType.String, "GetListData", ParameterDirection.Input,50 ))
			pc.Add(New ParamStruct("@SlsperID", DbType.String, clsCommon.GetValueDBNull(SlsperID), ParameterDirection.Input, 10 ))
			pc.Add(New ParamStruct("@DiscID", DbType.String, clsCommon.GetValueDBNull(DiscID), ParameterDirection.Input, 10 ))
			pc.Add(New ParamStruct("@DiscSeq", DbType.String, clsCommon.GetValueDBNull(DiscSeq), ParameterDirection.Input, 10 ))
			pc.Add(New ParamStruct("@LineRef", DbType.String, clsCommon.GetValueDBNull(LineRef), ParameterDirection.Input, 5 ))
			pc.Add(New ParamStruct("@IsWrk", DbType.String, clsCommon.GetValueDBNull(IsWrk), ParameterDirection.Input, 1 ))
			ds = DAL.ExecDataSet(PP_PPC_OM_DiscBreak, CommandType.StoredProcedure, pc,"")
			Dim keys(4) As DataColumn
			Dim column As DataColumn
			column = ds.Tables(0).Columns("SlsperID")
			Keys(0) = column
			column = ds.Tables(0).Columns("DiscID")
			Keys(1) = column
			column = ds.Tables(0).Columns("DiscSeq")
			Keys(2) = column
			column = ds.Tables(0).Columns("LineRef")
			Keys(3) = column
			column = ds.Tables(0).Columns("IsWrk")
			Keys(4) = column
			ds.Tables(0).PrimaryKey = Keys
			Return ds.Tables(0)
		Catch ex As Exception
			Throw ex 
		End Try
	End Function
	Public Sub Reset()
		mvarSlsperID = String.Empty
		mvarDiscID = String.Empty
		mvarDiscSeq = String.Empty
		mvarLineRef = String.Empty
		mvarIsWrk = String.Empty
		mvartstamp = String.Empty
	End Sub
	Public Function GetByKey(ByVal SlsperID As System.String, ByVal DiscID As System.String, ByVal DiscSeq As System.String, ByVal LineRef As System.String, ByVal IsWrk As System.String) as Boolean 
		Dim DAL As DataAccess = m_Dal
		Dim ds As New DataSet 
		Try
			Dim pc As New ParamCollection
			pc.Add(New ParamStruct("@Action", DbType.String, "GetData_ByKey", ParameterDirection.Input,50 ))
			pc.Add(New ParamStruct("@SlsperID", DbType.String, clsCommon.GetValueDBNull(SlsperID), ParameterDirection.InputOutput, 10 ))
			pc.Add(New ParamStruct("@DiscID", DbType.String, clsCommon.GetValueDBNull(DiscID), ParameterDirection.InputOutput, 10 ))
			pc.Add(New ParamStruct("@DiscSeq", DbType.String, clsCommon.GetValueDBNull(DiscSeq), ParameterDirection.InputOutput, 10 ))
			pc.Add(New ParamStruct("@LineRef", DbType.String, clsCommon.GetValueDBNull(LineRef), ParameterDirection.InputOutput, 5 ))
			pc.Add(New ParamStruct("@IsWrk", DbType.String, clsCommon.GetValueDBNull(IsWrk), ParameterDirection.InputOutput, 1 ))
			ds = DAL.ExecDataSet(PP_PPC_OM_DiscBreak, CommandType.StoredProcedure, pc,"")
			me.Reset()
			If ds Is Nothing Then
				Return False
			End If
			If ds.Tables(0).Rows.Count > 0 Then
				FillData(ds.Tables(0).Rows(0))
				Return True
			End If
		Catch ex As Exception
			Throw ex 
		End Try
		Return False
	End Function
	Public Sub FillData(row as DataRow)
		mvarSlsperID =  clsCommon.GetValue(row("SlsperID"), mvarSlsperID.GetType().FullName)
		mvarDiscID =  clsCommon.GetValue(row("DiscID"), mvarDiscID.GetType().FullName)
		mvarDiscSeq =  clsCommon.GetValue(row("DiscSeq"), mvarDiscSeq.GetType().FullName)
		mvarLineRef =  clsCommon.GetValue(row("LineRef"), mvarLineRef.GetType().FullName)
		mvarIsWrk =  clsCommon.GetValue(row("IsWrk"), mvarIsWrk.GetType().FullName)
		mvartstamp =  clsCommon.GetValue(row("tstamp"), mvartstamp.GetType().FullName)
	End Sub
#End Region 

#Region "Private Methods"
#End Region 

End Class
