'-- ------------------------------------------------------------
'-- Class name    :  clsPPC_SalesOrdDetWrk
'-- Created date  :  10/2/2012
'-- Created by    :  
'-- Updated by    :  
'-- Generated by    :  Class Maker v1.0
'-- ------------------------------------------------------------

'-- Import Libraries --
Imports HQFramework.Common
Imports HQFramework.DAL
Public Class clsPPC_SalesOrdDetWrk
#Region "Constants"
	Private Const PP_PPC_SalesOrdDetWrk As String = "PP_PPC_SalesOrdDetWrk"
#End Region 

#Region "Member Variables"
	Private mvarBranchID As System.String

	Private mvarOrderNbr As System.String

	Private mvarLineRef As System.String

	Private mvarInvtID As System.String

	Private mvarLineQty As System.Double

	Private mvarSlsPrice As System.Double

	Private mvarLineAmt As System.Double

	Private mvarSlsUnit As System.String

	Private mvarUnitMultDiv As System.String

	Private mvarUnitRate As System.Double

	Private mvarStatus As System.Int32

#End Region 

	Private m_Dal As DataAccess
#Region "Constructors"
	Public Sub New()
		m_Dal = New DataAccess
		Reset()
	End Sub
	Public Sub New(ByVal dal As DataAccess)
		m_Dal = dal
		Reset()
	End Sub
#End Region 

#Region "Public Properties"
	Public Property BranchID() As System.String
		Get
			Return mvarBranchID
		End Get
		Set(ByVal Value As System.String)
			mvarBranchID = Value
		End Set
	End Property

	Public Property OrderNbr() As System.String
		Get
			Return mvarOrderNbr
		End Get
		Set(ByVal Value As System.String)
			mvarOrderNbr = Value
		End Set
	End Property

	Public Property LineRef() As System.String
		Get
			Return mvarLineRef
		End Get
		Set(ByVal Value As System.String)
			mvarLineRef = Value
		End Set
	End Property

	Public Property InvtID() As System.String
		Get
			Return mvarInvtID
		End Get
		Set(ByVal Value As System.String)
			mvarInvtID = Value
		End Set
	End Property

	Public Property LineQty() As System.Double
		Get
			Return mvarLineQty
		End Get
		Set(ByVal Value As System.Double)
			mvarLineQty = Value
		End Set
	End Property

	Public Property SlsPrice() As System.Double
		Get
			Return mvarSlsPrice
		End Get
		Set(ByVal Value As System.Double)
			mvarSlsPrice = Value
		End Set
	End Property

	Public Property LineAmt() As System.Double
		Get
			Return mvarLineAmt
		End Get
		Set(ByVal Value As System.Double)
			mvarLineAmt = Value
		End Set
	End Property

	Public Property SlsUnit() As System.String
		Get
			Return mvarSlsUnit
		End Get
		Set(ByVal Value As System.String)
			mvarSlsUnit = Value
		End Set
	End Property

	Public Property UnitMultDiv() As System.String
		Get
			Return mvarUnitMultDiv
		End Get
		Set(ByVal Value As System.String)
			mvarUnitMultDiv = Value
		End Set
	End Property

	Public Property UnitRate() As System.Double
		Get
			Return mvarUnitRate
		End Get
		Set(ByVal Value As System.Double)
			mvarUnitRate = Value
		End Set
	End Property

	Public Property Status() As System.Int32
		Get
			Return mvarStatus
		End Get
		Set(ByVal Value As System.Int32)
			mvarStatus = Value
		End Set
	End Property

#End Region 

#Region "Public Methods"
	Public Function Add() as Boolean 
		Dim DAL As DataAccess = m_Dal
		Try
			Dim pc As New ParamCollection
			pc.Add(New ParamStruct("@Action", DbType.String, "AddNew", ParameterDirection.Input,50 ))
			pc.Add(New ParamStruct("@BranchID",DbType.String, clsCommon.GetValueDBNull(BranchID), ParameterDirection.Input,30 ))
			pc.Add(New ParamStruct("@OrderNbr", DbType.String,clsCommon.GetValueDBNull(Me.mvarOrderNbr), ParameterDirection.Input,15 ))
			pc.Add(New ParamStruct("@LineRef", DbType.String,clsCommon.GetValueDBNull(Me.mvarLineRef), ParameterDirection.Input,5 ))
			pc.Add(New ParamStruct("@InvtID", DbType.String,clsCommon.GetValueDBNull(Me.mvarInvtID), ParameterDirection.Input,30 ))
			pc.Add(New ParamStruct("@LineQty", DbType.Decimal,clsCommon.GetValueDBNull(Me.mvarLineQty), ParameterDirection.Input,8 ))
			pc.Add(New ParamStruct("@SlsPrice", DbType.Decimal,clsCommon.GetValueDBNull(Me.mvarSlsPrice), ParameterDirection.Input,8 ))
			pc.Add(New ParamStruct("@LineAmt", DbType.Decimal,clsCommon.GetValueDBNull(Me.mvarLineAmt), ParameterDirection.Input,8 ))
			pc.Add(New ParamStruct("@SlsUnit", DbType.String,clsCommon.GetValueDBNull(Me.mvarSlsUnit), ParameterDirection.Input,15 ))
			pc.Add(New ParamStruct("@UnitMultDiv", DbType.String,clsCommon.GetValueDBNull(Me.mvarUnitMultDiv), ParameterDirection.Input,1 ))
			pc.Add(New ParamStruct("@UnitRate", DbType.Decimal,clsCommon.GetValueDBNull(Me.mvarUnitRate), ParameterDirection.Input,8 ))
			pc.Add(New ParamStruct("@Status", DbType.int32,clsCommon.GetValueDBNull(Me.mvarStatus), ParameterDirection.Input,4 ))
			DAL.ExecPreparedSQL(PP_PPC_SalesOrdDetWrk, CommandType.StoredProcedure, pc,"")
		Me.mvarBranchID = clsCommon.GetValue(pc.Item("@BranchID").Value, mvarBranchID.GetType().FullName)
		Return (Me.mvarBranchID <> String.Empty )
		Catch ex As Exception
			Throw ex 
		End Try
	End Function
	Public Function Update() as Boolean 
		Dim DAL As DataAccess = m_Dal
		Try
			Dim pc As New ParamCollection
			pc.Add(New ParamStruct("@Action", DbType.String, "Update", ParameterDirection.Input,50 ))
			 pc.Add(New ParamStruct("@BranchID",DbType.String, clsCommon.GetValueDBNull(me.mvarBranchID), ParameterDirection.Input,30 ))
			 pc.Add(New ParamStruct("@OrderNbr",DbType.String, clsCommon.GetValueDBNull(me.mvarOrderNbr), ParameterDirection.Input,15 ))
			 pc.Add(New ParamStruct("@LineRef",DbType.String, clsCommon.GetValueDBNull(me.mvarLineRef), ParameterDirection.Input,5 ))
			 pc.Add(New ParamStruct("@InvtID",DbType.String, clsCommon.GetValueDBNull(me.mvarInvtID), ParameterDirection.Input,30 ))
			 pc.Add(New ParamStruct("@LineQty",DbType.Decimal, clsCommon.GetValueDBNull(me.mvarLineQty), ParameterDirection.Input,8 ))
			 pc.Add(New ParamStruct("@SlsPrice",DbType.Decimal, clsCommon.GetValueDBNull(me.mvarSlsPrice), ParameterDirection.Input,8 ))
			 pc.Add(New ParamStruct("@LineAmt",DbType.Decimal, clsCommon.GetValueDBNull(me.mvarLineAmt), ParameterDirection.Input,8 ))
			 pc.Add(New ParamStruct("@SlsUnit",DbType.String, clsCommon.GetValueDBNull(me.mvarSlsUnit), ParameterDirection.Input,15 ))
			 pc.Add(New ParamStruct("@UnitMultDiv",DbType.String, clsCommon.GetValueDBNull(me.mvarUnitMultDiv), ParameterDirection.Input,1 ))
			 pc.Add(New ParamStruct("@UnitRate",DbType.Decimal, clsCommon.GetValueDBNull(me.mvarUnitRate), ParameterDirection.Input,8 ))
			 pc.Add(New ParamStruct("@Status",DbType.int32, clsCommon.GetValueDBNull(me.mvarStatus), ParameterDirection.Input,4 ))
			Return (DAL.ExecNonQuery(PP_PPC_SalesOrdDetWrk, CommandType.StoredProcedure, pc,"") > 0)
		Catch ex As Exception
			Throw ex 
		End Try
	End Function
	Public Function Delete() as Boolean 
		Dim DAL As DataAccess = m_Dal
		Try
			Dim pc As New ParamCollection
			pc.Add(New ParamStruct("@Action", DbType.String, "Delete", ParameterDirection.Input,50 ))
			Return (DAL.ExecNonQuery(PP_PPC_SalesOrdDetWrk, CommandType.StoredProcedure, pc,"") > 0)
		Catch ex As Exception
			Throw ex 
		End Try
	End Function
	Public Function GetAll() as DataTable 
		Dim DAL As DataAccess = m_Dal
		Try
			Dim pc As New ParamCollection
			Dim ds As New DataSet
			pc.Add(New ParamStruct("@Action", DbType.String, "GetListData", ParameterDirection.Input,50 ))
			ds = DAL.ExecDataSet(PP_PPC_SalesOrdDetWrk, CommandType.StoredProcedure, pc,"")
			Return ds.Tables(0)
		Catch ex As Exception
			Throw ex 
		End Try
	End Function
	Public Sub Reset()
		mvarBranchID = String.Empty
		mvarOrderNbr = String.Empty
		mvarLineRef = String.Empty
		mvarInvtID = String.Empty
		mvarLineQty = 0
		mvarSlsPrice = 0
		mvarLineAmt = 0
		mvarSlsUnit = String.Empty
		mvarUnitMultDiv = String.Empty
		mvarUnitRate = 0
		mvarStatus = 0
	End Sub
	Public Function GetByKey() as Boolean 
		Dim DAL As DataAccess = m_Dal
		Dim ds As New DataSet 
		Try
			Dim pc As New ParamCollection
			pc.Add(New ParamStruct("@Action", DbType.String, "GetData_ByKey", ParameterDirection.Input,50 ))
			ds = DAL.ExecDataSet(PP_PPC_SalesOrdDetWrk, CommandType.StoredProcedure, pc,"")
			me.Reset()
			If ds Is Nothing Then
				Return False
			End If
			If ds.Tables(0).Rows.Count > 0 Then
				FillData(ds.Tables(0).Rows(0))
				Return True
			End If
		Catch ex As Exception
			Throw ex 
		End Try
		Return False
	End Function
	Public Sub FillData(row as DataRow)
		mvarBranchID =  clsCommon.GetValue(row("BranchID"), mvarBranchID.GetType().FullName)
		mvarOrderNbr =  clsCommon.GetValue(row("OrderNbr"), mvarOrderNbr.GetType().FullName)
		mvarLineRef =  clsCommon.GetValue(row("LineRef"), mvarLineRef.GetType().FullName)
		mvarInvtID =  clsCommon.GetValue(row("InvtID"), mvarInvtID.GetType().FullName)
		mvarLineQty =  clsCommon.GetValue(row("LineQty"), mvarLineQty.GetType().FullName)
		mvarSlsPrice =  clsCommon.GetValue(row("SlsPrice"), mvarSlsPrice.GetType().FullName)
		mvarLineAmt =  clsCommon.GetValue(row("LineAmt"), mvarLineAmt.GetType().FullName)
		mvarSlsUnit =  clsCommon.GetValue(row("SlsUnit"), mvarSlsUnit.GetType().FullName)
		mvarUnitMultDiv =  clsCommon.GetValue(row("UnitMultDiv"), mvarUnitMultDiv.GetType().FullName)
		mvarUnitRate =  clsCommon.GetValue(row("UnitRate"), mvarUnitRate.GetType().FullName)
		mvarStatus =  clsCommon.GetValue(row("Status"), mvarStatus.GetType().FullName)
	End Sub
#End Region 

#Region "Private Methods"
#End Region 

End Class
