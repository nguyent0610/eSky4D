'-- ------------------------------------------------------------
'-- Class name    :  clsPPC_IN_Inventory
'-- Created date  :  10/2/2012
'-- Created by    :  
'-- Updated by    :  
'-- Generated by    :  Class Maker v1.0
'-- ------------------------------------------------------------

'-- Import Libraries --
Imports HQFramework.Common
Imports HQFramework.DAL
Public Class clsPPC_IN_Inventory
#Region "Constants"
	Private Const PP_PPC_IN_Inventory As String = "PP_PPC_IN_Inventory"
#End Region 

#Region "Member Variables"
	Private mvarSlsperID As System.String

	Private mvarInvtID As System.String

	Private mvarStkBasePrc As System.Double

	Private mvarIsWrk As System.String

	Private mvartstamp As System.String

#End Region 

	Private m_Dal As DataAccess
#Region "Constructors"
	Public Sub New()
		m_Dal = New DataAccess
		Reset()
	End Sub
	Public Sub New(ByVal dal As DataAccess)
		m_Dal = dal
		Reset()
	End Sub
#End Region 

#Region "Public Properties"
	Public Property SlsperID() As System.String
		Get
			Return mvarSlsperID
		End Get
		Set(ByVal Value As System.String)
			mvarSlsperID = Value
		End Set
	End Property

	Public Property InvtID() As System.String
		Get
			Return mvarInvtID
		End Get
		Set(ByVal Value As System.String)
			mvarInvtID = Value
		End Set
	End Property

	Public Property StkBasePrc() As System.Double
		Get
			Return mvarStkBasePrc
		End Get
		Set(ByVal Value As System.Double)
			mvarStkBasePrc = Value
		End Set
	End Property

	Public Property IsWrk() As System.String
		Get
			Return mvarIsWrk
		End Get
		Set(ByVal Value As System.String)
			mvarIsWrk = Value
		End Set
	End Property

	Public Property tstamp() As System.String
		Get
			Return mvartstamp
		End Get
		Set(ByVal Value As System.String)
			mvartstamp = Value
		End Set
	End Property

#End Region 

#Region "Public Methods"
	Public Function Add() as Boolean 
		Dim DAL As DataAccess = m_Dal
		Try
			Dim pc As New ParamCollection
			pc.Add(New ParamStruct("@Action", DbType.String, "AddNew", ParameterDirection.Input,50 ))
			pc.Add(New ParamStruct("@SlsperID", DbType.String,clsCommon.GetValueDBNull(Me.mvarSlsperID), ParameterDirection.Input,10 ))
			pc.Add(New ParamStruct("@InvtID", DbType.String,clsCommon.GetValueDBNull(Me.mvarInvtID), ParameterDirection.Input,30 ))
			pc.Add(New ParamStruct("@StkBasePrc", DbType.Decimal,clsCommon.GetValueDBNull(Me.mvarStkBasePrc), ParameterDirection.Input,8 ))
			pc.Add(New ParamStruct("@IsWrk", DbType.String,clsCommon.GetValueDBNull(Me.mvarIsWrk), ParameterDirection.Input,1 ))
			pc.Add(New ParamStruct("@tstamp", DbType.String,clsCommon.GetValueDBNull(Me.mvartstamp), ParameterDirection.Input,18 ))
			DAL.ExecPreparedSQL(PP_PPC_IN_Inventory, CommandType.StoredProcedure, pc,"")
		Me.mvarSlsperID = clsCommon.GetValue(pc.Item("@SlsperID").Value, mvarSlsperID.GetType().FullName)
		Return (Me.mvarSlsperID <> String.Empty )
		Catch ex As Exception
			Throw ex 
		End Try
	End Function
	Public Function Update() as Boolean 
		Dim DAL As DataAccess = m_Dal
		Try
			Dim pc As New ParamCollection
			pc.Add(New ParamStruct("@Action", DbType.String, "Update", ParameterDirection.Input,50 ))
			 pc.Add(New ParamStruct("@SlsperID",DbType.String, clsCommon.GetValueDBNull(me.mvarSlsperID), ParameterDirection.Input,10 ))
			 pc.Add(New ParamStruct("@InvtID",DbType.String, clsCommon.GetValueDBNull(me.mvarInvtID), ParameterDirection.Input,30 ))
			 pc.Add(New ParamStruct("@StkBasePrc",DbType.Decimal, clsCommon.GetValueDBNull(me.mvarStkBasePrc), ParameterDirection.Input,8 ))
			 pc.Add(New ParamStruct("@IsWrk",DbType.String, clsCommon.GetValueDBNull(me.mvarIsWrk), ParameterDirection.Input,1 ))
			 pc.Add(New ParamStruct("@tstamp",DbType.String, clsCommon.GetValueDBNull(me.mvartstamp), ParameterDirection.Input,18 ))
			Return (DAL.ExecNonQuery(PP_PPC_IN_Inventory, CommandType.StoredProcedure, pc,"") > 0)
		Catch ex As Exception
			Throw ex 
		End Try
	End Function
	Public Function Delete() as Boolean 
		Dim DAL As DataAccess = m_Dal
		Try
			Dim pc As New ParamCollection
			pc.Add(New ParamStruct("@Action", DbType.String, "Delete", ParameterDirection.Input,50 ))
			Return (DAL.ExecNonQuery(PP_PPC_IN_Inventory, CommandType.StoredProcedure, pc,"") > 0)
		Catch ex As Exception
			Throw ex 
		End Try
	End Function
	Public Function GetAll() as DataTable 
		Dim DAL As DataAccess = m_Dal
		Try
			Dim pc As New ParamCollection
			Dim ds As New DataSet
			pc.Add(New ParamStruct("@Action", DbType.String, "GetListData", ParameterDirection.Input,50 ))
			ds = DAL.ExecDataSet(PP_PPC_IN_Inventory, CommandType.StoredProcedure, pc,"")
			Return ds.Tables(0)
		Catch ex As Exception
			Throw ex 
		End Try
	End Function
	Public Sub Reset()
		mvarSlsperID = String.Empty
		mvarInvtID = String.Empty
		mvarStkBasePrc = 0
		mvarIsWrk = String.Empty
		mvartstamp = String.Empty
	End Sub
	Public Function GetByKey() as Boolean 
		Dim DAL As DataAccess = m_Dal
		Dim ds As New DataSet 
		Try
			Dim pc As New ParamCollection
			pc.Add(New ParamStruct("@Action", DbType.String, "GetData_ByKey", ParameterDirection.Input,50 ))
			ds = DAL.ExecDataSet(PP_PPC_IN_Inventory, CommandType.StoredProcedure, pc,"")
			me.Reset()
			If ds Is Nothing Then
				Return False
			End If
			If ds.Tables(0).Rows.Count > 0 Then
				FillData(ds.Tables(0).Rows(0))
				Return True
			End If
		Catch ex As Exception
			Throw ex 
		End Try
		Return False
	End Function
	Public Sub FillData(row as DataRow)
		mvarSlsperID =  clsCommon.GetValue(row("SlsperID"), mvarSlsperID.GetType().FullName)
		mvarInvtID =  clsCommon.GetValue(row("InvtID"), mvarInvtID.GetType().FullName)
		mvarStkBasePrc =  clsCommon.GetValue(row("StkBasePrc"), mvarStkBasePrc.GetType().FullName)
		mvarIsWrk =  clsCommon.GetValue(row("IsWrk"), mvarIsWrk.GetType().FullName)
		mvartstamp =  clsCommon.GetValue(row("tstamp"), mvartstamp.GetType().FullName)
	End Sub
#End Region 

#Region "Private Methods"
#End Region 

End Class
