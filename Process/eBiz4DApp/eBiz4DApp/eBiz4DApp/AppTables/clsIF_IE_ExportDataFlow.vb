'-- ------------------------------------------------------------
'-- Class name    :  clsIF_IE_ExportDataFlow
'-- Created date  :  10/2/2012
'-- Created by    :  
'-- Updated by    :  
'-- Generated by    :  Class Maker v1.0
'-- ------------------------------------------------------------

'-- Import Libraries --
Imports HQFramework.Common
Imports HQFramework.DAL
Public Class clsIF_IE_ExportDataFlow
#Region "Constants"
	Private Const PP_IF_IE_ExportDataFlow As String = "PP_IF_IE_ExportDataFlow"
#End Region 

#Region "Member Variables"
	Private mvarModule1 As System.String

	Private mvarStatus As System.String

	Private mvarLSET As System.DateTime

	Private mvarCET As System.DateTime

#End Region 

	Private m_Dal As DataAccess
#Region "Constructors"
	Public Sub New()
		m_Dal = New DataAccess
		Reset()
	End Sub
	Public Sub New(ByVal dal As DataAccess)
		m_Dal = dal
		Reset()
	End Sub
#End Region 

#Region "Public Properties"
	Public Property Module1() As System.String
		Get
			Return mvarModule1
		End Get
		Set(ByVal Value As System.String)
			mvarModule1 = Value
		End Set
	End Property

	Public Property Status() As System.String
		Get
			Return mvarStatus
		End Get
		Set(ByVal Value As System.String)
			mvarStatus = Value
		End Set
	End Property

	Public Property LSET() As System.DateTime
		Get
			Return mvarLSET
		End Get
		Set(ByVal Value As System.DateTime)
			mvarLSET = Value
		End Set
	End Property

	Public Property CET() As System.DateTime
		Get
			Return mvarCET
		End Get
		Set(ByVal Value As System.DateTime)
			mvarCET = Value
		End Set
	End Property

#End Region 

#Region "Public Methods"
	Public Function Add() as Boolean 
		Dim DAL As DataAccess = m_Dal
		Try
			Dim pc As New ParamCollection
			pc.Add(New ParamStruct("@Action", DbType.String, "AddNew", ParameterDirection.Input,50 ))
			pc.Add(New ParamStruct("@Module", DbType.String,clsCommon.GetValueDBNull(Me.mvarModule1), ParameterDirection.Input,10 ))
			pc.Add(New ParamStruct("@Status", DbType.String,clsCommon.GetValueDBNull(Me.mvarStatus), ParameterDirection.Input,1 ))
			pc.Add(New ParamStruct("@LSET", DbType.DateTime,clsCommon.GetValueDBNull(Me.mvarLSET.Date), ParameterDirection.Input,16 ))
			pc.Add(New ParamStruct("@CET", DbType.DateTime,clsCommon.GetValueDBNull(Me.mvarCET.Date), ParameterDirection.Input,16 ))
			DAL.ExecPreparedSQL(PP_IF_IE_ExportDataFlow, CommandType.StoredProcedure, pc,"")
            Me.mvarModule1 = clsCommon.GetValue(pc.Item("@Module").Value, mvarModule1.GetType().FullName)
            Return (Me.mvarModule1 <> String.Empty)
		Catch ex As Exception
			Throw ex 
		End Try
	End Function
	Public Function Update() as Boolean 
		Dim DAL As DataAccess = m_Dal
		Try
			Dim pc As New ParamCollection
			pc.Add(New ParamStruct("@Action", DbType.String, "Update", ParameterDirection.Input,50 ))
			 pc.Add(New ParamStruct("@Module",DbType.String, clsCommon.GetValueDBNull(me.mvarModule1), ParameterDirection.Input,10 ))
			 pc.Add(New ParamStruct("@Status",DbType.String, clsCommon.GetValueDBNull(me.mvarStatus), ParameterDirection.Input,1 ))
			 pc.Add(New ParamStruct("@LSET",DbType.DateTime, clsCommon.GetValueDBNull(me.mvarLSET.Date), ParameterDirection.Input,16 ))
			 pc.Add(New ParamStruct("@CET",DbType.DateTime, clsCommon.GetValueDBNull(me.mvarCET.Date), ParameterDirection.Input,16 ))
			Return (DAL.ExecNonQuery(PP_IF_IE_ExportDataFlow, CommandType.StoredProcedure, pc,"") > 0)
		Catch ex As Exception
			Throw ex 
		End Try
	End Function
	Public Function Delete(ByVal Module1 As System.String) as Boolean 
		Dim DAL As DataAccess = m_Dal
		Try
			Dim pc As New ParamCollection
			pc.Add(New ParamStruct("@Action", DbType.String, "Delete", ParameterDirection.Input,50 ))
			pc.Add(New ParamStruct("@Module",DbType.String, clsCommon.GetValueDBNull(Module1), ParameterDirection.Input,10 ))
			Return (DAL.ExecNonQuery(PP_IF_IE_ExportDataFlow, CommandType.StoredProcedure, pc,"") > 0)
		Catch ex As Exception
			Throw ex 
		End Try
	End Function
	Public Function GetAll(ByVal Module1 As System.String) as DataTable 
		Dim DAL As DataAccess = m_Dal
		Try
			Dim pc As New ParamCollection
			Dim ds As New DataSet
			pc.Add(New ParamStruct("@Action", DbType.String, "GetListData", ParameterDirection.Input,50 ))
			pc.Add(New ParamStruct("@Module", DbType.String, clsCommon.GetValueDBNull(Module1), ParameterDirection.Input, 10 ))
			ds = DAL.ExecDataSet(PP_IF_IE_ExportDataFlow, CommandType.StoredProcedure, pc,"")
			Dim keys(0) As DataColumn
			Dim column As DataColumn
			column = ds.Tables(0).Columns("Module")
			Keys(0) = column
			ds.Tables(0).PrimaryKey = Keys
			Return ds.Tables(0)
		Catch ex As Exception
			Throw ex 
		End Try
	End Function
	Public Sub Reset()
		mvarModule1 = String.Empty
		mvarStatus = String.Empty
		mvarLSET = Today
		mvarCET = Today
	End Sub
	Public Function GetByKey(ByVal Module1 As System.String) as Boolean 
		Dim DAL As DataAccess = m_Dal
		Dim ds As New DataSet 
		Try
			Dim pc As New ParamCollection
			pc.Add(New ParamStruct("@Action", DbType.String, "GetData_ByKey", ParameterDirection.Input,50 ))
			pc.Add(New ParamStruct("@Module", DbType.String, clsCommon.GetValueDBNull(Module1), ParameterDirection.InputOutput, 10 ))
			ds = DAL.ExecDataSet(PP_IF_IE_ExportDataFlow, CommandType.StoredProcedure, pc,"")
			me.Reset()
			If ds Is Nothing Then
				Return False
			End If
			If ds.Tables(0).Rows.Count > 0 Then
				FillData(ds.Tables(0).Rows(0))
				Return True
			End If
		Catch ex As Exception
			Throw ex 
		End Try
		Return False
	End Function
	Public Sub FillData(row as DataRow)
		mvarModule1 =  clsCommon.GetValue(row("Module"), mvarModule1.GetType().FullName)
		mvarStatus =  clsCommon.GetValue(row("Status"), mvarStatus.GetType().FullName)
		mvarLSET =  clsCommon.GetValue(row("LSET"), mvarLSET.GetType().FullName)
		mvarCET =  clsCommon.GetValue(row("CET"), mvarCET.GetType().FullName)
	End Sub
#End Region 

#Region "Private Methods"
#End Region 

End Class
