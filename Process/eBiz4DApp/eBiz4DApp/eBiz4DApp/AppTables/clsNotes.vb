'-- ------------------------------------------------------------
'-- Class name    :  clsNotes
'-- Created date  :  10/2/2012
'-- Created by    :  
'-- Updated by    :  
'-- Generated by    :  Class Maker v1.0
'-- ------------------------------------------------------------

'-- Import Libraries --
Imports HQFramework.Common
Imports HQFramework.DAL
Public Class clsNotes
#Region "Constants"
	Private Const PP_Notes As String = "PP_Notes"
#End Region 

#Region "Member Variables"
	Private mvarnID As System.Int32

	Private mvarBranchID As System.String

	Private mvarRevisedDate As System.DateTime

	Private mvarLevelName As System.String

	Private mvarTableName As System.String

	Private mvarNoteText As System.String

	Private mvartstamp As System.String

#End Region 

	Private m_Dal As DataAccess
#Region "Constructors"
	Public Sub New()
		m_Dal = New DataAccess
		Reset()
	End Sub
	Public Sub New(ByVal dal As DataAccess)
		m_Dal = dal
		Reset()
	End Sub
#End Region 

#Region "Public Properties"
	Public Property nID() As System.Int32
		Get
			Return mvarnID
		End Get
		Set(ByVal Value As System.Int32)
			mvarnID = Value
		End Set
	End Property

	Public Property BranchID() As System.String
		Get
			Return mvarBranchID
		End Get
		Set(ByVal Value As System.String)
			mvarBranchID = Value
		End Set
	End Property

	Public Property RevisedDate() As System.DateTime
		Get
			Return mvarRevisedDate
		End Get
		Set(ByVal Value As System.DateTime)
			mvarRevisedDate = Value
		End Set
	End Property

	Public Property LevelName() As System.String
		Get
			Return mvarLevelName
		End Get
		Set(ByVal Value As System.String)
			mvarLevelName = Value
		End Set
	End Property

	Public Property TableName() As System.String
		Get
			Return mvarTableName
		End Get
		Set(ByVal Value As System.String)
			mvarTableName = Value
		End Set
	End Property

	Public Property NoteText() As System.String
		Get
			Return mvarNoteText
		End Get
		Set(ByVal Value As System.String)
			mvarNoteText = Value
		End Set
	End Property

	Public Property tstamp() As System.String
		Get
			Return mvartstamp
		End Get
		Set(ByVal Value As System.String)
			mvartstamp = Value
		End Set
	End Property

#End Region 

#Region "Public Methods"
	Public Function Add() as Boolean 
		Dim DAL As DataAccess = m_Dal
		Try
			Dim pc As New ParamCollection
			pc.Add(New ParamStruct("@Action", DbType.String, "AddNew", ParameterDirection.Input,50 ))
			pc.Add(New ParamStruct("@nID", DbType.int32,clsCommon.GetValueDBNull(Me.mvarnID), ParameterDirection.Input,4 ))
			pc.Add(New ParamStruct("@BranchID",DbType.String, clsCommon.GetValueDBNull(BranchID), ParameterDirection.Input,30 ))
			pc.Add(New ParamStruct("@RevisedDate", DbType.DateTime,clsCommon.GetValueDBNull(Me.mvarRevisedDate.Date), ParameterDirection.Input,16 ))
			pc.Add(New ParamStruct("@LevelName", DbType.String,clsCommon.GetValueDBNull(Me.mvarLevelName), ParameterDirection.Input,20 ))
			pc.Add(New ParamStruct("@TableName", DbType.String,clsCommon.GetValueDBNull(Me.mvarTableName), ParameterDirection.Input,20 ))
			pc.Add(New ParamStruct("@NoteText", DbType.String,clsCommon.GetValueDBNull(Me.mvarNoteText), ParameterDirection.Input,Nothing ))
			pc.Add(New ParamStruct("@tstamp", DbType.String,clsCommon.GetValueDBNull(Me.mvartstamp), ParameterDirection.Input,18 ))
			DAL.ExecPreparedSQL(PP_Notes, CommandType.StoredProcedure, pc,"")
		Me.mvarnID = clsCommon.GetValue(pc.Item("@nID").Value, mvarnID.GetType().FullName)
		Return True
		Catch ex As Exception
			Throw ex 
		End Try
	End Function
	Public Function Update() as Boolean 
		Dim DAL As DataAccess = m_Dal
		Try
			Dim pc As New ParamCollection
			pc.Add(New ParamStruct("@Action", DbType.String, "Update", ParameterDirection.Input,50 ))
			 pc.Add(New ParamStruct("@nID",DbType.int32, clsCommon.GetValueDBNull(me.mvarnID), ParameterDirection.Input,4 ))
			 pc.Add(New ParamStruct("@BranchID",DbType.String, clsCommon.GetValueDBNull(me.mvarBranchID), ParameterDirection.Input,30 ))
			 pc.Add(New ParamStruct("@RevisedDate",DbType.DateTime, clsCommon.GetValueDBNull(me.mvarRevisedDate.Date), ParameterDirection.Input,16 ))
			 pc.Add(New ParamStruct("@LevelName",DbType.String, clsCommon.GetValueDBNull(me.mvarLevelName), ParameterDirection.Input,20 ))
			 pc.Add(New ParamStruct("@TableName",DbType.String, clsCommon.GetValueDBNull(me.mvarTableName), ParameterDirection.Input,20 ))
			 pc.Add(New ParamStruct("@NoteText",DbType.String, clsCommon.GetValueDBNull(me.mvarNoteText), ParameterDirection.Input,Nothing ))
			 pc.Add(New ParamStruct("@tstamp",DbType.String, clsCommon.GetValueDBNull(me.mvartstamp), ParameterDirection.Input,18 ))
			Return (DAL.ExecNonQuery(PP_Notes, CommandType.StoredProcedure, pc,"") > 0)
		Catch ex As Exception
			Throw ex 
		End Try
	End Function
	Public Function Delete(ByVal nID As System.Int32, ByVal BranchID As System.String) as Boolean 
		Dim DAL As DataAccess = m_Dal
		Try
			Dim pc As New ParamCollection
			pc.Add(New ParamStruct("@Action", DbType.String, "Delete", ParameterDirection.Input,50 ))
			pc.Add(New ParamStruct("@nID",DbType.int32, clsCommon.GetValueDBNull(nID), ParameterDirection.Input,4 ))
			pc.Add(New ParamStruct("@BranchID",DbType.String, clsCommon.GetValueDBNull(BranchID), ParameterDirection.Input,30 ))
			Return (DAL.ExecNonQuery(PP_Notes, CommandType.StoredProcedure, pc,"") > 0)
		Catch ex As Exception
			Throw ex 
		End Try
	End Function
	Public Function GetAll(ByVal nID As System.Int32, ByVal BranchID As System.String) as DataTable 
		Dim DAL As DataAccess = m_Dal
		Try
			Dim pc As New ParamCollection
			Dim ds As New DataSet
			pc.Add(New ParamStruct("@Action", DbType.String, "GetListData", ParameterDirection.Input,50 ))
			pc.Add(New ParamStruct("@nID", DbType.int32, clsCommon.GetValueDBNull(nID), ParameterDirection.Input, 4 ))
			pc.Add(New ParamStruct("@BranchID",DbType.String, clsCommon.GetValueDBNull(BranchID), ParameterDirection.Input,30 ))
			ds = DAL.ExecDataSet(PP_Notes, CommandType.StoredProcedure, pc,"")
			Dim keys(1) As DataColumn
			Dim column As DataColumn
			column = ds.Tables(0).Columns("nID")
			Keys(0) = column
			column = ds.Tables(0).Columns("BranchID")
			Keys(1) = column
			ds.Tables(0).PrimaryKey = Keys
			Return ds.Tables(0)
		Catch ex As Exception
			Throw ex 
		End Try
	End Function
	Public Sub Reset()
		mvarnID = 0
		mvarBranchID = String.Empty
		mvarRevisedDate = Today
		mvarLevelName = String.Empty
		mvarTableName = String.Empty
		mvarNoteText = String.Empty
		mvartstamp = String.Empty
	End Sub
	Public Function GetByKey(ByVal nID As System.Int32, ByVal BranchID As System.String) as Boolean 
		Dim DAL As DataAccess = m_Dal
		Dim ds As New DataSet 
		Try
			Dim pc As New ParamCollection
			pc.Add(New ParamStruct("@Action", DbType.String, "GetData_ByKey", ParameterDirection.Input,50 ))
			pc.Add(New ParamStruct("@nID", DbType.int32, clsCommon.GetValueDBNull(nID), ParameterDirection.InputOutput, 4 ))
			pc.Add(New ParamStruct("@BranchID", DbType.String, clsCommon.GetValueDBNull(BranchID), ParameterDirection.InputOutput, 30 ))
			ds = DAL.ExecDataSet(PP_Notes, CommandType.StoredProcedure, pc,"")
			me.Reset()
			If ds Is Nothing Then
				Return False
			End If
			If ds.Tables(0).Rows.Count > 0 Then
				FillData(ds.Tables(0).Rows(0))
				Return True
			End If
		Catch ex As Exception
			Throw ex 
		End Try
		Return False
	End Function
	Public Sub FillData(row as DataRow)
		mvarnID =  clsCommon.GetValue(row("nID"), mvarnID.GetType().FullName)
		mvarBranchID =  clsCommon.GetValue(row("BranchID"), mvarBranchID.GetType().FullName)
		mvarRevisedDate =  clsCommon.GetValue(row("RevisedDate"), mvarRevisedDate.GetType().FullName)
		mvarLevelName =  clsCommon.GetValue(row("LevelName"), mvarLevelName.GetType().FullName)
		mvarTableName =  clsCommon.GetValue(row("TableName"), mvarTableName.GetType().FullName)
		mvarNoteText =  clsCommon.GetValue(row("NoteText"), mvarNoteText.GetType().FullName)
		mvartstamp =  clsCommon.GetValue(row("tstamp"), mvartstamp.GetType().FullName)
	End Sub
#End Region 

#Region "Private Methods"
#End Region 

End Class
