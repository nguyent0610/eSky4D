@using Ext.Net;
@using Ext.Net.MVC;
@using HQ.eSkyFramework;
@using HQ.eSkyFramework.HQControl;
@using PO10401;

@model System.Collections.IEnumerable
  
@{
    Layout = null;
    var X = Html.X();
    var HQ = Html.HQ();
    ViewBag.Title = "PO10401";
    var acc = Session["PO10401"] as AccessRight;
    
}
<!DOCTYPE html>
<html>
    <head>
        <meta name="viewport" content="width=device-width" />
        <link href="~/Content/ComboXTemplate.css" rel="stylesheet" />
        <script src='@Url.Content("Scripts/hq.language"+Current.LangID+".js?"+DateTime.Now.ToString("yyyyMMddss"))' type="text/javascript"></script>
        <script src='@Url.Content("Scripts/hq.common.js?"+DateTime.Now.ToString("yyyyMMddss"))' type="text/javascript"></script>
        <script src='@Url.Content("Scripts/Screen/PO10401.js?"+DateTime.Now.ToString("yyyyMMddss"))' type="text/javascript"></script>
        <style type="text/css">
            .row-pink .x-grid-cell{
                background-color: pink !important;
            }
            .row-orange .x-grid-cell{
                background-color: orange !important;
            }
            .row-red .x-grid-cell{
                background-color: red !important;
            }

            .row-yellow .x-grid-cell{
                background-color: yellow !important;
            }

            .row-none .x-grid-cell{
                background-color: none !important;
            }
        </style>    
     
   
        <script type="text/javascript">
            HQ.cpnyID = '@Current.CpnyID';
            HQ.langID = '@Current.LangID';
            HQ.userName = '@Current.UserName';
            HQ.isUpdate = HQ.util.toBool('@acc.Update.ToString()');
            HQ.isInsert = HQ.util.toBool('@acc.Insert.ToString()');
            HQ.isDelete = HQ.util.toBool('@acc.Delete.ToString()');
            HQ.bussinessDate = new Date('@DateTime.Now.Date');

            var getRowClass = function (record, index) {
                if (record.data.IsOverdue) {
                    return "row-pink";// + record.data.color;
                }
                else if (record.data.IsWarningStock && record.data.IsWarningDeposit) {
                    return "row-orange";// + record.data.color;
                }
                else if (record.data.IsWarningStock) {
                    return "row-red";// + record.data.color;
                }
                else if (record.data.IsWarningDeposit) {
                    return "row-yellow";// + record.data.color;
                }               
                else return "row-none";
            };
            var onShowTooltip = function (toolTip, grid, isHtmlEncode) {
                var view = grid.getView().lockedView,
                    store = grid.getStore(),
                    record = view.getRecord(view.findItemByChild(toolTip.triggerElement)),
                    column = view.getHeaderByCell(toolTip.triggerElement),
                    data = "";
                if (record.data.IsOverdue) {
                    data = HQ.common.getLang("rowpink");// + record.data.color;
                }
                else if (record.data.IsWarningStock && record.data.IsWarningDeposit) {
                    data = HQ.common.getLang("roworange");// + record.data.color;
                }
                else if (record.data.IsWarningStock) {
                    data = HQ.common.getLang("rowred");// + record.data.color;
                }
                else if (record.data.IsWarningDeposit) {
                    data = HQ.common.getLang("rowyellow");// + record.data.color;
                }
                else data = "";
                if (data) {
                    if (isHtmlEncode) {
                        toolTip.update(Ext.util.Format.htmlEncode(data));
                    }
                    else {
                        toolTip.update(data);
                    }
                }
                else {
                    toolTip.hide();
                }
            }
            //    var view = grid.getView(),
            //        record = view.getRecord(toolTip.triggerElement);
            //    
                    
            //    toolTip.update(data);
            //};
        </script>

        <title>@ViewBag.Title</title>
    </head>
    <body>
        @(X.ResourceManager().Theme((Theme)Enum.Parse(typeof(Theme),Current.Theme.PassNull()==""?"Gray":Current.Theme.PassNull())))
        @(HQ.Store().ID("stoPOType").HQProcedure("PO10401_pcPOType")
                                    .HQParam(new StoreParameterCollection() { 
                                                    new StoreParameter("@LangID", "HQ.langID", ParameterMode.Raw)                                   
                                }).LoadData()
        )
        @*Make the store - the binding data of the form*@
        <!-- Begin Cac store phu thuoc vao txtBatNbr-->
         @(X.Store().ID("stoHeader").AutoLoad(false)   
            .Model(Util.GenerateModel(typeof(PO10401_pdHeader_Result), "PO10401_pdHeaderModel", "BatNbr,RcptNbr"))          
            .Proxy(
                    X.AjaxProxy()                
                    .Url(Url.Action("GetHeader", "PO10401"))                
                    .ActionMethods(action =>
                    {
                        action.Read = HttpMethod.POST;
                    })
                    .Reader(X.JsonReader().Root("data").TotalProperty("totaldata"))
                ) 
            .Parameters(ps =>
                            {
                                ps.Add(new StoreParameter("branchID", "App.txtBranchID.getValue()", ParameterMode.Raw));
                                ps.Add(new StoreParameter("batNbr", "App.txtBatNbr.getValue()", ParameterMode.Raw));
                            })  
            .Listeners(p=>p.Load.Fn="loadDataHeader" )            
        )
        @(
            X.Store()
            .ID("stoLotTrans")
            .AutoLoad(false)
            .Model(Util.GenerateModel(typeof (PO10401_pgLotTrans_Result),"mdlLotTrans","",true))
            .Proxy(
                X.AjaxProxy()
                .Url(Url.Action("GetLotTrans", "PO10401"))
                .ActionMethods(action => action.Read = HttpMethod.POST)
                .Reader(X.JsonReader().Root("data"))
            )            
            .Parameters(ps => {
                ps.Add(new StoreParameter("branchID", "App.txtBranchID.getValue()", ParameterMode.Raw));
                ps.Add(new StoreParameter("batNbr", "App.txtBatNbr.getValue()", ParameterMode.Raw));
                ps.Add(new StoreParameter("rcptNbr", "App.txtRcptNbr.getValue()", ParameterMode.Raw));
                ps.Add(new StoreParameter("poNbr", "App.txtPONbr.getValue()", ParameterMode.Raw));
                ps.Add(new StoreParameter("type", "App.cboRcptType.getValue()", ParameterMode.Raw));
            })
            
        )



        @(X.Store().ID("stoPO10401_pgLoadTaxTrans").AutoLoad(false)   
                                .Model(Util.GenerateModel(typeof(PO10401_pgLoadTaxTrans_Result), "ModelPO10401_pgLoadTaxTrans_Result", ""))                                 
                                .Proxy(
                                        X.AjaxProxy()                
                                        .Url(Url.Action("GetPO10401_pgLoadTaxTrans", "PO10401"))                
                                        .ActionMethods(action =>
                                        {
                                            action.Read = HttpMethod.POST;
                                        })
                                        .Reader(X.JsonReader().Root("data").TotalProperty("totaldata"))
                                    ) 
                                .Parameters(ps =>
                                                {
                                                    ps.Add(new StoreParameter("branchID", "App.txtBranchID.getValue()", ParameterMode.Raw));
                                                    ps.Add(new StoreParameter("batNbr", "App.txtBatNbr.getValue()", ParameterMode.Raw));
                                                    ps.Add(new StoreParameter("rcptNbr", "App.txtRcptNbr.getValue()", ParameterMode.Raw));
                                                })
                            .Listeners(p => p.Load.Handler = "loadstoPO10401_pgLoadTaxTrans();")       
   
        )
         <!-- End Cac store phu thuoc vao txtBatNbr-->
         <!-- Begin Cac store phu thuoc vao cboBranchID-->
        @HQ.Store().ID("stoPO10401_pdOM_UserDefault").HQProcedure("PO10401_pdOM_UserDefault").HQDBSys(false).AutoLoad(false).HQParam(new StoreParameterCollection() {
											                            new StoreParameter() { Name = "@UserID", Value = "HQ.userName", Mode = ParameterMode.Raw}
                                                                        ,new StoreParameter() { Name = "@BranchID", Value = "App.txtBranchID.getValue()", Mode = ParameterMode.Raw}
						                            }).LoadData()

        @HQ.Store().ID("stoPO10401_pdPO_Setup").HQProcedure("PO10401_pdPO_Setup").AutoLoad(false).HQDBSys(false).HQParam(new StoreParameterCollection() {
											                            new StoreParameter() { Name = "@UserID", Value ="HQ.userName", Mode = ParameterMode.Raw}
                                                                        ,new StoreParameter() { Name = "@BranchID", Value = "App.txtBranchID.getValue()", Mode = ParameterMode.Raw}
						                            }).LoadData()

        

        <!-- End Cac store phu thuoc vao cboBranchID-->
        
        @(HQ.Store().ID("stoPO10401_pdAP_VenDorTaxes").AutoLoad(false)   
            .Model(Util.GenerateModel(typeof(PO10401_pdAP_VenDorTaxes_Result), "PO10401_pdAP_VenDorTaxes_ResultModel", "taxid"))          
            .Proxy(
                    X.AjaxProxy()                
                    .Url(Url.Action("GetAP_VendorTax", "PO10401"))                
                    .ActionMethods(action =>
                    {
                        action.Read = HttpMethod.POST;
                    })
                    .Reader(X.JsonReader().Root("data").TotalProperty("totaldata"))
                ) 
            .Parameters(ps =>
                            {
                                ps.Add(new StoreParameter("vendID", "App.txtVendID.getValue()", ParameterMode.Raw));
                                ps.Add(new StoreParameter("ordFromId", "", ParameterMode.Value));
                            })          
        )

        @HQ.Store().ID("stoPO10401_pdSI_Tax").HQProcedure("PO10401_pdSI_Tax").HQDBSys(false).HQParam(new StoreParameterCollection() {
											                            new StoreParameter() { Name = "@UserID", Value ="HQ.userName", Mode = ParameterMode.Raw}
                                                                
						                            }).LoadData().Listeners(lst => { lst.Load.Handler = "loadPO10401_pdSI_Tax()"; }).AutoLoad(true)

        @HQ.Store().ID("stoPO10401_pdIN_Inventory").HQProcedure("PO10401_pdIN_Inventory").HQDBSys(false).HQParam(new StoreParameterCollection() {
											                            new StoreParameter() { Name = "@UserID", Value ="HQ.userName", Mode = ParameterMode.Raw}
                                                                
						                            }).LoadData().Listeners(lst => { lst.Load.Handler = "loadPO10401_pdIN_Inventory()"; }).AutoLoad(true)

        @(HQ.Store().ID("stoPO10401_pdIN_UnitConversion").HQProcedure("PO10401_pdIN_UnitConversion").HQDBSys(false).LoadData()
                        .Listeners(lst => { lst.Load.Handler = "loadPO10401_pdIN_UnitConversion()"; }).AutoLoad(true))


        @(X.Store().ID("stoPO10401_ppCheckingPONbr").AutoLoad(false)   
            .Model(Util.GenerateModel(typeof(PO10401_ppCheckingPONbr_Result), "PO10401_ppCheckingPONbrModel", "PONbr"))          
            .Proxy(
                    X.AjaxProxy()                
                    .Url(Url.Action("GetPO10401_ppCheckingPONbr", "PO10401"))                
                    .ActionMethods(action =>
                    {
                        action.Read = HttpMethod.POST;
                    })
                    .Reader(X.JsonReader().Root("data").TotalProperty("totaldata"))
                ) 
            .Parameters(ps =>
                            {
                                ps.Add(new StoreParameter("branchID", "App.txtBranchID.getValue()", ParameterMode.Raw));
                                ps.Add(new StoreParameter("poNbr", "App.txtPONbr.getValue()", ParameterMode.Raw));
                            })  
              
        )

      

        
      
        @X.GridFilters() <!--Khi cache cho grid-->
        @X.ProgressBarPager() <!--Khi cache cho grid -->

        <!-- Gọi hàm Body trong PO10401Controller để dựng view Body.cshtml, mục đích tạo cache. -->
        @{ Html.RenderAction("Body", new { lang = Current.LangID }); }
    </body>
</html>