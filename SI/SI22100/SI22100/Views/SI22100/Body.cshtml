@using Ext.Net;
@using Ext.Net.MVC;
@using HQ.eSkyFramework;
@using HQ.eSkyFramework.HQControl;
@using SI22100;
@{
    Layout = null;
    var X = Html.X();
    var HQ = Html.HQ();
}

@(Html.X()
.Viewport()
.Layout(LayoutType.Fit)
.Items(
    X.FormPanel()
        .ID("frmFirst") //Form First
        .BodyPadding(0)
        .TrackResetOnLoad(true)
        .KeyMap(Util.SetupKeyMap())
        .Layout(LayoutType.Border)
        .TopBar(Util.SetupToolbar(new AbstractComponent[]{
        X.FileUploadField()
            .ID("btnImport")
            .ButtonText("Import")
            .ButtonOnly(true)
            .Icon(Icon.BookAdd)
            .Listeners(p=>{
                p.Change.Fn = "btnImport_Click";              
            })
        , X.Button()
            .ID("btnExport")
            .Text(Util.GetLang("Export"))
            .Icon(Icon.ArrowTurnRight)
            .Listeners(p=>{p.Click.Fn = "btnExport_Click";})}, "print,save,Delete", true, "menuFirstClick"))
        .FieldDefaults(act => { act.LabelAlign = LabelAlign.Right; act.LabelWidth = 130; })
        .Listeners(lst => lst.BoxReady.Fn = "frmFirst_BoxReady")
        .Items
        (
            X.Panel()
                .Region(Region.North)
                .Border(false)
                .Items
                (
                    X.Panel().Border(false)
                    .Region(Region.North)
                    .Layout(LayoutType.HBox)
                    .MarginSpec("5 0 5 0")
                    .Items
                    (
                        HQ.TextBox().ID("txtSearch").Name("txtSearch").HQLangCode("SI22100Search").DataIndex("Type").Width(300).MarginSpec("25 0 0 0")
                        , X.FieldSet().Layout(LayoutType.VBox).MarginSpec("5").MinWidth(250).Title(Util.GetLang("OM22100QueryDate")).StyleSpec("white-space:nowrap;")
                            .LayoutConfig(new VBoxLayoutConfig { Align = VBoxAlign.Stretch, Pack = BoxPack.Center })
                            .Items
                            (

                                HQ.DateField().ID("dtpFromDay").Name("FromDay").Format(Current.FormatDate).HQLangCode("SI22100FromDate") // Từ Ngày
                                    .DataIndex("FromDay").Width(300).AllowBlank(false).MaxLength(200)
                                    .Listeners(lst =>
                                    {
                                        lst.TriggerClick.Handler = "if (index == 0) { this.focus(true);this.clearValue(); }";
                                        lst.Change.Fn = "dtpFromDay_Change";
                                    })
                                    .Triggers(new FieldTrigger() { Icon = TriggerIcon.Clear, HideTrigger = false })
                                , HQ.DateField()
                                    .ID("dtpToDay")
                                    .Name("ToDay")
                                    .Format(Current.FormatDate)
                                    .HQLangCode("SI22100ToDate") // Đến ngày
                                    .DataIndex("ToDay")
                                    .Width(300)
                                    .AllowBlank(false)
                                    .MaxLength(200)
                                    .Listeners(lst =>
                                    {
                                        lst.TriggerClick.Handler = "if (index == 0) { this.focus(true);this.setValue(''); }";
                                    })
                                    .Triggers(new FieldTrigger() { Icon = TriggerIcon.Clear, HideTrigger = false })
                            )
                        , HQ.Button()
                            .ToolTip(Util.GetLang("btnLoadData")) // Đọc dữ liệu
                            .HQLangCode("LoadData")
                            .Width(140)
                            .Icon(Icon.ArrowRefresh)
                            .MarginSpec("25 0 0 0")
                            .Listeners(p => p.Click.Fn = "btnLoadData_Click")
                    )

                )
              , X.Panel()
                    .Layout(LayoutType.Fit)
                    .Region(Region.Center)
                    .Items
                    (
                        X.GridPanel()
                            .Scroll(ScrollMode.Both)
                            .ID("grdQuestList")
                            .View(X.GridView()
                            .TrackOver(false))
                            .Store
                            (
                                X.Store()
                                .PageSize(50)
                                .AutoLoad(false)
                                .ID("stoQuestList")
                                .ServerProxy(X.AjaxProxy().Url(Url.Action("GetQuestionID")))
                                .Model(Util.GenerateModel(typeof(SI22100_pgLoadGrid_Result), "mdlQuestionListID", "", false))
                                .Parameters(ps =>
                                {
                                    ps.Add(new StoreParameter("QuestListID", "App.txtSearch.getValue()", ParameterMode.Raw));//String
                                    ps.Add(new StoreParameter("FromDate", "App.dtpFromDay.getValue()", ParameterMode.Raw)); //DateTime
                                    ps.Add(new StoreParameter("ToDate", "App.dtpToDay.getValue()", ParameterMode.Raw));//DateTime

                                })
                            )
                            .SortableColumns(false)
                            .ColumnModel
                            (
                                X.RowNumbererColumn()
                                .ID("hihi")
                                .DataIndex("hihi")
                                .Width(30)
                                , X.CommandColumn()
                                    .Text(Util.GetLang("SI22100Change"))
                                    .Align(Alignment.Center)
                                    .Width(50)
                                    .Commands
                                    (
                                        X.GridCommand().Icon(Icon.BookEdit).CommandName("Edit_Click")
                                    )
                                    .Listeners(l => l.Command.Handler = "btnEdit_Click(record);")
                                , X.Column()
                                    .Text(Util.GetLang("QuestListID")) // Mã Bộ Câu Hỏi
                                    .DataIndex("QuestListID")
                                    .Width(100)
                                , X.Column()
                                    .Text(Util.GetLang("QuestTListDescr")) //Diễn Giải
                                    .DataIndex("QuestTListDescr")
                                    .Width(200)
                                , X.Column()
                                    .Text(Util.GetLang("SI22100Type")) //Loại Trả Lời
                                    .DataIndex("TypeDescr")
                                    .Width(100)
                                , X.Column()
                                    .Text(Util.GetLang("Status"))//Trạn Thái
                                    .DataIndex("StatusDescr")
                                    .Width(100)
                                , X.DateColumn()
                                    .Text(Util.GetLang("Crtd_Datetime")) //Ngày Tạo
                                    .DataIndex("Crtd_Datetime")
                                    .Format(Current.FormatDate)
                                    .Width(90)
                                , X.DateColumn()
                                    .Text(Util.GetLang("LUpd_Datetime")) //Ngày Cập Nhật
                                    .DataIndex("LUpd_Datetime")
                                    .Format(Current.FormatDate)
                                    .Width(100)
                            )
                            .BottomBar
                            (
                                X.PagingToolbar()
                                .Items(
                                    X.Label("Page size:"),
                                    X.ToolbarSpacer(10),
                                    X.ComboBox()
                                    .Width(80)
                                    .Items("1", "2", "10", "20", "30", "50")
                                    .SelectedItems("50")
                                    .Listeners(l =>
                                        {
                                            l.Select.Fn = "HQ.grid.onPageSelect";
                                        })
                                )
                                .Plugins(X.ProgressBarPager())
                            )
                            .Plugins
                            (
                                X.CellEditing()
                                .ClicksToEdit(1)
                                .Listeners(ls =>
                                {

                                })
                            )
                            .Features
                            (
                                X.GridFilters()
                                    .Local(true)
                                    .Filters
                                    (
                                        X.StringFilter().DataIndex("QuestListID"),
                                        X.StringFilter().DataIndex("QuestTListDescr"),
                                        X.StringFilter().DataIndex("Type"),
                                        X.StringFilter().DataIndex("Status"),
                                        X.StringFilter().DataIndex("Crtd_Datetime"),
                                        X.StringFilter().DataIndex("LUpd_Datetime")
                                    )
                            )
                    )
        )
    , X.FormPanel()
        .Hidden(true)
        .ID("frmMain")
        .Closable(true)
        .AutoScroll(true)
        .BodyPadding(0)
        .TrackResetOnLoad(true)
        .KeyMap(Util.SetupKeyMap())
        .CloseAction(CloseAction.Hide)
        //.TopBar(Util.SetupToolbar("Print", true, ""))
        .TopBar(Util.SetupToolbar(new AbstractComponent[]{}, "Print", true, ""))
        .Layout(LayoutType.Border)
        .FieldDefaults(act => { act.LabelAlign = LabelAlign.Right; act.LabelWidth = 150; })
        .Listeners(l =>
        {
            l.BeforeClose.Fn = "btnHome_Click";
            l.BoxReady.Handler = "firstLoad()";
            l.FieldChange.Fn = "frmChange";
        })
        .Items(
        ////Thiet ke giao dien o day
        X.Panel()
            .ID("pnlHeader")  ////////////////Header//////////////// 
            .Region(Region.North)
            .Layout(LayoutType.VBox)
            .AutoScroll(true)
            .Items(
                  X.Container().Layout(LayoutType.HBox).MarginSpec("5 0 0 0")
                    .Items(
                            HQ.Combo().ID("cboQuestListID")
                            .Name("cboQuestListID")
                            .HQLangCode("SI22100Question")
                            .Tag("X")
                            .Width(300)
                            .MaxLength(30)
                            .EnforceMaxLength(true)
                            .HQProcedure("SI22100_pcListID")
                            .HQColumnShow("Stt,QuestListID,QuestTListDescr")
                            .DisplayField("QuestListID")
                            .ValueField("QuestListID")
                            .HQHeightWidth(400, 250)
                            .ForceSelection(false).AllowBlank(false)
                            .HQParam(new StoreParameterCollection() 
                            { 
                                new StoreParameter() { Name = "@CpnyID", Value = "HQ.cpnyID", Mode = ParameterMode.Raw },
                                new StoreParameter() { Name = "@UserName", Value = "HQ.userName", Mode = ParameterMode.Raw },
                                new StoreParameter() { Name = "@LangID", Value = "HQ.langID", Mode = ParameterMode.Raw }
                            })
                            .LoadData()
                            .Triggers(new FieldTrigger() { Icon = TriggerIcon.Clear, HideTrigger = false })
                            .Listeners(lst =>
                            {
                                lst.TriggerClick.Handler = "   if (HQ.isChange) {HQ.message.show(150, '', ''); } else if(index == 0){ this.focus(true);this.clearValue(); }";
                                lst.Blur.Fn = "cboQuestListID_Blur";
                                lst.Change.Fn = "cboQuestListID_Change";
                                lst.Select.Fn = "cboQuestListID_Select";
                            })
                        , HQ.Combo().ID("cboStatus").Name("Status").HQLangCode("Status").DataIndex("Status")
                        .Tag("X").Width(300).MaxLength(50).EnforceMaxLength(true)
                        .HQProcedure("SI22100_pcStatus")
                        .HQColumnShow("Code,Descr").DisplayField("Descr").ValueField("Code")
                        .HQHeightWidth(400, 250).ReadOnly(true)
                        .ForceSelection(true).AllowBlank(false)
                        .HQParam(new StoreParameterCollection() 
                        { 
                            new StoreParameter() { Name = "@CpnyID", Value = "HQ.cpnyID", Mode = ParameterMode.Raw },
                            new StoreParameter() { Name = "@UserName", Value = "HQ.userName", Mode = ParameterMode.Raw },
                            new StoreParameter() { Name = "@LangID", Value = "HQ.langID", Mode = ParameterMode.Raw }
                        })
                        .LoadData()
                        .Triggers(new FieldTrigger() { Icon = TriggerIcon.Clear, HideTrigger = false })
                        .Listeners(lst =>
                        {
                            lst.TriggerClick.Handler = "if (index == 0) { this.focus(true);this.clearValue(); }";
                            lst.Change.Fn = "cboStatus_Change";
                        })
                    )
                    , X.Container().Layout(LayoutType.HBox).MarginSpec("5 0 5 0")
                    .Items(
                            HQ.Combo().ID("cboType").HQLangCode("SI22100Type").Tag("X").Width(300).Name("cboType")
                            .HQProcedure("SI22100_pcType").DataIndex("Type")
                            .HQColumnShow("Code,Descr").DisplayField("Descr").ValueField("Code")
                            .HQHeightWidth(400, 250).Tag("X")
                            .ForceSelection(true).AllowBlank(false)
                            .HQParam(new StoreParameterCollection() 
                            { 
                                new StoreParameter() { Name = "@CpnyID", Value = "HQ.cpnyID", Mode = ParameterMode.Raw },
                                new StoreParameter() { Name = "@UserName", Value = "HQ.userName", Mode = ParameterMode.Raw },
                                new StoreParameter() { Name = "@LangID", Value = "HQ.langID", Mode = ParameterMode.Raw }
                            })
                            .LoadData()
                            .Triggers(new FieldTrigger() { Icon = TriggerIcon.Clear, HideTrigger = false })
                            .Listeners(lst =>
                            {
                                lst.TriggerClick.Handler = "if (index == 0) { this.focus(true);this.clearValue(); }";
                                lst.Focus.Fn = "checkFocus";

                            })

                            , HQ.Combo().ID("cboHandle").HQLangCode("Handle").Tag("X").Width(300).Name("cboHandle")
                            .HQProcedure("SI22100_pcHandle")
                            .HQColumnShow("Code,Descr").DisplayField("Descr").ValueField("Code")
                            .HQHeightWidth(400, 250)
                            .ForceSelection(true)
                            .HQParam(new StoreParameterCollection() 
                            { 
                                new StoreParameter() { Name = "@Status", Value = "App.cboStatus.getValue()", Mode = ParameterMode.Raw },
                                new StoreParameter() { Name = "@CpnyID", Value = "HQ.cpnyID", Mode = ParameterMode.Raw },
                                new StoreParameter() { Name = "@UserName", Value = "HQ.userName", Mode = ParameterMode.Raw },
                                new StoreParameter() { Name = "@LangID", Value = "HQ.langID", Mode = ParameterMode.Raw }
                            })
                            .LoadData()
                            .Triggers(new FieldTrigger() { Icon = TriggerIcon.Clear, HideTrigger = false })
                            .Listeners(lst =>
                            {
                                lst.TriggerClick.Handler = "if (index == 0) { this.focus(true);this.clearValue(); }";
                                lst.Focus.Fn = "checkFocus";
                                //lst.Change.Fn = "cboQuestListID_Change";
                                //lst.Select.Fn = "cboQuestListID_Select";
                            })
                    )
                , X.Container().Layout(LayoutType.HBox).MarginSpec("5 0 5 0")
                    .Items(
                            HQ.TextBox().ID("txtDescr").Name("txtDescr").HQLangCode("QuestListDescr").Width(600).MaxLength(500).EnforceMaxLength(true).DataIndex("QuestTListDescr").AllowBlank(false)
                            .Listeners(lst =>
                                {
                                    lst.Focus.Fn = "checkFocus";
                                })
                    )
            )
            .Listeners(lst =>
            {
                lst.Render.Handler = "HQ.common.control_render(this,'header')";
            })
            , X.TabPanel().ID("tabQuestion")
            .Region(Region.Center)
            .Items(
              X.Panel().ID("pnlQuestion").Title(Util.GetLang("Question"))
                .Region(Region.Center)
                .Border(false)
                .Layout(LayoutType.Fit)
                .Items(
                X.GridPanel().ID("grdQuestion").AutoScroll(true)
                    .SelectionMemory(false)
                    .RowLines(true).Region(Region.North).Flex(1).Split(true)
                    .SortableColumns(false)
                    .Listeners(lst =>
                    {
                        lst.CellClick.Fn = "loadDetail";
                        lst.Render.Handler = "HQ.common.control_render(this,'Question')";
                    })
                    .Store(
                        X.Store()
                        .ID("stoQuestion")
                        .PageSize(50)
                        .Model(Util.GenerateModel(typeof(SI22100_pgQuestion_Result), "mdlQuestion", ""))
                        .Parameters(ps =>
                        {
                            ps.Add(new StoreParameter("questListID", "App.cboQuestListID.getValue()", ParameterMode.Raw));

                        })
                        .ServerProxy(X.AjaxProxy().Url(Url.Action("GetQuestion"))).AutoLoad(false)
                        .Listeners(l =>
                        {
                            l.BeforeLoad.Fn = "stoBeforeLoad";
                            l.Load.Fn = "stoQuestion_Load";
                            l.Update.Fn = "frmChange";
                        })
                    )
                    .ColumnModel(
                        X.RowNumbererColumn().Width(30)
                        , X.Column()
                            .Text(Util.GetLang("SI22100QuestID")) // Mã số câu hỏi
                            .DataIndex("QuestID").Width(150).Editor(HQ.TextBox().MaxLength(30).EnforceMaxLength(true))
                        , X.Column()
                            .ID("QuestDescr")
                            .Text(Util.GetLang("QuestionDescr")) // Nội dung câu hỏi
                            .DataIndex("QuestDescr").Width(250).Editor(HQ.TextBox().MaxLength(500).EnforceMaxLength(true))
                        , X.CommandColumn().Width(150)
                            .Commands(
                                 X.GridCommand()
                                    .Text(Util.GetLang("Reject"))
                                    .ToolTip(t => t.Text = Util.GetLang("Rejectrowchanges"))
                                    .CommandName("reject")
                                    .Icon(Icon.ArrowUndo)
                            )
                            .PrepareToolbar(t => t.Handler = "toolbar.items.get(0).setVisible(record.dirty);")
                            .Listeners(l => l.Command.Handler = "grdQuestion_Reject(record);")
                    )
                    .SelectionModel(X.RowSelectionModel().ID("slmQuestion").Mode(SelectionMode.Single))
                    .BottomBar(
                        X.PagingToolbar()
                            .Items(
                                X.Label("Page size:"),
                                X.ToolbarSpacer(10),
                                X.ComboBox()
                                .Width(80)
                                .Items("1", "2", "10", "20", "30", "50")
                                .SelectedItems("50")
                                .Listeners(l =>
                                    {
                                        l.Select.Fn = "HQ.grid.onPageSelect";
                                    })
                                )
                            .Plugins(X.ProgressBarPager())
                    )
                    .Plugins(
                        X.CellEditing()
                            .ClicksToEdit(1)
                            .Listeners(ls =>
                            {
                                ls.BeforeEdit.Fn = "grdQuestion_BeforeEdit";
                                ls.Edit.Fn = "grdQuestion_Edit";
                                ls.ValidateEdit.Fn = "grdQuestion_ValidateEdit";
                            })
                        )
                    .Features(
                     X.GridFilters()
                            .Local(true)
                            .Filters(
                                    X.StringFilter()
                                    .DataIndex("QuestID")
                                    , X.StringFilter()
                                    .DataIndex("QuestDescr")
                            )
                    )
                
                )// pannel 
            )// tabPannel
            , X.TabPanel()
                .Layout(LayoutType.Fit)
                .ID("tabQuestion2")
                .Region(Region.South)
                .Height(200)
                .Items(
                    X.Panel().ID("pnlAnswer").Title(Util.GetLang("AnswerDescr"))
                    .Region(Region.Center)
                    .Border(false)
                    .Layout(LayoutType.Fit)
                    .Items(
                         X.GridPanel()
                            .ID("grdAnswer")
                            .AutoScroll(true)
                            .SelectionMemory(false)
                            .RowLines(true).Region(Region.Center)
                            .SortableColumns(false)
                            .Store(
                                X.Store()
                                .ID("stoAnswer")
                                .PageSize(50)
                                .Model(Util.GenerateModel(typeof(SI22100_pgAnswer_Result), "mdlAnswer", ""))
                                .Parameters(ps =>
                                {
                                    ps.Add(new StoreParameter("questListID", "App.cboQuestListID.getValue()", ParameterMode.Raw));
                                })
                                .ServerProxy(X.AjaxProxy().Url(Url.Action("GetAnswer"))).AutoLoad(false)
                                .Listeners(l =>
                                {
                                    l.Load.Fn = "stoAnswer_Load";
                                    l.Update.Fn = "frmChange";
                                })
                            )
                            .Listeners(lst => lst.Render.Handler = "HQ.common.control_render(this,'Detail');")
                            .ColumnModel(
                                X.RowNumbererColumn().Width(30)
                                , X.Column().Text(Util.GetLang("AnswerDescr"))
                                    .DataIndex("AnswerDescr") // Đáp án
                                    .Width(150)
                                    .Editor(HQ.TextBox()
                                    .MaxLength(500)
                                    .EnforceMaxLength(true))
                                , X.CheckColumn()
                                .Filterable(true)
                                    .HideTitleEl(false)
                                    .DataIndex("Correct")
                                    .Text(Util.GetLang("Correct")) // Đáp án đúng
                                    .Align(Alignment.Center)
                                    .Width(150)
                                    .Editable(true)
                                , X.CommandColumn().Width(150)
                                    .Commands(
                                         X.GridCommand()
                                            .Text(Util.GetLang("Reject"))
                                            .ToolTip(t => t.Text = Util.GetLang("Rejectrowchanges"))
                                            .CommandName("reject")
                                            .Icon(Icon.ArrowUndo)
                                )
                                .PrepareToolbar(t => t.Handler = "toolbar.items.get(0).setVisible(record.dirty);")
                                .Listeners(l => l.Command.Handler = "grdAnswer_Reject(record);")
                                )
                                .SelectionModel(X.RowSelectionModel().ID("slmAnswer").Mode(SelectionMode.Multi))
                                .BottomBar
                                (
                                    X.PagingToolbar()
                                        .Items(
                                            X.Label("Page size:"),
                                            X.ToolbarSpacer(10),
                                            X.ComboBox()
                                            .Width(80)
                                            .Items("1", "2", "10", "20", "30", "50")
                                            .SelectedItems("50")
                                            .Listeners(l =>
                                                {
                                                    l.Select.Fn = "HQ.grid.onPageSelect";
                                                })
                                            )
                                        .Plugins(X.ProgressBarPager())
                                )
                                .Plugins(
                                    X.CellEditing()
                                        .ClicksToEdit(1)
                                        .Listeners(ls =>
                                        {
                                            ls.BeforeEdit.Fn = "grdAnswer_BeforeEdit";
                                            ls.Edit.Fn = "grdAnswer_Edit";
                                            ls.ValidateEdit.Fn = "grdAnswer_ValidateEdit";
                                        })
                                    )
                                .Features(
                                 X.GridFilters()
                                        .Local(true)
                                        .Filters(
                                            X.ListFilter().DataIndex("QuestListID"),
                                            X.ListFilter().DataIndex("QuestID")

                                            , X.StringFilter().DataIndex("AnswerDescr")
                                            , X.BooleanFilter().DataIndex("Correct")
                                        )
                                )
                            )
                        )
             )// frmMain
        )
)