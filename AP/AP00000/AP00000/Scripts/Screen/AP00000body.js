Ext.net.ResourceMgr.init({ isMVC: true }); Ext.onReady(function () { Ext.ns("App.direct"); Ext.apply(App.direct, { CallMessageTimeOut: function (config) { return Ext.net.DirectMethod.request("CallMessageTimeOut", Ext.applyIf(config || {}, { url: "/HQ/CallMessageTimeOut" })); }, CallMessage: function (code, parm, fn, config) { return Ext.net.DirectMethod.request("CallMessage", Ext.applyIf(config || {}, { params: { code: code, parm: parm, fn: fn }, url: "/HQ/CallMessage" })); }, CallMessageArray: function (code, parm, fn, config) { return Ext.net.DirectMethod.request("CallMessageArray", Ext.applyIf(config || {}, { params: { code: code, parm: parm, fn: fn }, url: "/HQ/CallMessageArray" })); }, PlayMedia: function (PathVideo, fileVideo, config) { return Ext.net.DirectMethod.request("PlayMedia", Ext.applyIf(config || {}, { params: { PathVideo: PathVideo, fileVideo: fileVideo }, url: "/HQ/PlayMedia" })); } }); window.App.stoAP00000Header = Ext.create("Ext.data.Store", { model: Ext.define("App.mdlAP_Setup", { extend: "Ext.data.Model", fields: [{ name: "BranchID", type: "string" }, { name: "SetupID", type: "string" }, { name: "DfltBankAcct", type: "string" }, { name: "ClassID", type: "string" }, { name: "LastBatNbr", type: "string" }, { name: "LastRefNbr", type: "string" }, { name: "LastPaymentNbr", type: "string" }, { name: "PreFixBat", type: "string" }, { name: "TranDescDflt", type: "string" }, { name: "terms", type: "string" }, { name: "tstamp", type: "string" }, { name: "ReqPPPONbr", type: "boolean" }, { name: "EntityState" }, { name: "EntityKey" }], idProperty: "BrandID" }), storeId: "stoAP00000Header", readParameters: function (operation) { return { apply: { "branchId": HQ.cpnyID, "setupID": "AP" } }; }, proxy: { type: "ajax", reader: { type: "json", root: "data", totalProperty: "totaldata" }, url: "AP00000/GetAP00000Header", actionMethods: Ext.apply({}, { read: "POST" }, Ext.data.proxy.Ajax.prototype.actionMethods) }, listeners: { beforeload: { fn: stoBeforeLoad }, load: { fn: stoLoad } } }); Ext.create("Ext.container.Viewport", { renderTo: Ext.getBody(), items: [{ id: "frmMain", xtype: "form", keyMap: { binding: [{ ctrl: true, alt: true, handler: function () { menuClick('save'); }, key: "S" }, { ctrl: true, alt: true, handler: function () { menuClick('delete'); }, key: "D" }, { ctrl: true, alt: true, handler: function () { menuClick('new'); }, key: "N" }, { ctrl: true, alt: true, handler: function () { menuClick('print'); }, key: "P" }, { ctrl: true, handler: function () { menuClick('first'); }, key: "Up" }, { ctrl: true, handler: function () { menuClick('prev'); }, key: "Left" }, { ctrl: true, handler: function () { menuClick('last'); }, key: "Down" }, { ctrl: true, handler: function () { menuClick('next'); }, key: "Right" }], target: Ext.getBody() }, items: [{ id: "pnlHeader", region: "north", autoScroll: true, items: [{ margin: "10 0 0 0", xtype: "container", items: [{ id: "txtLastRefNbr", margin: "5 0 0 0", width: 400, xtype: "textfield", fieldLabel: HQ.common.getLang('LASTREFNBR'), name: "txtLastRefNbr", dataIndex: "LastRefNbr", allowBlank: false, enforceMaxLength: true, maskRe: /[0-9]/, maxLength: 10 }, { id: "txtLastBatNbr", margin: "5 0 0 0", width: 400, xtype: "textfield", fieldLabel: HQ.common.getLang('LASTBATNBR'), name: "txtLastBatNbr", dataIndex: "LastBatNbr", allowBlank: false, enforceMaxLength: true, maskRe: /[0-9]/, maxLength: 10 }, { id: "txtLastPaymentNbr", margin: "5 0 0 0", width: 400, xtype: "textfield", fieldLabel: HQ.common.getLang('LASTPAYMENTNBR'), name: "txtLastPaymentNbr", dataIndex: "LastPaymentNbr", allowBlank: false, enforceMaxLength: true, maskRe: /[0-9]/, maxLength: 10 }, { id: "txtPreFixBat", margin: "5 0 0 0", width: 400, xtype: "textfield", fieldLabel: HQ.common.getLang('PREFIX'), name: "txtPreFixBat", dataIndex: "PreFixBat", enforceMaxLength: true, maxLength: 2 }, { id: "cboClassID", margin: "5 0 0 0", width: 400, xtype: "combobox", fieldLabel: HQ.common.getLang('CLASSID'), labelAlign: "right", name: "cboClassID", dataIndex: "ClassID", triggersConfig: [{ iconCls: Ext.form.field.Trigger.getIcon("Clear") }], editable: false, matchFieldWidth: false, delimiter: ",", displayField: "Descr", listConfig: { height: 400, tpl: Ext.create("Ext.net.XTemplate", { html: ["<tpl for='.'>", "<tpl if='[xindex] == 1'>", "<div class=\"ComboXtemplate\">", "<table>", "<tr ><th>" + HQ.common.getLang('CLASSID') + "</th><th>" + HQ.common.getLang('DESCR') + "</th></tr>", "</tpl>", "<tr class='x-boundlist-item' ><td>{ClassID}</td><td>{Descr}</td></tr>", "<tpl if='[xcount-xindex] == 0'>", "</table>", "</div>", "</tpl>", "</tpl>"] }), width: 300, itemSelector: ".x-boundlist-item", loadingText: HQ.common.getLang('LOADING') }, queryMode: "local", valueField: "ClassID", store: { model: Ext.define(Ext.id(), { extend: "Ext.data.Model", fields: [{ name: "ClassID", mapping: "ClassID", type: "string" }, { name: "Descr", mapping: "Descr", type: "string" }] }), storeId: "cboClassIDAP00000_pcClassID", autoLoad: true, readParameters: function (operation) { return { apply: { "procName": "AP00000_pcClassID", "sys": "False" } }; }, proxy: { type: "ajax", reader: { type: "json", root: "data", totalProperty: "totaldata" }, timeout: 2147483647, url: "HQ/GetData", actionMethods: Ext.apply({}, { read: "POST" }, Ext.data.proxy.Ajax.prototype.actionMethods) } }, listeners: { triggerclick: { fn: function (item, trigger, index, tag, e) { if (index == 0) { this.clearValue(); } } }, beforequery: { fn: function (queryEvent) { FilterCombo(this, 'ClassID,Descr') } } } }, { id: "cboTermsID", margin: "5 0 0 0", width: 400, xtype: "combobox", fieldLabel: HQ.common.getLang('TERMSID'), labelAlign: "right", name: "cboTermsID", dataIndex: "terms", triggersConfig: [{ iconCls: Ext.form.field.Trigger.getIcon("Clear") }], editable: false, matchFieldWidth: false, delimiter: ",", displayField: "Descr", listConfig: { height: 400, tpl: Ext.create("Ext.net.XTemplate", { html: ["<tpl for='.'>", "<tpl if='[xindex] == 1'>", "<div class=\"ComboXtemplate\">", "<table>", "<tr ><th>" + HQ.common.getLang('TERMSID') + "</th><th>" + HQ.common.getLang('DESCR') + "</th></tr>", "</tpl>", "<tr class='x-boundlist-item' ><td>{TermsID}</td><td>{Descr}</td></tr>", "<tpl if='[xcount-xindex] == 0'>", "</table>", "</div>", "</tpl>", "</tpl>"] }), width: 300, itemSelector: ".x-boundlist-item", loadingText: HQ.common.getLang('LOADING') }, queryMode: "local", valueField: "TermsID", store: { model: Ext.define(Ext.id(), { extend: "Ext.data.Model", fields: [{ name: "TermsID", mapping: "TermsID", type: "string" }, { name: "Descr", mapping: "Descr", type: "string" }] }), storeId: "cboTermsIDAP00000_pcTerms", autoLoad: true, readParameters: function (operation) { return { apply: { "procName": "AP00000_pcTerms", "sys": "False" } }; }, proxy: { type: "ajax", reader: { type: "json", root: "data", totalProperty: "totaldata" }, timeout: 2147483647, url: "HQ/GetData", actionMethods: Ext.apply({}, { read: "POST" }, Ext.data.proxy.Ajax.prototype.actionMethods) } }, listeners: { triggerclick: { fn: function (item, trigger, index, tag, e) { if (index == 0) { this.clearValue(); } } }, beforequery: { fn: function (queryEvent) { FilterCombo(this, 'TermsID,Descr') } } } }, { id: "cboTranDescDef", margin: "5 0 0 0", width: 400, xtype: "combobox", fieldLabel: HQ.common.getLang('TRANDESCDEF'), labelAlign: "right", name: "cboTranDescDef", dataIndex: "TranDescDflt", triggersConfig: [{ iconCls: Ext.form.field.Trigger.getIcon("Clear") }], editable: false, matchFieldWidth: false, delimiter: ",", displayField: "Descr", listConfig: { height: 400, tpl: Ext.create("Ext.net.XTemplate", { html: ["<tpl for='.'>", "<tpl if='[xindex] == 1'>", "<div class=\"ComboXtemplate\">", "<table>", "<tr ><th>" + HQ.common.getLang('CODE') + "</th><th>" + HQ.common.getLang('DESCR') + "</th></tr>", "</tpl>", "<tr class='x-boundlist-item' ><td>{Code}</td><td>{Descr}</td></tr>", "<tpl if='[xcount-xindex] == 0'>", "</table>", "</div>", "</tpl>", "</tpl>"] }), width: 300, itemSelector: ".x-boundlist-item", loadingText: HQ.common.getLang('LOADING') }, queryMode: "local", valueField: "Code", store: { model: Ext.define(Ext.id(), { extend: "Ext.data.Model", fields: [{ name: "Code", mapping: "Code", type: "string" }, { name: "Descr", mapping: "Descr", type: "string" }] }), storeId: "cboTranDescDefAP00000_pcTranDescDflt", autoLoad: true, readParameters: function (operation) { return { apply: { "param0": HQ.langID, "procName": "AP00000_pcTranDescDflt", "procParam": "@LangID,", "sys": "False" } }; }, proxy: { type: "ajax", reader: { type: "json", root: "data", totalProperty: "totaldata" }, timeout: 2147483647, url: "HQ/GetData", actionMethods: Ext.apply({}, { read: "POST" }, Ext.data.proxy.Ajax.prototype.actionMethods) } }, listeners: { triggerclick: { fn: function (item, trigger, index, tag, e) { if (index == 0) { this.clearValue(); } } }, beforequery: { fn: function (queryEvent) { FilterCombo(this, 'Code,Descr') } } } }, { id: "cboBankAcct", margin: "5 0 0 0", width: 400, xtype: "combobox", fieldLabel: HQ.common.getLang('BANKACCT'), labelAlign: "right", name: "cboBankAcct", dataIndex: "DfltBankAcct", triggersConfig: [{ iconCls: Ext.form.field.Trigger.getIcon("Clear") }], editable: false, matchFieldWidth: false, delimiter: ",", displayField: "CashAcctName", listConfig: { height: 400, tpl: Ext.create("Ext.net.XTemplate", { html: ["<tpl for='.'>", "<tpl if='[xindex] == 1'>", "<div class=\"ComboXtemplate\">", "<table>", "<tr ><th>" + HQ.common.getLang('BANKACCT') + "</th><th>" + HQ.common.getLang('CASHACCTNAME') + "</th></tr>", "</tpl>", "<tr class='x-boundlist-item' ><td>{BankAcct}</td><td>{CashAcctName}</td></tr>", "<tpl if='[xcount-xindex] == 0'>", "</table>", "</div>", "</tpl>", "</tpl>"] }), width: 300, itemSelector: ".x-boundlist-item", loadingText: HQ.common.getLang('LOADING') }, queryMode: "local", valueField: "BankAcct", store: { model: Ext.define(Ext.id(), { extend: "Ext.data.Model", fields: [{ name: "BankAcct", mapping: "BankAcct", type: "string" }, { name: "CashAcctName", mapping: "CashAcctName", type: "string" }, { name: "AcctNbr", mapping: "AcctNbr", type: "string" }] }), storeId: "cboBankAcctAP00000_pcBankAcctCA", autoLoad: true, readParameters: function (operation) { return { apply: { "param0": HQ.cpnyID, "procName": "AP00000_pcBankAcctCA", "procParam": "@BranchID,", "sys": "False" } }; }, proxy: { type: "ajax", reader: { type: "json", root: "data", totalProperty: "totaldata" }, timeout: 2147483647, url: "HQ/GetData", actionMethods: Ext.apply({}, { read: "POST" }, Ext.data.proxy.Ajax.prototype.actionMethods) } }, listeners: { triggerclick: { fn: function (item, trigger, index, tag, e) { if (index == 0) { this.clearValue(); } } }, beforequery: { fn: function (queryEvent) { FilterCombo(this, 'BankAcct,CashAcctName') } } } }], layout: "vbox" }], layout: "vbox" }], layout: "fit", tbar: { id: "toolbar", xtype: "toolbar", items: [{ id: "menuClickbtnRefresh", iconCls: "#ArrowRefresh", tooltip: HQ.common.getLang('BTNREFRESH'), listeners: { click: { fn: function (item, e) { menuClick('refresh'); } } } }, { xtype: "tbseparator" }, { id: "menuClickbtnSave", iconCls: "#Disk", tooltip: HQ.common.getLang('BTNSAVE'), listeners: { click: { fn: function (item, e) { menuClick('save'); } } } }] }, trackResetOnLoad: true, waitMsgTarget: "", fieldDefaults: { labelAlign: "right", labelWidth: 150 }, listeners: { boxready: { fn: function (item, width, height) { firstLoad() } }, fieldchange: { fn: frmChange } } }], layout: "fit" }); Ext.net.ResourceMgr.registerIcon(["ArrowRefresh", "Disk"]); });