@using Ext.Net;
@using Ext.Net.MVC;
@using HQ.eSkyFramework;
@using HQ.eSkyFramework.HQControl;
@using AP10100;
@{
    Layout = null;
    var X = Html.X();
    var HQ = Html.HQ();
}

@(X.Viewport()
.Layout(LayoutType.Fit)
.Items(
    X.FormPanel()
        .ID("frmMain")
        .BodyPadding(0) 
        .TrackResetOnLoad(true)
        .KeyMap(Util.SetupKeyMap())
        .TopBar(Util.SetupToolbar("Print", true, ""))
        .Layout(LayoutType.Border)
        .FieldDefaults(act => { act.LabelAlign = LabelAlign.Right; act.LabelWidth = 150; })
        .Listeners(l=>{
           l.BoxReady.Handler = "firstLoad()";
            l.FieldChange.Fn = "frmChange";
        })
        .Items(
        ////Thiet ke giao dien o day
        X.Panel().ID("pnlHeader")  ////////////////Header//////////////// 
            .Region(Region.North)
            .Layout(LayoutType.VBox)
            .AutoScroll(true)
            //Field header o day
            .Items(
                  X.Container().Layout(LayoutType.HBox).MarginSpec("3 0 0 0")
                    .Items(
                          HQ.Combo().ID("cboBatNbr").Name("cboBatNbr").HQLangCode("BATNBR").HQProcedure("AP10100_pcGetBatch").Width(300)
                            .HQColumnShow("BatNbr,TotAmt,Descr,Status").DisplayField("BatNbr").ValueField("BatNbr").ForceSelection(true).Tag("X")
                            .HQHeightWidth(400, 500).HQAutoLoad(true)
                            .HQDBSys(false)
                            .HQParam(new StoreParameterCollection()
                            {
                                new StoreParameter() { Name = "@BranchID", Value = "HQ.cpnyID", Mode = ParameterMode.Raw },
                                new StoreParameter() { Name = "@ScreenNbr", Value = "AP10100", Mode = ParameterMode.Value }
                            })
                            .LoadData()
                            .Triggers(new FieldTrigger() { Icon = TriggerIcon.Clear, HideTrigger = false })
                            .Listeners(lst =>
                                {
                                    lst.TriggerClick.Handler = "if (index == 0) { this.clearValue();}";
                                    lst.Change.Fn = "cboBatNbr_Change";
                                    //lst.Select.Fn = "cboBatNbr_Select";
                                })

                         ,HQ.TextBox().ID("txtBranchID").Name("txtBranchID").HQLangCode("BRANCHID").ReadOnly(true).Tag("X").Width(300)
                         
                         ,HQ.Combo().ID("cboStatus").Name("Status").HQLangCode("STATUS").HQProcedure("AP10100_pcGetStatus").Width(300)
                            .HQColumnShow("Code,Descr").DisplayField("Descr").ValueField("Code").DataIndex("Status")
                                .HQHeightWidth(400, 200)
                                .HQDBSys(false).ReadOnly(true).Tag("X").HQAutoLoad(true)
                                .HQParam(new StoreParameterCollection()
                                {
                                    new StoreParameter() { Name = "@LangID", Value = "HQ.langID", Mode = ParameterMode.Raw }
                                })
                                .LoadData()
                                .Listeners(lst =>
                                {
                                   lst.Change.Fn = "cboStatus_Change";
                                })           
                    )
                ,X.Container().Layout(LayoutType.HBox).MarginSpec("3 0 3 0")
                    .Items(
                         // xu ly cai nay sau Canncelled Batch
                        HQ.TextBox().ID("txtRvdBatNbr").Name("txtRvdBatNbr").HQLangCode("CANCELLEDBATNBR").DataIndex("RvdBatNbr").ReadOnly(true).Tag("X").Width(300)
                         .ReadOnly(true).Tag("X")    
                        
                       ,HQ.Combo().ID("cboHandle").Name("Handle").HQLangCode("HANDLE").HQProcedure("AP10100_pcGetHandle").Width(300)
                            .Tag("X")    
                            .HQColumnShow("Code,Descr").DisplayField("Descr").ValueField("Code")
                                .HQHeightWidth(400, 300).ForceSelection(true)
                                .HQDBSys(false)
                                .Triggers(new FieldTrigger() { Icon = TriggerIcon.Clear, HideTrigger = false })
                                .HQParam(new StoreParameterCollection()
                                {
                                    new StoreParameter() { Name = "@Status", Value = "App.cboStatus.getValue()", Mode = ParameterMode.Raw },                                               
                                    new StoreParameter() { Name = "@LangID", Value = "HQ.langID", Mode = ParameterMode.Raw }
                                })
                                .LoadData()
                                .Listeners(lst =>
                                {
                                    lst.TriggerClick.Handler = "if (index == 0) { this.clearValue();}";
                                   // lst.Focus.Handler = "this.forceSelection = true;";
                                })
                                
                       ,HQ.NumberField().ID("txtCuryCrTot").Name("txtCuryCrTot").HQLangCode("TOTAMT").DataIndex("TotAmt").DecimalPrecision(0).Width(300)
                         .ReadOnly(true).Tag("X")    
                                               
                    )
            )
            .Listeners(lss =>
            {
            lss.Render.Handler = "HQ.common.control_render(this,'header')";
            })
            
            
     ,X.TabPanel().ID("tabDet")
            .Region(Region.Center)
            .Items( 
                X.Panel().ID("tabDoc")
                .Title(Util.GetLang("DOC"))
                .Region(Region.Center).Border(false)
                .Layout(LayoutType.Border)
                .Items(
                      X.Panel().ID("pnlDOc")  ////////////////Mid/////////////// 
                        .Region(Region.North)
                        .Layout(LayoutType.VBox)
                        //Field header o day
                        .Items(
                             X.Container().Layout(LayoutType.HBox).MarginSpec("3 0 0 0")
                                .Items(
                                      HQ.Combo().ID("cboDocType").Name("cboDocType").HQLangCode("DOCTYPE").HQProcedure("AP10100_pcGetDocType").Width(300)
                                            .HQColumnShow("Descr").DisplayField("Descr").ValueField("Code").DataIndex("DocType").AllowBlank(false)
                                            .HQHeightWidth(400, 300).HQAutoLoad(true)
                                            .HQDBSys(false).ForceSelection(true)
                                            .HQParam(new StoreParameterCollection()
                                            {
                                                new StoreParameter() { Name = "@LangID", Value = "HQ.langID", Mode = ParameterMode.Raw }
                                            })
                                            .LoadData()
                                            .Triggers(new FieldTrigger() { Icon = TriggerIcon.Clear, HideTrigger = false })
                                            .Listeners(lst =>
                                            {
                                                lst.TriggerClick.Handler = "if (index == 0) { this.clearValue();}";
                                            }) 
                                            
                                       ,HQ.Combo().ID("cboVendID").Name("cboVendID").HQLangCode("VENDID").HQProcedure("AP10100_pcGetVendor").Width(300)
                                            .HQColumnShow("VendID,Name,Address,Terms").DisplayField("VendID").ValueField("VendID").DataIndex("VendID").AllowBlank(false)
                                            .HQHeightWidth(400, 500)
                                            .HQDBSys(false).ForceSelection(true).HQAutoLoad(true)
                                            .Triggers(new FieldTrigger() { Icon = TriggerIcon.Clear, HideTrigger = false })
                                            .LoadData()
                                            .Listeners(lst =>
                                            {
                                                lst.TriggerClick.Handler = "if (index == 0) { this.clearValue();}";
                                                lst.Change.Fn = "cboVendID_Change";
                                                
                                            })   
                                       ,HQ.NumberField().ID("txtCuryOrigDocAmt").Name("txtCuryOrigDocAmt").HQLangCode("ORIGDOCAMT").DataIndex("OrigDocAmt").DecimalPrecision(0).ReadOnly(true).Width(300).Tag("X")       
                                )//Container
                                
                               , X.Container().Layout(LayoutType.HBox).MarginSpec("3 0 0 0")                              
                                .Items(                                 
                                    //RefNbr
                                    HQ.TextBox().ID("txtRefNbr").Name("RefNbr").HQLangCode("REFNBR").DataIndex("RefNbr").Width(300)
                                            .MaxLength(200).EnforceMaxLength(true)
                                            .ReadOnly(true).Tag("X")
                                    
                                    //InvcNbr
                                    ,HQ.TextBox().ID("txtInvcNbr").Name("txtInvcNbr").HQLangCode("INVCNBR").DataIndex("InvcNbr").InputWidth(120).Width(225)
                                       .MaxLength(15).EnforceMaxLength(true)
                                    //InvcNote  
                                    ,HQ.TextBox().ID("txtInvcNote").Name("txtInvcNote").DataIndex("InvcNote").InputWidth(75)
                                        .MaxLength(10).EnforceMaxLength(true)
                        
                                    //Currentcy Document
                                    ,HQ.NumberField().ID("txtCuryDocBal").Name("txtCuryDocBal").HQLangCode("CURYDOCBAL").DataIndex("DocBal").DecimalPrecision(0).Width(300)
                                       .ReadOnly(true).Tag("X")     
                             
                            )//end row2
                            
                           , X.Container().Layout(LayoutType.HBox).MarginSpec("3 0 0 0")
                            .Items(                                 
                                //DocDate
                                HQ.DateField().ID("dteDocDate").Name("dteDocDate").HQLangCode("DOCDATE").DataIndex("DocDate").Width(300)
                                    .Value(DateTime.Now).AllowBlank(false)
                                    .Listeners(lst =>
                                    {
                                        lst.Change.Fn = "dteDocDate_Change";
                                    })                                                        
                                //Term
                                ,HQ.Combo().ID("cboTerms").Name("cboTerms").HQLangCode("TERM").HQProcedure("AP10100_pcGetTerms").Width(300)
                                        .HQColumnShow("TermsID,Descr").DisplayField("TermsID").ValueField("TermsID").DataIndex("Terms").AllowBlank(false)
                                        .HQHeightWidth(400, 300)
                                        .HQDBSys(false).ForceSelection(true).HQAutoLoad(true)
                                        .Triggers(new FieldTrigger() { Icon = TriggerIcon.Clear, HideTrigger = false })
                                        .LoadData()
                                        .Listeners(lst =>
                                         {
                                              lst.Change.Fn = "cboTerms_Change";
                                             //lst.Focus.Handler = "this.forceSelection = true;";
                                         })
                            
                                //Invoice Date
                                ,HQ.DateField().ID("dteInvcDate").Name("dteInvcDate").HQLangCode("INVCDATE").DataIndex("InvcDate").AllowBlank(false).Width(300).Value(DateTime.Now)
                                                                           
                            )//end row3
                            
                            ,X.Container().Layout(LayoutType.HBox).MarginSpec("3 0 0 0")
                                .Items(
                                  //PO Number
                                  HQ.TextBox().ID("txtPONbr").Name("txtPONbr").HQLangCode("PONBR").DataIndex("PONbr").Width(300)
                                    .MaxLength(100).EnforceMaxLength(true)
                        
                                  //Recipt No
                                  ,HQ.TextBox().ID("txtRcptNbr").Name("txtRcptNbr").HQLangCode("RCPTNBR").DataIndex("RcptNbr").Width(300)
                                   .MaxLength(15).EnforceMaxLength(true)
                        
                                  //DIscount Date
                                  ,HQ.DateField().ID("dteDiscDate").Name("dteDiscDate").HQLangCode("DISCDATE").DataIndex("DiscDate").Width(300)
                                    .Value(DateTime.Now).AllowBlank(false)
                        
                       
                            )//end row4
                             ,X.Container().Layout(LayoutType.HBox).MarginSpec("3 0 3 0")
                                .Items(
                                 
                                    //DOcument Description
                                    HQ.TextBox().ID("txtDocDescr").Name("txtDocDescr").HQLangCode("DOCDESC").DataIndex("DocDesc").Width(600)
                                    .MaxLength(100).EnforceMaxLength(true).AllowBlank(false)
                        
                                   //Due Date = NowDay + Term xu ly sau
                                   ,HQ.DateField().ID("dteDueDate").Name("dteDueDate").HQLangCode("DUEDATE").DataIndex("DueDate").Width(300)
                                    .Value(DateTime.Now).AllowBlank(false)                                                                           
                               )//end row 5
                        )// pnlDoc//
                        
                        ,X.GridPanel().ID("grdAP_Trans").AutoScroll(true)
                        .SelectionMemory(false)
                        .RowLines(true).Region(Region.Center)
                        .SortableColumns(false)
                        .View(X.GridView().TrackOver(false))
                        .Listeners(lss=>lss.Render.Handler = "HQ.common.control_render(this,'AP_Trans')")
                         .Store(Html.X().Store().ID("stoAP_Trans").AutoLoad(false)
                            .Model(Util.GenerateModel(typeof(AP10100_pgLoadInvoiceMemo_Result), "mdlAP_Trans", ""))
                            .ServerProxy(
                                X.AjaxProxy()
                                .Url(Url.Action("GetAPTrans", "AP10100"))
                                .ActionMethods(action =>
                                {
                                    action.Read = HttpMethod.POST;
                                })
                                .Reader(X.JsonReader().Root("data").TotalProperty("totaldata"))
                                )
                                .Parameters(ps =>
                                        {
                                            ps.Add(new StoreParameter("BranchID", "App.txtBranchID.value", ParameterMode.Raw));
                                            ps.Add(new StoreParameter("BatNbr", "App.cboBatNbr.value", ParameterMode.Raw));
                                            ps.Add(new StoreParameter("RefNbr", "App.txtRefNbr.value", ParameterMode.Raw));
                                        })
                                .Listeners(p =>
                                    {
                                        p.Load.Fn = "stoAPTrans_Load";
                                        p.Update.Fn = "stoChanged";
                                    })
                            )
                         .SortableColumns(false)                                            
                        .ColumnModel(
                                Html.X().RowNumbererColumn().ID("RowNumber")
                            //LineType Column
                                , Html.X().Column().Text(Util.GetLang("LineType")).Width(150).DataIndex("LineType").Renderer("rendererLineType")
                                    .Editor(
                                            HQ.Combo().ID("cboLineType").Name("cboLineType").HQProcedure("AP10100_pcGetLineType")
                                                .HQColumnShow("Code,Descr").DisplayField("Code").ValueField("Code")
                                                .Width(300).HQHeightWidth(500, 300).ForceSelection(true).DataIndex("LineType")
                                                .HQParam(new StoreParameterCollection() { 
                                                        new StoreParameter() { Name = "@LangID", Value = "HQ.langID", Mode = ParameterMode.Raw }
                                                })
                                                .Triggers(new FieldTrigger() { Icon = TriggerIcon.Clear, HideTrigger = false })
                                                .HQDBSys(false)
                                                .LoadData()
                                                .Listeners(lst =>
                                                {
                                                    lst.TriggerClick.Handler = "if (index == 0) { this.clearValue();}";
                                                })

                                        )

                               ,Html.X().Column().Text(Util.GetLang("InvtID")).Width(100).DataIndex("InvtID")
                                        .Editor(
                                            HQ.Combo().ID("cboInvtID").Name("cboInvtID").HQProcedure("AP10100_pcInventoryActiveByBranch")
                                                .HQColumnShow("InvtID,Descr,Descr1,BarCode,Color").DisplayField("InvtID").ValueField("InvtID")
                                                .HQHeightWidth(500, 400).ForceSelection(true).HQAutoLoad(true)
                                                .HQParam(new StoreParameterCollection() { 
                                                    new StoreParameter() { Name = "@BranchID", Value = "HQ.cpnyID", Mode = ParameterMode.Raw }
                                                })
                                                .HQDBSys(false)
                                                .Triggers(new FieldTrigger() { Icon = TriggerIcon.Clear, HideTrigger = false })
                                                .LoadData()
                                                .Listeners(lst =>
                                                {
                                                    lst.TriggerClick.Handler = "if (index == 0) { this.clearValue();}";
                                                })
                                            )
                                //quantity
                                , Html.X().NumberColumn().Format("0,000").ID("txtQty").Text(Util.GetLang("Qty")).DataIndex("Qty").Width(100).Align(Alignment.Right)
                                .Editor(Html.X().NumberField().EnableKeyEvents(true).MinValue(0).DecimalPrecision(0).MaxLength(18))
                                 
                                //Sales Price
                                , Html.X().NumberColumn().Format("0,000").ID("txtUnitPrice").Text(Util.GetLang("SalesPrice")).DataIndex("UnitPrice").Width(150).Align(Alignment.Right)
                                .Editor(Html.X().NumberField().DecimalPrecision(0).MinValue(0).MaxLength(18))
                               
                                 
                                //Extended Amount
                                , Html.X().NumberColumn().Format("0,000").ID("txtTranAmt").Text(Util.GetLang("ExtAmt")).DataIndex("TranAmt").Width(150).Align(Alignment.Right)
                                .Editor(Html.X().NumberField().DecimalPrecision(0).MinValue(0).MaxLength(18))
                                 
                                //Description
                                , Html.X().Column().ID("txtTranDesc").Text(Util.GetLang("Descr")).DataIndex("TranDesc").Width(150)
                                .Editor(Html.X().TextField())
                                  
                                , Html.X().Column().Text(Util.GetLang("TaxCat")).Width(100).DataIndex("TaxCat")
                                        .Editor(
                                            HQ.Combo().ID("cboTaxCat").Name("cboTaxCat").HQProcedure("AP10100_pcTaxCatWithAsterisk")
                                                .HQColumnShow("CatID,Descr").DisplayField("CatID").ValueField("CatID")
                                                .HQHeightWidth(500, 400).ForceSelection(true)
                                                .HQDBSys(false)
                                                .LoadData()
                                                .Triggers(new FieldTrigger() { Icon = TriggerIcon.Clear, HideTrigger = false })
                                                .Listeners(lst =>
                                                {
                                                    lst.TriggerClick.Handler = "if (index == 0) { this.clearValue();}";
                                                })
                                            )

                                , Html.X().Column().Text(Util.GetLang("TaxID")).Width(100).DataIndex("TaxID")
                                        .Editor(
                                            HQ.Combo().ID("cboTaxID").Name("cboTaxID").HQProcedure("AP10100_pcVendorTaxes")
                                                .HQColumnShow("TaxID,Descr,TaxRate").DisplayField("TaxID").ValueField("TaxID")
                                                .HQHeightWidth(500, 350).MultiSelect(true).ForceSelection(true)
                                                .HQParam(new StoreParameterCollection() 
                                                { 
                                                    new StoreParameter() { Name = "@VendID", Value = "App.cboVendID.getValue()", Mode = ParameterMode.Raw },
                                                    new StoreParameter() { Name = "@OrdFromId", Value = "DEFAULT" , Mode = ParameterMode.Value}
                                                 
                                                })
                                                .HQDBSys(false)
                                                .Listeners(lst =>
                                                {

                                                   // lst.Focus.Handler = "expand(App.cboTaxID,',');this.forceSelection=true;";

                                                })
                                                .LoadData()
                                           )
                            , Html.X().CommandColumn().Width(150)
                                .Commands(
                                    Html.X().GridCommand()
                                        .Text(Util.GetLang("Reject"))
                                        .ToolTip(t =>
                                        {
                                            t.Text = Util.GetLang("Rejectrowchanges");
                                        })
                                        .CommandName("reject")
                                        .Icon(Icon.ArrowUndo)
                                )
                                .PrepareToolbar(t =>
                                {
                                    t.Handler = "toolbar.items.get(0).setVisible(record.dirty);";
                                })
                                .Listeners(l =>
                                {
                                    l.Command.Handler = "grdAP_Trans_Reject(record);";
                                })

                            )
                            .SelectionModel(Html.X().RowSelectionModel().ID("slmgrdAP_Trans").Mode(SelectionMode.Multi))
                            .Plugins(
                                Html.X()//Cho phep edit )
                                    .CellEditing()
                                    .ClicksToEdit(1)
                                    .Listeners(ls =>
                                    {
                                        ls.BeforeEdit.Fn = "grdAP_Trans_BeforeEdit";
                                        ls.Edit.Fn = "grdAP_Trans_Edit";
                                        ls.ValidateEdit.Fn = "grdAP_Trans_ValidateEdit";                            
                                    })                           
                               )                 
                            //)//End grid
                        
                )// tapDoc
                  , X.Panel()
                                .ID("tabTax")
                                .Layout(LayoutType.VBox)
                                .LayoutConfig(config => { config.Add(new VBoxLayoutConfig() { Align = VBoxAlign.Stretch }); })
                                .Title(Util.GetLang("TAX"))
                                .Padding(3)
                                .Items(

                                        Html.X().GridPanel()
                                                        .Flex(1)
                                                        .ID("grdTaxTrans")
                                                        .ColumnLines(true)
                                                        .RowLines(true)
                                                        .Listeners(lss=>lss.Render.Handler = "HQ.common.control_render(this,'TaxTrans')")
                                                       .StoreID("stoAP10100_pgLoadTaxTrans")
                                                        .ColumnModel(
                                                                        Html.X().RowNumbererColumn()
                                                                        , Html.X().Column().Text(Util.GetLang("LineRef")).DataIndex("LineRef").Width(150)
                                                                        , Html.X().Column().Text(Util.GetLang("TaxID")).DataIndex("TaxID").Width(150)
                                                                        , Html.X().NumberColumn().Align(Alignment.Right).Text(Util.GetLang("TxblAmt")).DataIndex("TxblAmt").Width(150).Format("0,000,000")
                                                                        , Html.X().NumberColumn().Align(Alignment.Right).Text(Util.GetLang("TaxAmt")).DataIndex("TaxAmt").Width(150).Format("0,000,000.00")
                                                                        , Html.X().NumberColumn().Align(Alignment.Right).Text(Util.GetLang("TaxRate")).DataIndex("TaxRate").Width(150).Format("0,000,000")
                                                                        , Html.X().Column().Text(Util.GetLang("TaxLevel")).DataIndex("TaxLevel").Width(150)
                                                                    )

                                        , X.BoxSplitter()
                                        , Html.X().GridPanel()
                                                        .Flex(1)
                                                        .ID("grdTaxDoc")
                                                        .ColumnLines(true)
                                                        .RowLines(true)
                                                        //.Listeners(lss=>lss.Render.Handler = "HQ.common.control_render(this,'TaxTrans')")
                                                        .Listeners(lss=>lss.Render.Handler = "HQ.common.control_render(this,'TaxDoc')")
                                                        .Store(
                                                            Html.X().Store()
                                                            .ID("stoAP10100_LoadTaxDoc")
                                                            .Model(
                                                                Util.GenerateModel(typeof(AP10100_pgLoadTaxTrans_Result), "mdlAP10100_pgLoadTaxTransDoc", "")
                                                            )
                                                        )
                                                        .ColumnModel(
                                                                        Html.X().RowNumbererColumn()
                                                                        , Html.X().Column().Text(Util.GetLang("TaxID")).DataIndex("TaxID").Width(150)
                                                                        , Html.X().NumberColumn().Align(Alignment.Right).Text(Util.GetLang("TxblAmt")).DataIndex("TxblAmt").Width(150).Format("0,000,000")
                                                                        , Html.X().NumberColumn().Align(Alignment.Right).Text(Util.GetLang("TaxAmt")).DataIndex("TaxAmt").Width(150).Format("0,000,000")
                                                                        , Html.X().NumberColumn().Align(Alignment.Right).Text(Util.GetLang("TaxRate")).DataIndex("TaxRate").Width(150).Format("0,000,000")


                                                                    )


                                    )//tabTax         
            )// tabpannel
        
        
       
    )// frmMain
)
)