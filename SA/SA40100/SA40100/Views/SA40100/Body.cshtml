@using Ext.Net;
@using Ext.Net.MVC;
@using HQ.eSkyFramework;
@using HQ.eSkyFramework.HQControl;
@using SA40100;
@{
    Layout = null;
    var X = Html.X();
    var HQ = Html.HQ();
}

@(X.Viewport()
.Layout(LayoutType.Fit)
.Items(
    X.FormPanel()
    .ID("frmMain")
    .BodyPadding(0)
    .KeyMap(Util.SetupKeyMap())
    .TopBar(Util.SetupToolbar("Print", true, ""))
    .Region(Region.Center)
    .Layout(LayoutType.Border)
    .Items(
        ////Thiet ke giao dien o day
        X.Panel().ID("pnlLeft")
        .Region(Region.West).Flex(2)
        .Layout(LayoutType.Border)
        .Split(true)
        .Items(
            X.Panel().ID("treeBranch")
            .Region(Region.West).Flex(4)
            .Split(true).AutoScroll(true).MinWidth(150)
                .DirectEvents(de =>
                {
                    de.AfterRender.ExtraParams.Add(new Parameter("panelID", "treeBranch"));
                    de.AfterRender.Url = Url.Action("SA40100GetTreeBranch");
                    de.AfterRender.CleanRequest = true;
                    de.AfterRender.Method = HttpMethod.POST;
                    de.AfterRender.Success = "";
                    de.AfterRender.Timeout = 60000;
                    de.AfterRender.Failure = "Ext.Msg.show({title: 'Login Error',msg: result.errorMessage,buttons: Ext.Msg.OK,icon: Ext.MessageBox.ERROR});";
                    de.AfterRender.EventMask.ShowMask = true;
                    de.AfterRender.EventMask.Msg = Util.GetLang("LoadingData");
                    de.AfterRender.EventMask.MinDelay = 500;
                
                    de.Expand.ExtraParams.Add(new Parameter("panelID", "treeBranch"));
                    de.Expand.Url = Url.Action("SA40100GetTreeBranch");
                    de.Expand.CleanRequest = true;
                    de.Expand.Method = HttpMethod.POST;
                    de.Expand.Success = "";
                    de.Expand.Timeout = 60000;
                    de.Expand.Failure = "Ext.Msg.show({title: 'Login Error',msg: result.errorMessage,buttons: Ext.Msg.OK,icon: Ext.MessageBox.ERROR});";
                    de.Expand.EventMask.ShowMask = true;
                    de.Expand.EventMask.Msg = Util.GetLang("LoadingData");
                    de.Expand.EventMask.MinDelay = 500;
                
                })
            .BottomBar(
                X.Toolbar()
                .Items(
                    X.ToolbarFill()

                    , HQ.Button().ID("btnExpand")
                    .HQLangCode("Expand")
                    .Icon(Icon.BulletTogglePlus)
                    .Handler("btnExpand_click")

                    , X.ToolbarSpacer()
                    , X.ToolbarSeparator()
                    , X.ToolbarSpacer()

                    , HQ.Button().ID("btnCollapse")
                    .HQLangCode("Collapse")
                    .Icon(Icon.BulletToggleMinus)
                    .Handler("btnCollapse_click")

                    , X.ToolbarFill()
                )
            ) // treeBranch

            // Second Column
            , X.Panel().ID("treeButton")
            .Region(Region.Center)
            .Layout(LayoutType.VBox)
            .MinWidth(100).Flex(2).Split(true)
            .LayoutConfig(new VBoxLayoutConfig { Align = VBoxAlign.Stretch, Pack = BoxPack.Center })
            .Items(
                HQ.Button().ID("btnAddAll")
                .ToolTip(Util.GetLang("AddAll")).HQLangCode("AddAll")
                .Icon(Icon.ForwardGreen).MarginSpec("5 5 0 5")
                .Handler("btnAddAll_click").Width(100)

                , HQ.Button().ID("btnAdd")
                .ToolTip(Util.GetLang("Add")).HQLangCode("Add")
                .Icon(Icon.PlayGreen).MarginSpec("5 5 0 5")
                .Handler("btnAdd_click").Width(100)

                , HQ.Button().ID("btnDel")
                .ToolTip(Util.GetLang("Del")).HQLangCode("Del")
                .Icon(Icon.ReverseGreen).MarginSpec("5 5 0 5")
                .Handler("btnDel_click").Width(100)

                , HQ.Button().ID("btnDelAll")
                .ToolTip(Util.GetLang("DelAll")).HQLangCode("DelAll")
                .Icon(Icon.RewindGreen).MarginSpec("5 5 0 5")
                .Handler("btnDelAll_click").Width(100)
            ) // Container
        )

        //Third Column
        , X.Panel()
        .Region(Region.Center).Flex(4)
        .Layout(LayoutType.Border)
        .Split(true).AutoScroll(true)
        .Items(
                X.Panel().Region(Region.North)
                .Items(
                    X.Panel().ID("pnlheader")
                    .Layout(LayoutType.HBox)
                    .AutoScroll(true)
                    .Items(
                        X.Container().Layout(LayoutType.VBox).MarginSpec("5 0 0 0")
                        .Items(
                            HQ.Combo().ID("cboHistID").Name("cboHistID").MarginSpec("5 0 0 0")
                                .HQLangCode("Code").HQProcedure("SA40100_pcHistID").HQDBSys(true)
                                .HQParam(new StoreParameterCollection() 
                                { 
                                    new StoreParameter() { Name = "@HistID", Value = "%", Mode = ParameterMode.Value }
                                })
                                .HQColumnShow("HistID")
                                .DisplayField("HistID")
                                .ValueField("HistID")
                                .HQHeightWidth(400, 300)
                                .ForceSelection(true)
                                .Triggers(new FieldTrigger() { Icon = TriggerIcon.Clear, HideTrigger = false })
                                .Listeners(lst => { 
                                    lst.TriggerClick.Handler = "if (index == 0) { this.clearValue();}";
                                    lst.Change.Fn = ("cboHistID_Change");
                                    lst.Select.Fn = ("cboHistID_Select");
                                })
                                .LoadData().Width(300)
                                
                            ,HQ.Combo().ID("cboTask").Name("cboTask").MarginSpec("5 0 10 0").AllowBlank(false)
                                .HQLangCode("TASK").HQProcedure("SA40100_pcTask").HQDBSys(true)
                                .HQParam(new StoreParameterCollection() 
                                { 
                                    new StoreParameter() { Name = "@LangID", Value = "HQ.langID", Mode = ParameterMode.Raw }
                                })
                                .HQColumnShow("Code,Descr")
                                .DisplayField("Descr")
                                .ValueField("Code")
                                .HQHeightWidth(400, 300)
                                .ForceSelection(true)
                                .Triggers(new FieldTrigger() { Icon = TriggerIcon.Clear, HideTrigger = false })
                                .Listeners(lst => { 
                                    lst.TriggerClick.Handler = "if (index == 0) { this.clearValue();}";
                                    
                                })
                                .LoadData().Width(300) 
                        )
                        , X.Container().Layout(LayoutType.VBox).MarginSpec("5 0 0 0")
                        .Items(
                            HQ.DateField().ID("lblDate").MarginSpec("5 0 0 0").HQLangCode("DATE").Width(300)
                            .Format("MM/dd/yyyy").Value(DateTime.Now.ToString("MM/dd/yyyy"))
                            , HQ.Button().ID("btnProcess").HQLangCode("PROCESS").MarginSpec("5 0 0 105").Width(195)
                            .Listeners(p =>
                                {
                                    //p.Click.Fn = "btnProcess_Click";
                                })
                        )
                    )//
            )//header

            , X.Panel().ID("pnlgrid")
            .Region(Region.Center)
            .Layout(LayoutType.Border)
            .Items(
                X.GridPanel()
                .Scroll(ScrollMode.Both)
                .View(X.GridView().GetRowClass(function => function.Fn = "getRowClass").TrackOver(false))
                .ID("grdSYS_CloseDateHistDetail")
                .SelectionMemory(false)
                .Region(Region.Center).Flex(1)
                    .Store(
                        X.Store()
                        .ID("stoSYS_CloseDateHistDetail").AutoLoad(false)
                        .PageSize(50)
                        .Model(Util.GenerateModel(typeof(SA40100_pgSYS_CloseDateHistDetail_Result), "mdlSA40100_pgSYS_CloseDateHistDetail", "BranchID"))
                        .Parameters(ps =>
                            {
                                ps.Add(new StoreParameter("HistID", "App.cboHistID.getValue()", ParameterMode.Raw));
                            })
                        .ServerProxy(X.AjaxProxy().Url(Url.Action("GetSYS_CloseDateHistDetail")))
                        .Listeners(l =>
                        {
                            l.BeforeLoad.Fn = "stoBeforeLoad";
                            l.Load.Fn = "stoLoad";
                            l.Update.Fn = "stoChanged";
                        })
                    )
                    .Listeners(p =>
                    {
                        p.BoxReady.Handler = "firstLoad();";
                    })
                .ViewConfig(X.GridView().Plugins(X.GridDragDrop().EnableDrag(true).DDGroup("BranchID")).Listeners(l=>l.BeforeDrop.Fn="beforenodedrop"))
                
                .SortableColumns(false)
                .ColumnModel(
                    X.RowNumbererColumn().Width(40)
                    
                    , X.Column().DataIndex("BranchID").Text(Util.GetLang("BranchID")).Width(100)
                        .Editor(
                            HQ.Combo().ID("cboBranchID")
                            .Name("cboBranchID").HQProcedure("SA40100_pcCompany").HQDBSys(true)
                            .HQColumnShow("CpnyID,CpnyName").DisplayField("CpnyID").ValueField("CpnyID")
                            .Width(300).HQHeightWidth(500, 400).MarginSpec("5 0 0 0").ForceSelection(true)

                            .HQParam(new StoreParameterCollection() 
                        { 
                            new StoreParameter() { Name = "@UserID", Value = "HQ.userName", Mode = ParameterMode.Raw }
                        })
                            .LoadData()
                    )
                    , X.Column().Text(Util.GetLang("BranchName")).DataIndex("BranchName").Width(150).Renderer("renderBranchName")
                    , X.Column().Text(Util.GetLang("Status")).DataIndex("Status").Width(150)
                    
                    , X.CheckColumn().ID("WrkDateChk").Text(Util.GetLang("WrkDateChk")).DataIndex("WrkDateChk").Width(150).Editable(true)
                    
                    , X.DateColumn().Text(Util.GetLang("WrkAdjDateBefore")).DataIndex("WrkAdjDateBefore")
                    .Width(150).ID("txtWrkAdjDateBefore").Editor(X.DateField().Format("MM/dd/yyyy"))
                    , X.DateColumn().Text(Util.GetLang("WrkAdjDateAfter")).DataIndex("WrkAdjDateAfter")
                    .Width(150).ID("txtWrkAdjDateAfter").Editor(X.DateField().Format("MM/dd/yyyy"))
                    , X.DateColumn().Text(Util.GetLang("WrkOpenDateBefore")).DataIndex("WrkOpenDateBefore")
                    .Width(150).ID("txtWrkOpenDateBefore").Editor(X.DateField().Format("MM/dd/yyyy"))
                    , X.DateColumn().Text(Util.GetLang("WrkOpenDateAfter")).DataIndex("WrkOpenDateAfter")
                    .Width(150).ID("txtWrkOpenDateAfter").Editor(X.DateField().Format("MM/dd/yyyy"))
                    
                    , X.NumberColumn().ID("WrkLowerDays").Text(Util.GetLang("WrkLowerDays")).DataIndex("WrkLowerDays").Format("0,000").Width(150).Align(Alignment.Right)
                    .Editor(X.NumberField().DecimalPrecision(0).MinValue(0))
                    
                    , X.NumberColumn().ID("WrkUpperDays").Text(Util.GetLang("WrkUpperDays")).DataIndex("WrkUpperDays").Format("0,000").Width(150).Align(Alignment.Right)
                    .Editor(X.NumberField().DecimalPrecision(0).MinValue(0))
                    
                    , X.CommandColumn().Width(150)
                    .Commands(
                        X.GridCommand()
                        .Text(Util.GetLang("Reject"))
                        .ToolTip(t => t.Text = Util.GetLang("Rejectrowchanges"))
                        .CommandName("reject")
                        .Icon(Icon.ArrowUndo)
                    )
                    .PrepareToolbar(t => t.Handler = "toolbar.items.get(0).setVisible(record.dirty);")
                    .Listeners(l => l.Command.Handler = "grdSYS_CloseDateHistDetail_Reject(record);")
                )
                .SelectionModel(
                    X.RowSelectionModel().ID("slmSYS_CloseDateHistDetail").Mode(SelectionMode.Multi)
                    //.Listeners(lst=>lst.SelectionChange.Fn="slmSYS_CloseDateHistDetail_SelectionChange")
                )
                .BottomBar(
                    X.PagingToolbar()
                    .Items(
                        X.Label("Page size:"),
                        X.ToolbarSpacer(10),
                        X.ComboBox()
                        .Width(80)
                        .Items("1", "2", "10", "20", "30", "50")
                        .SelectedItems("50")
                        .Listeners(l =>
                            {
                                l.Select.Fn = "HQ.grid.onPageSelect";
                            })
                    )
                    .Plugins(X.ProgressBarPager())
                )
                .Plugins(
                    X.CellEditing()
                    .ClicksToEdit(1)
                    .Listeners(ls =>
                    {
                        ls.BeforeEdit.Fn = "grdSYS_CloseDateHistDetail_BeforeEdit";
                        ls.Edit.Fn = "grdSYS_CloseDateHistDetail_Edit";
                        ls.ValidateEdit.Fn = "grdSYS_CloseDateHistDetail_ValidateEdit";
                    })
                )
                .Features(
                    X.GridFilters()
                        .Local(true)
                        .Filters(
                            X.StringFilter().DataIndex("BranchID"),
                            X.StringFilter().DataIndex("BranchName"),
                            X.StringFilter().DataIndex("Status"),
                            X.BooleanFilter().DataIndex("WrkDateChk"),
                            X.DateFilter().DataIndex("WrkAdjDateBefore"),
                            X.DateFilter().DataIndex("WrkAdjDateAfter"),
                            X.DateFilter().DataIndex("WrkOpenDateBefore"),
                            X.DateFilter().DataIndex("WrkOpenDateAfter"),
                            X.NumericFilter().DataIndex("WrkLowerDays"),
                            X.NumericFilter().DataIndex("WrkUpperDays")
                        )
                )
                .Listeners(ls =>
                    ls.SelectionChange.Handler = "selected.length && App.tplDetail.overwrite(App.pnlDetail.body, selected[0].data);"
                )            
            )//Grid
            ,X.Panel().ID("pnlDetail")
            .Region(Region.South)
            .Layout(LayoutType.Border)
            .Html("")
            .MinHeight(170)
            .AutoScroll(true)
            .Hidden(true)
            //panel detail duoi grid
        )//Panel
    )//frmMain
))

@(X.XTemplate()
    .ID("tplDetail")
    .Html(@<text>
        <h3 style="color:red" >{ContentHist}</h3><br/>
    </text>)
)