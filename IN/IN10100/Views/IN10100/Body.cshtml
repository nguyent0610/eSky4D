@using Ext.Net;
@using Ext.Net.MVC;
@using HQ.eSkyFramework
@using HQ.eSkyFramework.HQControl;
@using IN10100;

@{
    Layout = null;
    var X = Html.X();
    var HQ = Html.HQ();
}

@(
 X.Viewport()
    .Layout(LayoutType.Fit)
    .Items(

        X.FormPanel().ID("frmMain")
        .Layout(LayoutType.Border)
        .TrackResetOnLoad(true)
        .DefaultAnchor("100%")
        .Listeners(p=>p.FieldChange.Fn="frmMain_FieldChange")
        .KeyMap(Util.SetupKeyMap())
        .TopBar(Util.SetupToolbar(tools: new AbstractComponent[]{
            
            X.FileUploadField()
            .ID("btnImport")
            .ButtonText("ImportTemplate")
            .ButtonOnly(true)
            .Icon(Icon.BookAdd)
            .Listeners(p=>{
                p.Change.Fn = "btnImport_Click";
            }),
                    
            X.Button()
            .ID("btnExport")
            .Text(Util.GetLang("ExportTemplate"))
            .Icon(Icon.ArrowTurnRight)
            .Listeners(p=>{
                p.Click.Fn = "btnExport_Click";
            })
        }))
        .BottomBar(
            X.Toolbar()
            .Items(
                X.ToolbarFill(),
                X.Label().ID("lblQtyAvail").Width(300).StyleSpec("text-align:right;margin-right: 10px !important;")
            )
        )
        .FieldDefaults(a => { a.LabelAlign = LabelAlign.Right; a.LabelWidth = 120; })
        .Listeners(p => p.BoxReady.Fn = "frmMain_BoxReady")
        .Items(

            X.Panel()
            .Border(false)
            .AutoScroll(true)
            .Region(Region.North)
            .Layout(LayoutType.VBox)
            .Items(
                X.FieldContainer()
                .MarginSpec("10 0 5 0")
                .Layout(LayoutType.HBox)
                .Items(

                    HQ.TextBox().ID("BranchID")
                    .HQLangCode("BranchID")
                    .AllowBlank(false)
                    .BlankText(Util.GetLangPrefix("Input", "BranchID"))
                    .MaxLength(30)
                    .EnforceMaxLength(true).Tag("X").ReadOnly(true)
                    .Width(250)
                    .HQControlFocus("BatNbr")
                    .Listeners(p => p.Focus.Handler = "HQ.focus='batch';"),

                    X.ComboBox()
                    .ID("BatNbr")
                    .Name("BatNbr")
                    .MinChars(1)
                    .PageSize(20)
                    .TypeAhead(false)
                    .ValueField("BatNbr")
                    .DisplayField("BatNbr")
                    .Width(250)
                    .ForceSelection(true)
                    .MaxLength(20)
                    .FieldLabel(Util.GetLang("BatNbr"))
                    .TriggerAction(TriggerAction.All)
                    .Listeners(l =>
                    {
                        l.Change.Fn = "cboBatNbr_Change";
                        l.Focus.Handler = "HQ.focus='batch'";
                        l.TriggerClick.Handler = "if (index == 0) { this.clearValue();} defaultOnNew();";
                    })
                    .QueryMode(DataLoadMode.Remote)
                    .QueryDelay(1000)
                    .MatchFieldWidth(false)
                    .ListConfig(
                        X.BoundList()
                        .Height(500)
                        .ItemSelector(".x-boundlist-item")
                        .LoadingText(Util.GetLang("Loading"))
                        .Tpl(
                            X.XTemplate()
                            .Html(@"<tpl for='.'>   
                                        <tpl if='[xindex] == 1'>
                                            <table style='table-layout: fixed; width:500px !important'>
                                                <tr>
                                                    <th style='width:100px;'>" + Util.GetLang("BatNbr") + @"</th>
                                                    <th style='width:100px;'>" + Util.GetLang("TranDate") + @"</th>
                                                    <th style='width:100px;'>" + Util.GetLang("Status") + @"</th>
                                                    <th>" + Util.GetLang("Descr") + @"</th>
                                                   
                                                </tr>
                                        </tpl>
                                        <tr class='x-boundlist-item'>
                                            <td>{BatNbr}</td>
                                            <td>{DateEnt:date("""+Current.FormatDateJS+@""")}</td>
                                            <td>{Status}</td>
                                            <td>{Descr}</td>
                                        </tr>
                                        <tpl if='[xcount-xindex] == 0'>
                                            </table>
                                        </tpl>
                                    </tpl>"
                            )
                        )
                    )
                    .Triggers(new FieldTrigger() { Icon = TriggerIcon.Clear, HideTrigger = false })
                    .KeyMap(X.KeyMap().Binding(b => { b.Add(X.KeyBinding().KeysString(((int)KeyCode.ENTER).ToString()).Handler(@"#{FromToSiteID}.focus();")); }))
                    .StoreID("stoBatch"),

                    HQ.Combo().ID("FromToSiteID")
                    .HQLangCode("FromSite")
                    .HQProcedure("IN10100_pcFromSite")
                    .HQColumnShow("SiteID,Name")
                    .DisplayField("SiteID")
                    .ValueField("SiteID")
                    .Width(250)
                    .LabelWidth(90)
                    .HQHeightWidth(400, 300)
                    .ForceSelection(true)
                    .Triggers(new FieldTrigger() { Icon = TriggerIcon.Clear, HideTrigger = false })
                    .HQParam(new StoreParameterCollection(){
                        new StoreParameter() { Name = "@BranchID", Value = "HQ.cpnyID", Mode = ParameterMode.Raw },
                        new StoreParameter() { Name = "@UserID", Value = "HQ.userName", Mode = ParameterMode.Raw }
                    })
                    .HQControlFocus("TrnsferNbr")
                    .LoadData()
                    .Listeners(lst =>
                    {
                        lst.TriggerClick.Handler = "if (index == 0) { this.clearValue();}";
                        lst.Change.Fn = "cboFromToSiteID_Change";
                        lst.Focus.Handler = "HQ.focus='batch';";
                    }),

                    HQ.Combo().ID("Status")
                    .HQLangCode("Status")
                    .HQProcedure("IN10100_pcStatus")
                    .HQColumnShow("Code,Descr")
                    .DisplayField("Descr")
                    .ValueField("Code")
                    .AllowBlank(false)
                    .BlankText(Util.GetLangPrefix("Input", "Status"))
                    .Width(250)
                    .LabelWidth(90)
                    .HQHeightWidth(400, 300)
                    .ForceSelection(true).Tag("X")
                    .HQParam(new StoreParameterCollection() {
                        new StoreParameter() { Name = "@LangID", Value = Current.LangID.ToString(), Mode = ParameterMode.Value }
                    })
                    .LoadData()
                    .Listeners(lst =>
                    {
                        lst.Change.Fn = "cboStatus_Change";
                        lst.Focus.Handler = "HQ.focus='batch';";
                    })

                ),

                X.FieldContainer()
                .Layout(LayoutType.HBox)
                .Items(
                    HQ.TextBox().ID("RefNbr")
                    .HQLangCode("PerPost/RcptNbr")
                    .Width(250).Tag("X")
                    .Listeners(p => p.Focus.Handler = "HQ.focus='batch';"),

                    HQ.Combo().ID("TrnsferNbr")
                    .HQLangCode("TrnsferNbr")
                    .HQProcedure("IN10100_pcTrnsfrDoc")
                    .HQColumnShow("TrnsfrDocNbr,BatNbr,Comment,SiteID,ToSiteID")
                    .DisplayField("TrnsfrDocNbr")
                    .ValueField("TrnsfrDocNbr")
                    .Width(250)
                    .HQHeightWidth(400, 300)
                    .ForceSelection(true)
                    .Triggers(new FieldTrigger() { Icon = TriggerIcon.Clear, HideTrigger = false })
                    .HQParam(new StoreParameterCollection(){
                        new StoreParameter() { Name = "@BranchID", Value = "HQ.cpnyID", Mode = ParameterMode.Raw }
                    })
                    .HQControlFocus("SiteID")
                    .LoadData()
                    .Listeners(lst =>
                    {
                        lst.TriggerClick.Handler = "if (index == 0) { this.clearValue();}";
                        lst.Focus.Handler = "HQ.focus='batch';";
                        lst.Change.Fn = "cboTrnsferNbr_Change";
                    }),

                    HQ.Combo().ID("SiteID")
                    .HQLangCode("Site")
                    .HQProcedure("IN10100_pcSite")
                    .HQColumnShow("SiteID,Name")
                    .DisplayField("SiteID")
                    .ValueField("SiteID").DataIndex("SiteID").Name("SiteID")
                    .AllowBlank(false)
                    .BlankText(Util.GetLangPrefix("Input", "Site"))
                    .Width(250)
                    .LabelWidth(90)
                    .HQHeightWidth(400, 300)
                    .ForceSelection(true)
                    .Triggers(new FieldTrigger() { Icon = TriggerIcon.Clear, HideTrigger = false })
                    .HQParam(new StoreParameterCollection(){
                        new StoreParameter() { Name = "@BranchID", Value = "HQ.cpnyID", Mode = ParameterMode.Raw },
                        new StoreParameter() { Name = "@UserID", Value = "HQ.userName", Mode = ParameterMode.Raw }
                    })
                    .HQControlFocus("Handle")
                    .LoadData()
                    .Listeners(lst =>
                    {
                        lst.TriggerClick.Handler = "if (index == 0) { this.clearValue();}";
                        lst.Change.Fn = "cboSiteID_Change";
                        lst.Focus.Handler = "HQ.focus='batch';";
                    })
                    ,

                    HQ.Combo().ID("Handle")
                    .HQLangCode("Handle")
                    .HQProcedure("IN10100_pcHandle")
                    .HQColumnShow("Code,Descr")
                    .DisplayField("Descr")
                    .ValueField("Code")
                    .AllowBlank(false)
                    .BlankText(Util.GetLangPrefix("Input", "Handle"))
                    .Width(250)
                    .LabelWidth(90)
                    .HQHeightWidth(400, 300)
                    .ForceSelection(true)
                    .HQParam(new StoreParameterCollection(){
                        new StoreParameter() { Name = "@LangID", Value = "HQ.langID", Mode = ParameterMode.Raw },
                        new StoreParameter() { Name = "@Status", Value = "App.Status.getValue()", Mode = ParameterMode.Raw },
                        new StoreParameter() { Name = "@UserID", Value = "HQ.userName", Mode = ParameterMode.Raw },
                        
                    })
                    .HQControlFocus("IntRefNbr")
                    .LoadData()
                    .Listeners(lst =>
                    {
                        lst.TriggerClick.Handler = "if (index == 0) { this.clearValue();}";
                        lst.Focus.Handler = "HQ.focus='batch';";
                    })
                )
                ,

                X.FieldContainer()
                .Layout(LayoutType.HBox)
                .Items(
                    HQ.TextBox().ID("IntRefNbr")
                    .HQLangCode("IntNbr")
                    .MaxLength(10)
                    .EnforceMaxLength(true)
                    .Width(250)
                    .HQControlFocus("DateEnt")
                    .Listeners(p => p.Focus.Handler = "HQ.focus='batch';"),

                    HQ.DateField().ID("DateEnt")
                    .HQLangCode("TranDate")
                    .AllowBlank(false)
                    .BlankText(Util.GetLangPrefix("Input", "TranDate"))
                    .Width(250)
                    .HQControlFocus("ReasonCD")
                    .Format(Current.FormatDate)
                    .Listeners(p => p.Focus.Handler = "HQ.focus='batch';"),

                    
                    HQ.Combo().ID("cboWhseLoc").HQLangCode("WhseLoc")
                    .HQProcedure("IN10100_pcIN_SiteLocation").DataIndex("WhseLoc").Name("WhseLoc")
                    .HQColumnShow("WhseLoc,Descr,SiteID")
                    .DisplayField("WhseLoc")
                    .ValueField("WhseLoc")
                    .Width(250)//.HQisPaging(true).PageSize(50)
                    .HQHeightWidth(400, 300)
                    .ForceSelection(false)
                    .LabelWidth(90).HQAutoLoad(false)
                    .AllowBlank(false)
                    .Triggers(new FieldTrigger() { Icon = TriggerIcon.Clear, HideTrigger = false })
                    .HQParam(new StoreParameterCollection(){
                        new StoreParameter() { Name = "@SiteID", Value = "App.SiteID.getValue()", Mode = ParameterMode.Raw },
                        new StoreParameter() { Name = "@LangID", Value = "HQ.langID", Mode = ParameterMode.Raw },
                        new StoreParameter() { Name = "@CpnyID", Value = "HQ.cpnyID", Mode = ParameterMode.Raw },
                        new StoreParameter() { Name = "@UserName", Value = "HQ.userName", Mode = ParameterMode.Raw }
                    })
                    .LoadData()
                    .Listeners(lst =>
                    {
                        lst.TriggerClick.Handler = "if (index == 0) { this.clearValue();}";
                        lst.Focus.Handler = "this.forceSelection = true;";
                        lst.Blur.Handler = "this.forceSelection = false;";
                    })
                    ,
                           
                    
                                                     
                    HQ.TextBox().ID("RvdBatNbr")
                    .HQLangCode("CancelledBatNbr").Tag("X")
                    .LabelWidth(90)
                    .Width(250)
                    .Listeners(p => p.Focus.Handler = "HQ.focus='batch';")
                )
                ,

                X.FieldContainer()
                .Layout(LayoutType.HBox)
                .Items(
                    HQ.NumberField().ID("TotQty")
                    .HQLangCode("TotQ")
                    .Width(250)
                    .DecimalPrecision(0).Tag("X")
                    .Listeners(p => p.Focus.Handler = "HQ.focus='batch';"),


                        HQ.Combo().ID("cboPerPost")
                        .HQLangCode("PerPost")
                        .HQProcedure("IN10100_pcPerPost").DataIndex("PerPost").Name("PerPost")//.Tag("X")
                        .HQColumnShow("CycleNbr,StartDate,EndDate")
                        .DisplayField("CycleNbr")
                        .ValueField("CycleNbr")
                        .AllowBlank(false)
                        .Width(250)
                        .HQHeightWidth(400, 300)
                        .ForceSelection(true)
                        .HQParam(new StoreParameterCollection() 
                        { 
                            new StoreParameter() { Name = "@UserName", Value = "HQ.userName", Mode = ParameterMode.Raw },
                            new StoreParameter() { Name = "@CpnyID", Value = "HQ.cpnyID", Mode = ParameterMode.Raw },
                            new StoreParameter() { Name = "@LangID", Value = "HQ.langID", Mode = ParameterMode.Raw },
                        })
                        .Triggers(new FieldTrigger() { Icon = TriggerIcon.Clear, HideTrigger = false })
                        .LoadData()
                        .Listeners(lst =>
                        {
                            lst.TriggerClick.Handler = "if (index == 0) { this.clearValue();}";
                            lst.Focus.Handler = "HQ.focus='batch';";
                        })

                            ,
          
                    HQ.Combo().ID("SlsperID")
                    .HQLangCode("SlsName")
                    .HQProcedure("IN10100_pcSalesPerson")
                    .HQColumnShow("SlsperID,Name")
                    .DisplayField("Name")
                    .ValueField("SlsperID")
                    .Width(250)
                    .HQHeightWidth(400, 300)
                    .ForceSelection(true)
                    .LabelWidth(90)
                    .HQControlFocus("Descr")
                    .Triggers(new FieldTrigger() { Icon = TriggerIcon.Clear, HideTrigger = false })
                    .HQParam(new StoreParameterCollection(){
                        new StoreParameter() { Name = "@BranchID", Value = "HQ.cpnyID", Mode = ParameterMode.Raw }
                    })
                    .LoadData()
                    .Listeners(lst =>
                    {
                        lst.TriggerClick.Handler = "if (index == 0) { this.clearValue();}";
                        lst.Focus.Handler = "HQ.focus='batch';";
                    })
                    ,

                    HQ.Combo().ID("ReasonCD")
                    .HQLangCode("Reason")
                    .HQProcedure("IN10100_pcReasonCode")
                    .HQColumnShow("ReasonCD,Descr")
                    .DisplayField("Descr")
                    .ValueField("ReasonCD")
                    .AllowBlank(false)
                    .BlankText(Util.GetLangPrefix("Input", "ReasonCD"))
                    .Width(250)
                    .HQHeightWidth(400, 300)
                    .ForceSelection(true)
                    .LabelWidth(90)
                    .HQParam(new StoreParameterCollection() 
                    { 
                        new StoreParameter() { Name = "@UserID", Value = "HQ.userName", Mode = ParameterMode.Raw },
                        new StoreParameter() { Name = "@CpnyID", Value = "HQ.cpnyID", Mode = ParameterMode.Raw },
                        new StoreParameter() { Name = "@LangID", Value = "HQ.langID", Mode = ParameterMode.Raw },
                        new StoreParameter() { Name = "@BatNbr", Value = "App.BatNbr.getValue()", Mode = ParameterMode.Raw },
                        new StoreParameter() { Name = "@BranchID", Value = "HQ.cpnyID", Mode = ParameterMode.Raw }
                    })
                    .Triggers(new FieldTrigger() { Icon = TriggerIcon.Clear, HideTrigger = false })
                    .HQControlFocus("SlsperID")
                    .LoadData()
                    .Listeners(lst =>
                    {
                        lst.TriggerClick.Handler = "if (index == 0) { this.clearValue();}";
                        lst.Focus.Handler = "HQ.focus='batch';";
                    })
                )
                ,

                      X.FieldContainer()
                .Layout(LayoutType.HBox)
                .Items(
                    HQ.TextBox().ID("Descr")
                    .HQLangCode("Descr")
                    .AllowBlank(false)
                    .MaxLength(100)
                    .EnforceMaxLength(true)
                    .HQControlFocus("BatNbr")
                    .MarginSpec("0 0 10 0")
                    .BlankText(Util.GetLangPrefix("Input", "TranDate"))
                    .Width(750)
                    .Listeners(p => p.Focus.Handler = "HQ.focus='batch';")
                    ,
                    HQ.NumberField().ID("TotAmt")
                            .HQLangCode("TotAmt")
                            .Width(250).LabelWidth(90)
                            .DecimalPrecision(0).Tag("X")
                            .Listeners(p => p.Focus.Handler = "HQ.focus='batch';")

                            ,
                    X.Hidden().ID("tstamp"),
                    X.Hidden().ID("JrnlType")
                
                )     
            ),

            X.Panel()
            .Border(true)
            .Region(Region.Center)
            .Layout(LayoutType.Fit)
            .Items(
                X.GridPanel().ID("grdTrans")
                .RowLines(true)
                .ColumnLines(true)
                .Border(true)
                .BorderSpec("1 0 0 0")
                .SortableColumns(false)
                .Store(
                    X.Store()
                    .ID("stoTrans")
                    .PageSize(50).AutoLoad(false)
                    .Model(Util.GenerateModel(typeof(IN10100_pgReceiptLoad_Result), "mdlTrans", ""))
                    .Parameters(ps =>
                    {
                        ps.Add(new StoreParameter("BatNbr", "App.BatNbr.getValue()", ParameterMode.Raw));
                        ps.Add(new StoreParameter("BranchID", "App.BranchID.getValue()", ParameterMode.Raw));
                    })
                    .ServerProxy(X.AjaxProxy().Url(Url.Action("GetTrans")))
                    .Listeners(l =>    
                    {
                        l.Load.Fn = "stoDetail_Load";
                        l.BeforeLoad.Fn = "stoTrans_BeforeLoad";
                    })
                )
                .ColumnModel(
                    X.RowNumbererColumn().Width(30).Listeners(x => 	x.AfterRender.Handler = "this.resizable = true"),

                    X.Column()
                    .DataIndex("InvtID")
                    .ID("colInvtID")
                    .Width(100)
                    .Text(Util.GetLang("InvtID"))
                    .Editor(
                        HQ.Combo().ID("cboTransInvtID")
                        .HQProcedure("IN10100_pcInvt")
                        .HQColumnShow("InvtID,Descr,Descr1,Color")
                        .DisplayField("InvtID")
                        .ValueField("InvtID")
                        .Width(250).HQisPaging(true).PageSize(50)
                        .HQHeightWidth(400, 300)
                        .ForceSelection(true)
                        .LabelWidth(90).HQAutoLoad(false)
                        .Triggers(new FieldTrigger() { Icon = TriggerIcon.Clear, HideTrigger = false })
                        .HQParam(new StoreParameterCollection(){
                            new StoreParameter() { Name = "@BranchID", Value = "HQ.cpnyID", Mode = ParameterMode.Raw },
                            new StoreParameter() { Name = "@UserID", Value = "HQ.userName", Mode = ParameterMode.Raw }
                        })
                        .LoadData()
                        .Listeners(lst =>
                        {
                            lst.TriggerClick.Handler = "if (index == 0) { this.clearValue();}";
                        })
                    )
                    ,

                    X.Column()
                    .DataIndex("TranDesc")
                    .MinWidth(250)
                    .MaxWidth(350)
                    .Flex(1)
                    .Text(Util.GetLang("Descr"))

                                ,

                        X.Column().ID("colSiteID").Hidden(true)
                        .DataIndex("SiteID")
                        .Width(100)
                        .Text(Util.GetLang("Site"))
                        .Editor(
                           HQ.Combo().ID("cboSiteID")
                                .HQProcedure("IN10100_pcSite")
                                .HQColumnShow("SiteID,Name")
                                .HQHeightWidth(400, 200)
                                .ValueField("SiteID").DisplayField("SiteID")
                                .ForceSelection(true).SelectOnFocus(true)
                                .HQParam(new StoreParameterCollection() 
                                {   
                                      new StoreParameter() { Name = "@BranchID", Value = "HQ.cpnyID", Mode = ParameterMode.Raw },
                                      new StoreParameter() { Name = "@UserID", Value = "HQ.userName", Mode = ParameterMode.Raw }
                                })
                                .Triggers(new FieldTrigger() { Icon = TriggerIcon.Clear, HideTrigger = false })
                                .Listeners(lst =>
                                {
                                    lst.TriggerClick.Handler = "if (index == 0) { this.clearValue();}";
                                })
                                .LoadData()
                            )
                            ,

                        X.Column().ID("colWhseLoc").Hidden(true)
                        .DataIndex("WhseLoc")
                        .Width(100)
                            .Text(Util.GetLang("WhseLoc"))//.Renderer("rendererWhseLoc")
                            .Editor(
                                HQ.Combo().ID("cboWhseLocTrans")
                                .HQProcedure("IN10100_pcIN_SiteLocation")
                                .HQColumnShow("WhseLoc,Descr,SiteID")
                                .HQHeightWidth(400, 200)
                                .ValueField("WhseLoc").DisplayField("WhseLoc")
                                .ForceSelection(true).SelectOnFocus(true)
                                .HQParam(new StoreParameterCollection() 
                                {   
                                        new StoreParameter() { Name = "@SiteID", Value = "_siteID", Mode = ParameterMode.Raw },
                                        new StoreParameter() { Name = "@LangID", Value = "HQ.langID", Mode = ParameterMode.Raw },
                                        new StoreParameter() { Name = "@CpnyID", Value = "HQ.cpnyID", Mode = ParameterMode.Raw },
                                        new StoreParameter() { Name = "@UserName", Value = "HQ.userName", Mode = ParameterMode.Raw }
                                })
                                .Triggers(new FieldTrigger() { Icon = TriggerIcon.Clear, HideTrigger = false })
                                .Listeners(lst =>
                                {
                                    lst.TriggerClick.Handler = "if (index == 0) { this.clearValue();}";
                                })
                                .LoadData()
                            )                            
                            ,              

                    X.Column()
                    .DataIndex("UnitDesc")
                    .Width(100)
                    .Text(Util.GetLang("Unit"))
                    .Editor(
                        X.ComboBox()
                        .ID("cboTransUnitDesc")
                        .ForceSelection(true)
                        .TriggerAction(TriggerAction.All)
                        .QueryMode(DataLoadMode.Local)
                        .ValueField("FromUnit")
                        .DisplayField("FromUnit")
                        .StoreID("stoUnit")
                        .Triggers(new FieldTrigger() { Icon = TriggerIcon.Clear, HideTrigger = false })
                        .Listeners(lst => { lst.TriggerClick.Handler = "if (index == 0) { this.clearValue();}"; })
                    )
                                    
                    , X.NumberColumn()
                    .DataIndex("Qty")
                    .Text(Util.GetLang("Qty"))
                    .Align(Alignment.Right)
                    .Width(100)
                    .Editor(HQ.NumberField().ID("txtTransQty").MaxValue(1000000).MinValue(0).DecimalPrecision(0).SpinUpEnabled(true))
                    .Renderer("rendererQty")
                
                
                    , X.ComponentColumn()
                    .Text("")
                    .Width(26)
                    .Component( X.Button()
                                .MarginSpec("1 4 1 3").Height(18).Text("")
                                .Listeners(p=>p.Click.Fn="btnLot_Click")
                    )

                    , X.Column().ID("colQtyOnHand").DataIndex("QtyOnHand").Text(Util.GetLang("QtyOnHand")).Hidden(true)
                    .Width(110)
                    .Align(Alignment.Right)
                        .Renderer("rendererQty")  
                
                    , X.Column()
                    .DataIndex("UnitPrice")
                    .Text(Util.GetLang("UnitPrice"))
                    .Align(Alignment.Right)
                    .Width(110)
                    .Editor(HQ.NumberField().MinValue(0).MaxValue(100000000).DecimalPrecision(0).SpinUpEnabled(true))
                    .Renderer("rdrTrans_QtyAmt")

                    , X.Column()
                    .DataIndex("TranAmt")
                    .Text(Util.GetLang("ExtAmt"))
                    .Align(Alignment.Right)
                    .Width(110)
                    .Renderer("rdrTrans_QtyAmt")
                    
                    
                    , X.Column().Text(Util.GetLang("PosmID")).DataIndex("PosmID").Width(120)
                        .Editor(
	                        HQ.Combo().ID("cboPosmID").Name("cboPosmID").ForceSelection(true)
		                        .HQDBSys(false).HQProcedure("IN10100_pcPOSM").HQHeightWidth(400, 300)
		                        .HQColumnShow("PosmID").DisplayField("PosmID").ValueField("PosmID")
		                        .Triggers(new FieldTrigger() { Icon = TriggerIcon.Clear, HideTrigger = false })
                                .HQParam(new StoreParameterCollection(){
                                  new StoreParameter() { Name = "@UserID", Value = "HQ.userName", Mode = ParameterMode.Raw }
                                })
		                        .Listeners(lst =>
		                        {
			                        lst.TriggerClick.Handler = "if (index == 0) { this.clearValue();}";
		                        })
		                        .LoadData()
			            )
                    ,

                                 X.Column()
                                .DataIndex("ReasonCD")
                                .Width(100)
                                    .Text(Util.GetLang("Reason")).Renderer("rendererReason")
                                    .Editor(
                                            HQ.Combo().ID("cboReasonTrans")
                                            .HQProcedure("IN10100_pcReasonCode")
                                            .HQColumnShow("ReasonCD,Descr")
                                            .HQHeightWidth(400, 200)
                                            .ValueField("ReasonCD").DisplayField("ReasonCD")
                                            .ForceSelection(true).SelectOnFocus(true)
                                            .HQParam(new StoreParameterCollection() 
                                        {   
                                            new StoreParameter() { Name = "@UserID", Value = "HQ.userName", Mode = ParameterMode.Raw },
                                            new StoreParameter() { Name = "@CpnyID", Value = "HQ.cpnyID", Mode = ParameterMode.Raw },
                                            new StoreParameter() { Name = "@LangID", Value = "HQ.langID", Mode = ParameterMode.Raw },
                                            new StoreParameter() { Name = "@BatNbr", Value = "App.BatNbr.getValue()", Mode = ParameterMode.Raw },
                                            new StoreParameter() { Name = "@BranchID", Value = "HQ.cpnyID", Mode = ParameterMode.Raw }
                                        })
                                            .Triggers(new FieldTrigger() { Icon = TriggerIcon.Clear, HideTrigger = false })
                                            .Listeners(lst =>
                                            {
                                                lst.TriggerClick.Handler = "if (index == 0) { this.clearValue();}";
                                            })
                                            .LoadData()
                                    )
                        ,
                    
                    X.Column().DataIndex("ClassID").Hidden(true)


                )
                .Listeners(lst =>
                {
                    lst.SelectionChange.Fn = "grdTrans_SelectionChange";
                    lst.Edit.Fn = "grdTrans_Edit";
                    lst.ValidateEdit.Fn = "grdTrans_ValidateEdit";
                    lst.BeforeEdit.Fn = "grdTrans_BeforeEdit";
                })
                .SelectionModel(X.RowSelectionModel().ID("smlTrans").Mode(SelectionMode.Single))
                .View(X.GridView().TrackOver(false))
                .BottomBar(
                        X.PagingToolbar()
                        .Items(
                            X.Label("Page size:"),
                            X.ToolbarSpacer(10),
                            X.ComboBox()
                            .Width(80)
                            .Items("1", "2", "10", "20", "30", "50")
                            .SelectedItems("50")
                            .Listeners(l => l.Select.Fn = "HQ.grid.onPageSelect")
                        )
                        .Plugins(X.ProgressBarPager()).HideRefresh(true)
                )
                .Plugins(
                    X.CellEditing().ClicksToEdit(1)
                )
                .Features(
                    X.GridFilters()
                        .Local(true)
                        .Filters(
                            X.StringFilter().DataIndex("InvtID"),
                            X.StringFilter().DataIndex("TranDesc"),
                            X.StringFilter().DataIndex("UnitDesc"),
                            X.NumericFilter().DataIndex("Qty"),
                            X.NumericFilter().DataIndex("QtyOnHand"),
                            X.NumericFilter().DataIndex("UnitPrice"),
                            X.NumericFilter().DataIndex("TranAmt"),
                            X.StringFilter().DataIndex("PosmID")
                        )
                )
            ).Listeners(lss =>
            {
                lss.Render.Handler = "HQ.common.control_render(this,'trans')";
            })
        )
    )
)


@(
    X.Window()
    .ID("winLot")
    .Hidden(true)
    .Layout(LayoutType.Fit)
    .Height(450)
    .Width(800)
    .Modal(true)
    .Closable(false)
    .Buttons(
        X.Button().ID("btnLotDel").Text(Util.GetLang("DeleteRights"))
        .Listeners(p => p.Click.Fn = "btnLotDel_Click")

        , X.Button().ID("btnLotOK").Text(Util.GetLang("OK"))
        .Listeners(p => p.Click.Fn = "btnLotOK_Click")
    )
    .BottomBar(
        X.Toolbar()
        .Border(false)
        .Items(
                X.Label().ID("lblLotQtyAvail").Width(300).StyleSpec("text-align:left;margin-left: 10px !important;")
        )
    )
    .Items(
        X.GridPanel().ID("grdLot")
        .Border(true).BorderSpec("1 0 0 0")
        .StoreID("stoLotTrans")
        .SortableColumns(false)
        .ColumnModel(
            X.RowNumbererColumn().Renderer("renderRowNumber")

            , X.Column().ID("colLotSerNbr").DataIndex("LotSerNbr").Text(Util.GetLang("LotSerNbr"))
            .Editor(
                X.ComboBox().ID("cboLotSerNbr").DataIndex("LotSerNbr")
                .ValueField("LotSerNbr").DisplayField("LotSerNbr")
                .MaxLength(50)
                .EnforceMaxLength(true)
                .SubmitValue(false)
                .MinChars(1).TypeAhead(false).ForceSelection(false)
                .TriggerAction(TriggerAction.All)
                .Triggers(new FieldTrigger() { Icon = TriggerIcon.Clear, HideTrigger = false })
                .Listeners(l =>
                {
                    l.Focus.Handler = "HQ.focus='lot'";
                    l.TriggerClick.Handler = "if (index == 0) { this.clearValue();}";
                })
                .QueryMode(DataLoadMode.Local)
                .MatchFieldWidth(false)
                .ListConfig(                        
                    X.BoundList()
                    .Height(500).ItemSelector(".x-boundlist-item").LoadingText(Util.GetLang("Loading"))
                    .Tpl(
                        X.XTemplate()
                        .Html(@"<tpl for='.'>   
                                    <tpl if='[xindex] == 1'>
                                        <table style='width:500px !important'>
                                            <tr>
                                                <th>" + Util.GetLang("LotSerNbr") + @"</th>
                                                <th>" + Util.GetLang("ExpDate") + @"</th>
                                                <th>" + Util.GetLang("QtyAvail") + @"</th>
                                                <th>" + Util.GetLang("QtyOnHand") + @"</th>
                                            </tr>
                                    </tpl>
                                    <tr class='x-boundlist-item'>
                                        <td style='width:100px;'>{LotSerNbr}</td>
                                        <td>{ExpDate:date(""" +Current.FormatDateJS+ @""")}</td>
                                        <td>{QtyAvail}</td>
                                        <td>{QtyOnHand}</td>
                                    </tr>
                                    <tpl if='[xcount-xindex] == 0'>
                                        </table>
                                    </tpl>
                                </tpl>"
                            )
                    )
                )
                .StoreID("stoCalcLot")
            )
            .Width(120)
          
            , X.Column().ID("colPackageID").DataIndex("PackageID").Text(Util.GetLang("PackageID")).Hidden(true)
            .Width(70)
            .Editor(X.TextField().MaxLength(100).EnforceMaxLength(true))
            
            , X.Column().ID("colLotUnitDesc").DataIndex("UnitDesc").Text(Util.GetLang("Unit"))
            .Width(70)
                  
            , X.NumberColumn().ID("colLotQty").DataIndex("Qty").Text(Util.GetLang("IN10100LotQty"))
            .Width(75)
            .Align(Alignment.Right)
            .Renderer("rendererLotQty") 
            .Editor(Html.X().NumberField().MaxValue(1000000).MinValue(0).DecimalPrecision(0))

            , X.NumberColumn().ID("colLotQtyOnHand").DataIndex("QtyOnHand").Text(Util.GetLang("QtyOnHand")).Hidden(true)
            .Width(110).Format("0,000")
            .Align(Alignment.Right)
            .Renderer("rendererLotQty")     
                
            , X.Column().ID("colLotPrice").DataIndex("UnitPrice").Text(Util.GetLang("Price"))
            .Width(110)
            .Align(Alignment.Right)
            .Renderer("renderQtyAmt")


            , HQ.DateColumn().DataIndex("WarrantyDate").Text(Util.GetLang("IN10100WarrantyDate")).Editor(HQ.DateField().Format(Current.FormatDate)).Format(Current.FormatDate).Renderer("rendererWarrantyDate") 
            , HQ.DateColumn().ID("ExpDate").DataIndex("ExpDate").Text(Util.GetLang("ExpDate")).Editor(HQ.DateField().Format(Current.FormatDate)).Format(Current.FormatDate)
            , X.NumberColumn().DataIndex("PctExpDate").Text(Util.GetLang("PctExpDate"))
            .Width(75)
            .Align(Alignment.Right)
            .Format("0,000.00")
            
        )
        .Listeners(lst =>
        {
            lst.Select.Handler = "HQ.focus='lot';";
            lst.Edit.Fn = "grdLot_Edit";
            lst.BeforeEdit.Fn = "grdLot_BeforeEdit";
            lst.SelectionChange.Fn = "grdLot_SelectionChange";
        })
        .SelectionModel(Html.X().RowSelectionModel().ID("smlLot").Mode(SelectionMode.Single))
        .View(X.GridView().TrackOver(false))
        .Plugins(X.CellEditing().ClicksToEdit(1))
    )
)
    