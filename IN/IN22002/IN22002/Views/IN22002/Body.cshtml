
@using Ext.Net;
@using Ext.Net.MVC;
@using HQ.eSkyFramework;
@using HQ.eSkyFramework.HQControl;
@using IN22002;
@{
    Layout = null;
    var X = Html.X();
    var HQ = Html.HQ();
}

@(
 X.Viewport()
.Layout(LayoutType.Fit)
.Items(
        X.FormPanel()
        .ID("frmMain")
        .BodyPadding(0)
        .KeyMap(Util.SetupKeyMap())
        .TopBar(Util.SetupToolbar("Print,Save,New,Delete", true, ""))
        .Layout(LayoutType.Border)
        .FieldDefaults(act => { act.LabelAlign = LabelAlign.Right; })
        .Listeners(lst =>
        {
            lst.BoxReady.Fn = "loadSourceCombo";
        })
        .Items(
            X.Panel().ID("pnlHeader")
            .Region(Region.North)
            .Layout(LayoutType.HBox)
            .AutoScroll(true)
            .Items(
                X.FieldSet().Layout(LayoutType.HBox).MarginSpec("0 0 5 5")
                .Title(Util.GetLang("FilterData"))
                .LayoutConfig(new HBoxLayoutConfig { Align=HBoxAlign.Stretch, Pack = BoxPack.Center })
                .Items(
                //Column 1
                    X.Container().Layout(LayoutType.VBox).MarginSpec("5 0 0 0")
                        .Items(
                            HQ.Combo().ID("cboBranchID").Name("cboBranchID").MarginSpec("5 0 0 0").Width(250)
                            .HQLangCode("BranchID").HQDBSys(false).HQProcedure("IN22002_pcBranchAllByUser")
                            .HQColumnShow("BranchID,BranchName").ForceSelection(true).AllowBlank(false).MultiSelect(true)
                            .DisplayField("BranchID")
                            .ValueField("BranchID")
                            .HQHeightWidth(400, 300)
                            .HQParam(new StoreParameterCollection() {
                                new StoreParameter() { Name = "@UserID", Value ="HQ.userName", Mode = ParameterMode.Raw}
                            })
                            .Triggers(new FieldTrigger() { Icon = TriggerIcon.Clear, HideTrigger = false })
                            .Listeners(lst =>
                            {
                                lst.TriggerClick.Handler = "if (index == 0) { this.focus(true);this.clearValue(); }";
                                lst.Focus.Handler = "this.forceSelection=true;";
                            })
                            .LoadData()
                            , HQ.DateField().ID("FromDate").MarginSpec("5 0 0 0").HQLangCode("FromDate").Width(250)
                                .Value(DateTime.Now.ToShortDateString()).Format("dd/MM/yyyy")
                            , HQ.DateField().ID("ToDate").MarginSpec("5 0 0 0").HQLangCode("ToDate").Width(250)
                                .Value(DateTime.Now.ToShortDateString()).Format("dd/MM/yyyy")
                            , HQ.Button().ID("btnLoad").HQLangCode("LoadData").MarginSpec("5 0 5 105").Width(145).Icon(Icon.ArrowRefresh)
                                .Listeners(lst =>
                                {
                                    lst.Click.Fn = "btnLoad_Click";
                                })
                        )

                )//Filter Data
                
                , X.FieldSet().Layout(LayoutType.HBox).MarginSpec("0 0 5 5")
                .Title(Util.GetLang("Handle"))
                .LayoutConfig(new HBoxLayoutConfig { Align=HBoxAlign.Stretch, Pack = BoxPack.Center })
                .Items(
                //Column 3
                    X.Container().Layout(LayoutType.VBox).MarginSpec("5 0 0 0")
                    .Items(
                        HQ.Combo().ID("cboStatus")
                            .Name("cboStatus").HQLangCode("Status").HQProcedure("IN22002_pcStatus")
                            .HQColumnShow("Code,Descr").DisplayField("Descr").ValueField("Code")
                            .Width(250).HQHeightWidth(400, 300).MarginSpec("5 0 0 0")
                            .ForceSelection(true).HQAutoLoad(false)
                            .Triggers(new FieldTrigger() { Icon = TriggerIcon.Clear, HideTrigger = false })
                            .HQParam(new StoreParameterCollection() 
                            {
                                new StoreParameter() { Name = "@UserID", Value = "HQ.userName", Mode = ParameterMode.Raw },
                                new StoreParameter() { Name = "@LangID", Value = "HQ.langID", Mode = ParameterMode.Raw }  
                            })
                            .LoadData()
                            .Listeners(lst =>
                            {
                                lst.Change.Fn = "cboStatus_Change";
                                lst.TriggerClick.Handler = "if (index == 0) { this.clearValue();}";
                            })

                            , HQ.Combo().ID("cboHandle")
                            .Name("cboHandle").HQLangCode("Handle").HQProcedure("IN22002_pcHandle")
                            .HQColumnShow("Code,Descr").DisplayField("Descr").ValueField("Code")
                            .Width(250).HQHeightWidth(400, 300).MarginSpec("5 0 0 0")
                            .ForceSelection(true).HQAutoLoad(false)
                            .Triggers(new FieldTrigger() { Icon = TriggerIcon.Clear, HideTrigger = false })
                            .HQParam(new StoreParameterCollection() 
                            { 
                                new StoreParameter() { Name = "@UserID", Value = "HQ.userName", Mode = ParameterMode.Raw },
                                new StoreParameter() { Name = "@Status", Value = "App.cboStatus.getValue()", Mode = ParameterMode.Raw },
                                new StoreParameter() { Name = "@LangID", Value = "HQ.langID", Mode = ParameterMode.Raw }
                            })
                            .LoadData()
                            .Listeners(lst =>
                            {
                                lst.TriggerClick.Handler = "if (index == 0) { this.clearValue();}";
                            })
                            , HQ.Button().ID("btnProcess").HQLangCode("Handle").MarginSpec("5 0 5 105").Width(145)
                            .Listeners(p =>
                            {
                                p.Click.Fn = "btnProcess_Click";
                            })
                    )
                )// Process
            )//pnl Header

            , X.Panel().ID("pnlGrid")
            .Region(Region.Center)
            .Layout(LayoutType.Border)
            .Items(
                X.GridPanel().ID("grdPPC_StockRecovery")
        //.Hidden(true)
                    .Scroll(ScrollMode.Both)
                    .View(X.GridView().TrackOver(false).LoadMask(true))
                    .Region(Region.Center).Flex(1)
                    .SelectionMemory(false)
                        .Store(
                            X.Store()
                            .ID("stoPPC_StockRecovery")
                            .PageSize(50)
                            .Model(Util.GenerateModel(typeof(IN22002_pgLoadGrid_Result), "mdlIN22002_pgLoadGrid", ""))
                            .ServerProxy(X.AjaxProxy().Url(Url.Action("GetData"))).AutoLoad(false)
                            .Parameters(ps =>
                            {
                                ps.Add(new StoreParameter("DateFrom", "App.FromDate.getValue()", ParameterMode.Raw));
                                ps.Add(new StoreParameter("DateTo", "App.ToDate.getValue()", ParameterMode.Raw));
                                ps.Add(new StoreParameter("BranchID", "App.cboBranchID.getValue().join(',')", ParameterMode.Raw));
                            })
                            .Listeners(l =>
                            {
                                //l.BeforeLoad.Fn = "stoBeforeLoad";
                                l.Load.Fn = "stoLoad";
                                l.Update.Fn = "stoChanged";
                            })
                        )
                    .Listeners(p =>
                    {
                        ////p.BoxReady.Handler = "firstLoad();";
                    })
                    .SortableColumns(false)
        ////.ColumnModel(act => { act.Listeners.HeaderClick.Fn = "grdPPC_StockRecovery_HeaderClick"; })
                    .ColumnModel(
                        X.RowNumbererColumn().Width(40)

                        //Colum Check
                        , X.CheckColumn().ID("ColCheck").DataIndex("ColCheck").Width(30).Editable(true).HideTitleEl(true)
                        .HeaderItems(
                            HQ.Checkbox().ID("ColCheck_Header").MarginSpec("0 0 0 7")
                                .Listeners(l =>
                                {
                                    l.Change.Fn = "ColCheck_Header_Change";
                                })
                        )
                        .Listeners(lst =>
                            {
                                //lst.BeforeCheckChange.Fn = "ColCheck_BeforeCheckChange";
                            })
                        , X.Column().Text(Util.GetLang("IN22002_BranchName")).DataIndex("BranchName").Width(150)
                        , X.Column().Text(Util.GetLang("IN22002_SlsPerID")).DataIndex("SlsPerID").Width(100)
                        , X.Column().Text(Util.GetLang("IN22002_SlsPerName")).DataIndex("SlsPerName").Width(150)
                        , X.Column().Text(Util.GetLang("IN22002_CustID")).DataIndex("CustID").Width(100)
                        , X.Column().Text(Util.GetLang("IN22002_CustName")).DataIndex("CustName").Width(150)
                        , X.Column().Text(Util.GetLang("IN22002_InvtID")).DataIndex("InvtID").Width(100)
                        , X.Column().Text(Util.GetLang("IN22002_InvtName")).DataIndex("InvtName").Width(250)
                        , X.NumberColumn().Text(Util.GetLang("IN22002_Qty")).DataIndex("StkQty").Width(100).Align(Alignment.Right).Format("0,000")
                        , X.DateColumn().Text(Util.GetLang("IN22002_StkRecDate")).DataIndex("StkRecDate").Width(100).Format("dd/MM/yyyy")
                        , X.NumberColumn().Text(Util.GetLang("IN22002_ApproveQty"))
                        .DataIndex("ApproveQty").Format("0,000").Width(100).Align(Alignment.Right)
                        .Editor(X.NumberField().DecimalPrecision(0).MinValue(0))
                        , X.DateColumn().Text(Util.GetLang("IN22002_ExpDate")).DataIndex("ExpDate").Width(100).Format("dd/MM/yyyy")
                        , X.Column().Text(Util.GetLang("IN22002_Status")).DataIndex("Status").Width(100).Renderer("renderStatus")
                        
                        , X.CommandColumn().Width(150)
                        .Commands(
                            X.GridCommand()
                            .Text(Util.GetLang("Reject"))
                            .ToolTip(t => t.Text = Util.GetLang("Rejectrowchanges"))
                            .CommandName("reject")
                            .Icon(Icon.ArrowUndo)
                        )
                        .PrepareToolbar(t => t.Handler = "toolbar.items.get(0).setVisible(record.dirty);")
                        .Listeners(l => l.Command.Handler = "grdPPC_StockRecovery_Reject(record);")
                    )
                    .SelectionModel(X.RowSelectionModel().ID("slmPPC_StockRecovery").Mode(SelectionMode.Multi))
                   
                    .Plugins(
                        X.CellEditing()
                        .ClicksToEdit(1)
                        .Listeners(ls =>
                        {
                            ls.BeforeEdit.Fn = "grdPPC_StockRecovery_BeforeEdit";
                            ls.Edit.Fn = "grdPPC_StockRecovery_Edit";
                            ls.ValidateEdit.Fn = "grdPPC_StockRecovery_ValidateEdit";

                        })
                    )

                    .Features(
                        X.GridFilters()
                            .Local(true)
                            .Filters(
                                X.BooleanFilter().DataIndex("ColCheck"),
                                X.StringFilter().DataIndex("BranchName"),
                                X.StringFilter().DataIndex("SlsPerID"),
                                X.StringFilter().DataIndex("SlsPerName"),
                                X.StringFilter().DataIndex("CustID"),
                                X.StringFilter().DataIndex("CustName"),
                                X.DateFilter().DataIndex("ExpDate"),
                                X.StringFilter().DataIndex("InvtID"),
                                X.StringFilter().DataIndex("InvtName"),
                                X.NumericFilter().DataIndex("StkQty"),
                                X.DateFilter().DataIndex("StkRecDate"),
                                X.StringFilter().DataIndex("Status"),
                                X.NumericFilter().DataIndex("ApproveQty")
                            )
                    )
            )//pnl Grid

        )//frm Main
)//View port
)
