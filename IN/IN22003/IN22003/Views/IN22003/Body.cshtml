
@using Ext.Net;
@using Ext.Net.MVC;
@using HQ.eSkyFramework;
@using HQ.eSkyFramework.HQControl;
@using IN22003;
@{
    Layout = null;
    var X = Html.X();
    var HQ = Html.HQ();
}

@(
 X.Viewport()
.Layout(LayoutType.Fit)
.Items(
        X.FormPanel()
        .ID("frmMain")
        .KeyMap(Util.SetupKeyMap())
        .TopBar(Util.SetupToolbar("Print,Save,New,Delete", true, ""))
        .Layout(LayoutType.Border)
        .FieldDefaults(act => { act.LabelAlign = LabelAlign.Right; })
        .Listeners(lst =>
        {
            lst.BoxReady.Fn = "loadSourceCombo";
        })
        .Items(
            X.Panel().ID("pnlHeader")
            .Region(Region.North)
            .Layout(LayoutType.HBox)
            .AutoScroll(true)
            .Items(
                X.FieldSet().Layout(LayoutType.HBox).MarginSpec("0 0 5 5")
                .Title(Util.GetLang("FilterData"))
                .LayoutConfig(new HBoxLayoutConfig { Align=HBoxAlign.Stretch, Pack = BoxPack.Center })
                .Items(
                    X.Container().Layout(LayoutType.VBox).MarginSpec("5 0 0 0")
                    .Items(
                        HQ.DateField().ID("dateKPI").HQLangCode("IN22003_Year")
                        .MarginSpec("5 0 0 0").Width(250).Format("yyyy").Value(DateTime.Now.ToString("yyyy"))
                        .Type(DatePickerType.Month).AllowBlank(false)
                        .Listeners(l=>{
                            l.Expand.Fn = "dateKPI_expand";
                            l.Select.Fn = "dateKPI_Select";
                        })
                        
                        , HQ.Combo().ID("cboZone")
                        .Name("cboZone").HQLangCode("OM23100_Zone").HQProcedure("OM23101_pcZone")
                        .HQColumnShow("Code,Descr").DisplayField("Descr").ValueField("Code").HQAutoLoad(false)
                        .Width(250).HQHeightWidth(400, 300).MarginSpec("5 0 0 0").AllowBlank(false)
                        .ForceSelection(true).MaxLength(50).EnforceMaxLength(true)
                        .Triggers(new FieldTrigger() { Icon = TriggerIcon.Clear, HideTrigger = false })
                        .LoadData()
                        .Listeners(lst =>
                        {
                            lst.TriggerClick.Handler = "if (index == 0) { this.clearValue();}";
                            lst.Change.Fn = "cboZone_Change";
                        })
                        
                    , HQ.Combo().ID("cboTerritory")
                    .Name("cboTerritory").HQLangCode("Area").HQProcedure("OM23101_pcTerritory")
                    .HQColumnShow("Territory,Descr,Zone").DisplayField("Descr").ValueField("Territory")
                    .Width(250).HQHeightWidth(400, 300).MarginSpec("5 0 0 0").HQAutoLoad(false)
                    .ForceSelection(true).EnforceMaxLength(true).AllowBlank(false)
                    .Triggers(new FieldTrigger() { Icon = TriggerIcon.Clear, HideTrigger = false })
                    .HQParam(new StoreParameterCollection() 
                    { 
                        new StoreParameter() { Name = "@Zone", Value = "App.cboZone.getValue()", Mode = ParameterMode.Raw },
                        new StoreParameter() { Name = "@UserID", Value = "HQ.userName", Mode = ParameterMode.Raw } 
                    })
                    .LoadData()
                    .Listeners(lst =>
                    {
                        lst.TriggerClick.Handler = "if (index == 0) { this.clearValue();}";
                        lst.Change.Fn = "cboTerritory_Change";
                    })

                //, HQ.Combo().ID("cboState")
                //    .Name("cboState").HQLangCode("OM23100_State").HQProcedure("OM23101_pcState")
                //    .HQColumnShow("State,Descr").DisplayField("Descr").ValueField("State")
                //    .Width(250).HQHeightWidth(400, 300).MarginSpec("5 0 0 0").HQAutoLoad(false)
                //    .ForceSelection(true).EnforceMaxLength(true).AllowBlank(true)
                //    .Triggers(new FieldTrigger() { Icon = TriggerIcon.Clear, HideTrigger = false })
                //    .HQParam(new StoreParameterCollection() 
                //    { 
                //        new StoreParameter() { Name = "@Territory", Value = "App.cboTerritory.getValue()", Mode = ParameterMode.Raw },
                //        new StoreParameter() { Name = "@UserID", Value = "HQ.userName", Mode = ParameterMode.Raw } 
                //    })
                //    .LoadData()
                //    .Listeners(lst =>
                //    {
                //        lst.TriggerClick.Handler = "if (index == 0) { this.clearValue();}";
                //        lst.Change.Fn = "cboState_Change";
                //    })
                    
                , HQ.Combo().ID("cboBranchID").Name("cboBranchID").MarginSpec("5 0 10 0").Width(250)
                        .HQLangCode("BranchID").HQDBSys(false).HQProcedure("IN22003_pcBranchAllByUser")
                        .HQColumnShow("BranchID,BranchName").ForceSelection(true).MultiSelect(true).AllowBlank(false)
                        .DisplayField("BranchID")
                        .ValueField("BranchID")
                        .HQHeightWidth(400, 300)
                        .HQParam(new StoreParameterCollection() {
                            new StoreParameter() { Name = "@UserID", Value ="HQ.userName", Mode = ParameterMode.Raw},
                            new StoreParameter() { Name = "@Territory", Value ="App.cboTerritory.getValue()", Mode = ParameterMode.Raw}
                        })
                        .Triggers(new FieldTrigger() { Icon = TriggerIcon.Clear, HideTrigger = false })
                        .Listeners(lst =>
                        {
                            lst.TriggerClick.Handler = "if (index == 0) { this.focus(true);this.clearValue(); }";
                            lst.Focus.Handler = "this.forceSelection=true;";
                        })
                        .LoadData()
                    
                )
                , X.Container().Layout(LayoutType.VBox).MarginSpec("5 0 0 0")
                    .Items(
                        
                        HQ.Button().ID("btnLoad").HQLangCode("LoadData").MarginSpec("5 0 0 10").Width(150).Icon(Icon.ArrowRefresh)
                            .Listeners(lst =>
                            {
                                lst.Click.Fn = "btnLoad_Click";
                            })
                    )
                
            )
                
   
                , X.FieldSet().Layout(LayoutType.HBox).MarginSpec("0 0 5 5")
                .Title(Util.GetLang("Handle"))
                .LayoutConfig(new HBoxLayoutConfig { Align=HBoxAlign.Stretch, Pack = BoxPack.Center })
                .Items(
                 X.Container().Layout(LayoutType.VBox).MarginSpec("5 0 0 0")
                    .Items(
                        HQ.Combo().ID("cboStatus")
                            .Name("cboStatus").HQLangCode("Status").HQProcedure("IN22003_pcStatus")
                            .HQColumnShow("Code,Descr").DisplayField("Descr").ValueField("Code")
                            .Width(250).HQHeightWidth(400, 300).MarginSpec("5 0 0 0")
                            .ForceSelection(true).HQAutoLoad(false)
                            .Triggers(new FieldTrigger() { Icon = TriggerIcon.Clear, HideTrigger = false })
                            .HQParam(new StoreParameterCollection() 
                            {
                                new StoreParameter() { Name = "@UserID", Value = "HQ.userName", Mode = ParameterMode.Raw },
                                new StoreParameter() { Name = "@LangID", Value = "HQ.langID", Mode = ParameterMode.Raw }   
                            })
                            .LoadData()
                            .Listeners(lst =>
                            {
                                lst.Change.Fn = "cboStatus_Change";
                                lst.TriggerClick.Handler = "if (index == 0) { this.clearValue();}";
                            })

                            , HQ.Combo().ID("cboHandle")
                            .Name("cboHandle").HQLangCode("Handle").HQProcedure("IN22003_pcHandle")
                            .HQColumnShow("Code,Descr").DisplayField("Descr").ValueField("Code")
                            .Width(250).HQHeightWidth(400, 300).MarginSpec("5 0 0 0")
                            .ForceSelection(true).HQAutoLoad(false)
                            .Triggers(new FieldTrigger() { Icon = TriggerIcon.Clear, HideTrigger = false })
                            .HQParam(new StoreParameterCollection() 
                            { 
                                new StoreParameter() { Name = "@UserID", Value = "HQ.userName", Mode = ParameterMode.Raw },
                                new StoreParameter() { Name = "@Status", Value = "App.cboStatus.getValue()", Mode = ParameterMode.Raw },
                                new StoreParameter() { Name = "@LangID", Value = "HQ.langID", Mode = ParameterMode.Raw }  
                            })
                            .LoadData()
                            .Listeners(lst =>
                            {
                                lst.TriggerClick.Handler = "if (index == 0) { this.clearValue();}";
                            })
                            , HQ.DateField().ID("NewDateExp").HQLangCode("IN22003_Date")
                        .MarginSpec("5 0 10 0").Width(250).Format("dd/MM/yyyy").Value(DateTime.Now)
              
                    )

                //Column 4
                , X.Container().Layout(LayoutType.VBox).MarginSpec("5 0 0 0")
                    .Items(
                        HQ.Button().ID("btnProcess").HQLangCode("Handle").MarginSpec("5 0 0 10").Width(150)
                        .Listeners(p =>
                        {
                            p.Click.Fn = "btnProcess_Click";
                        })
                    )
                )
            )//pnl Header

            , X.Panel().ID("pnlGrid")
            .Region(Region.Center)
            .Layout(LayoutType.Border)
            .Items(
                X.GridPanel().ID("grdIN_StockRecoveryDet")
        //.Hidden(true)
                    .Scroll(ScrollMode.Both)
                    .View(X.GridView().TrackOver(false).LoadMask(true))
                    .Region(Region.Center).Flex(1)
                    .SelectionMemory(false)
                    .Store(
                        X.Store()
                        .ID("stoIN_StockRecoveryDet")
                        .PageSize(50)
                        .Model(Util.GenerateModel(typeof(IN22003_pgLoadGrid_Result), "mdlIN22003_pgLoadGrid", ""))
                        .ServerProxy(X.AjaxProxy().Url(Url.Action("GetData"))).AutoLoad(false)
                        .Parameters(ps =>
                        {
                            ps.Add(new StoreParameter("Date", "App.dateKPI.getValue()", ParameterMode.Raw));
                            ps.Add(new StoreParameter("Territory", "App.cboTerritory.getValue()", ParameterMode.Raw));
                            ps.Add(new StoreParameter("BranchID", "App.cboBranchID.getValue().join(',')", ParameterMode.Raw));
                        })
                        .Listeners(l =>
                        {
                            //l.BeforeLoad.Fn = "stoBeforeLoad";
                            l.Load.Fn = "stoLoad";
                            l.Update.Fn = "stoChanged";
                        })
                    )
                    .Listeners(p =>
                    {
                        ////p.BoxReady.Handler = "firstLoad();";
                    })
                    .SortableColumns(false)
        ////.ColumnModel(act => { act.Listeners.HeaderClick.Fn = "grdIN_StockRecoveryDet_HeaderClick"; })
                    .ColumnModel(
                        X.RowNumbererColumn().Width(40)

                        //Colum Check
                        , X.CheckColumn().ID("ColCheck").DataIndex("ColCheck").Width(30).Editable(true).HideTitleEl(true)
                        .HeaderItems(
                            HQ.Checkbox().ID("ColCheck_Header").MarginSpec("0 0 0 7")
                                .Listeners(l =>
                                {
                                    l.Change.Fn = "ColCheck_Header_Change";
                                })
                        )
                        .Listeners(lst =>
                            {
                                //lst.BeforeCheckChange.Fn = "ColCheck_BeforeCheckChange";
                            })
             
                        , X.Column().Text(Util.GetLang("IN22003_BranchName")).DataIndex("BranchName").Width(100)
                        , X.DateColumn().Text(Util.GetLang("IN22003_ExpDate")).DataIndex("ExpDate").Width(150).Format("dd/MM/yyyy")
                        , X.Column().Text(Util.GetLang("IN22003_InvtID")).DataIndex("InvtID").Width(100)
                        , X.Column().Text(Util.GetLang("IN22003_InvtName")).DataIndex("InvtName").Width(200)
                        , X.NumberColumn().Text(Util.GetLang("IN22003_StkQty")).DataIndex("StkQty").Width(100).Width(100).Align(Alignment.Right).Format("0,000")
                        , X.NumberColumn().Text(Util.GetLang("IN22003PriceStkQty")).DataIndex("PriceStkQty").Width(100).Align(Alignment.Right).Format("0,000")
                        
                        , X.ImageCommandColumn().Text(Util.GetLang(""))
                            .Commands(
                                    X.ImageCommand()
                                    .Icon(Icon.TabEdit)
                                    .ToolTip(t =>
                                    {
                                        t.Text = Util.GetLang("ShowApprStkQty");
                                    })                                                        
                                    .CommandName("Update")
                            )
                            .Listeners(l => {
                                l.Command.Handler = "PopupWin.showDetail(record);";
                               
                            })
                        
                        
                        , X.NumberColumn().Text(Util.GetLang("IN22003ApprStkQty"))
                        .DataIndex("ApproveStkQty").Format("0,000").Width(100).Align(Alignment.Right)
                        .Editor( X.NumberField().DecimalPrecision(0).MinValue(0))
                        , X.NumberColumn().Text(Util.GetLang("ApprPriceStkQty")).DataIndex("ApprovePriceStkQty").Width(100).Align(Alignment.Right).Format("0,000")
                        , X.Column().Text(Util.GetLang("IN22003_Status")).DataIndex("Status").Width(100).Renderer("renderStatus")
                        , X.CommandColumn().Width(150)
                        .Commands(
                            X.GridCommand()
                            .Text(Util.GetLang("Reject"))
                            .ToolTip(t => t.Text = Util.GetLang("Rejectrowchanges"))
                            .CommandName("reject")
                            .Icon(Icon.ArrowUndo)
                        )
                        .PrepareToolbar(t => t.Handler = "toolbar.items.get(0).setVisible(record.dirty);")
                        .Listeners(l => l.Command.Handler = "grdIN_StockRecoveryDet_Reject(record);")
                    )
                    .SelectionModel(X.RowSelectionModel().ID("slmIN_StockRecoveryDet").Mode(SelectionMode.Multi))

                    .Plugins(
                        X.CellEditing()
                        .ClicksToEdit(1)
                        .Listeners(ls =>
                        {
                            ls.BeforeEdit.Fn = "grdIN_StockRecoveryDet_BeforeEdit";
                            ls.Edit.Fn = "grdIN_StockRecoveryDet_Edit";
                            ls.ValidateEdit.Fn = "grdIN_StockRecoveryDet_ValidateEdit";

                        })
                    )

                    .Features(
                        X.GridFilters()
                            .Local(true)
                            .Filters(
                                X.BooleanFilter().DataIndex("ColCheck"),
                                X.StringFilter().DataIndex("StateName"),
                                X.StringFilter().DataIndex("BranchName"),
                                X.DateFilter().DataIndex("ExpDate"),
                                X.StringFilter().DataIndex("InvtID"),
                                X.StringFilter().DataIndex("InvtName"),
                                X.NumericFilter().DataIndex("StkQty"),
                                X.NumericFilter().DataIndex("PriceStkQty"),
                                X.StringFilter().DataIndex("Status"),
                                X.NumericFilter().DataIndex("ApproveStkQty"),
                                X.NumericFilter().DataIndex("ApprovePriceStkQty")

                            )
                    )
            )//pnl Grid

        )//frm Main
)//View port
)
@(X.Window()
        .ID("winDetail")
        .Hidden(true)
        .Layout(LayoutType.Fit)
        .Height(300)
        .Width(550)
        .Modal(true)
        .Closable(false)
        .Buttons(
            X.Button().ID("btnLotDel").Text(Util.GetLang("DeleteRights"))
                //.Listeners(p => p.Click.Fn = "PopupWin.btnLotDel_Click")
            , X.Button().ID("btnOK").Text(Util.GetLang("OK"))
                .Listeners(p => p.Click.Fn = "PopupWin.btnOK_Click")
        )
        .BottomBar(
            X.Toolbar()
            .Border(false)
            .Items(
                X.Label().ID("lblLotQtyAvail").Width(200).MarginSpec("0 0 0 5")
            )
        )
        .Items(
            X.GridPanel().ID("grdPopUp")
            .Border(true).BorderSpec("1 0 0 0")
            .StoreID("stoPopUp")
            .ColumnModel(
                X.RowNumbererColumn()
                
                , X.Column().ID("colLotQty").DataIndex("Qty").Text(Util.GetLang("Qty"))
                .Width(75).Align(Alignment.Right).Editor(X.NumberField().MinValue(0).DecimalPrecision(0))

                , X.DateColumn().ID("NewExpDate").DataIndex("ExpDate").Text(Util.GetLang("ExpDate")).Editor(X.DateField())
            )
            //.Listeners(lst =>
            //{
            //    lst.Select.Handler = "HQ.focus='lot';";
            //    lst.Edit.Fn = "PopupWinLot.grdLot_Edit";
            //    lst.BeforeEdit.Fn = "PopupWinLot.grdLot_BeforeEdit";
            //    lst.ValidateEdit.Fn = "PopupWinLot.grdLot_ValidateEdit";
            //    lst.SelectionChange.Fn = "PopupWinLot.grdLot_SelectionChange";
            //})
            .SelectionModel(X.RowSelectionModel().ID("slmPopUp").Mode(SelectionMode.Single))
            .View(X.GridView().TrackOver(false))
            .Plugins(X.CellEditing().ClicksToEdit(1))
        )
)