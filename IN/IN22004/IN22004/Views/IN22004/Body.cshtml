
@using Ext.Net;
@using Ext.Net.MVC;
@using HQ.eSkyFramework;
@using HQ.eSkyFramework.HQControl;
@using IN22004;
@{
    Layout = null;
    var X = Html.X();
    var HQ = Html.HQ();
}

@(
 X.Viewport()
.Layout(LayoutType.Fit)
.Items(
        X.FormPanel()
        .ID("frmMain")
        .BodyPadding(0)
        .KeyMap(Util.SetupKeyMap())
        .TopBar(Util.SetupToolbar("Print,Save,New,Delete", true, ""))
        .Layout(LayoutType.Border)
            .FieldDefaults(act => { act.LabelAlign = LabelAlign.Right; act.LabelWidth = 120; })
        .Listeners(lst =>
        {
            lst.BoxReady.Fn = "loadSourceCombo";
        })
        .Items(
            X.Panel().ID("pnlHeader")
            .Region(Region.North)
            .Layout(LayoutType.HBox)
            .AutoScroll(true)
            .Items(

                X.FieldSet().Layout(LayoutType.HBox).MarginSpec("0 0 5 5")
                .Title(Util.GetLang("FilterData"))
                .LayoutConfig(new HBoxLayoutConfig { Align=HBoxAlign.Stretch, Pack = BoxPack.Center })
                .Items(
                //Column 1
                    X.Container().Layout(LayoutType.VBox).MarginSpec("5 0 0 0")
                        .Items(
                            HQ.DateField().ID("dateKPI").HQLangCode("IN22004_Year")
                            .MarginSpec("5 0 0 0").Width(300).Format("yyyy").Value(DateTime.Now.ToString("yyyy"))
                            .Type(DatePickerType.Month).AllowBlank(false)
                            .Listeners(l =>
                            {
                                l.Expand.Fn = "dateKPI_expand";
                                l.Select.Fn = "dateKPI_Select";
                            })

                        , HQ.Combo().ID("cboBranchID")
                            .Name("cboBranchID").HQLangCode("IN22004_BranchID").HQProcedure("IN22004_pcLoadBranchAllByUser")
                            .HQParam(new StoreParameterCollection() 
                            { 
                                new StoreParameter() { Name = "@UserID", Value = "HQ.userName", Mode = ParameterMode.Raw }
                            })
                            .HQColumnShow("BranchID,BranchName,Addr").DisplayField("BranchID").ValueField("BranchID")
                            .Width(300).HQHeightWidth(400, 300).MarginSpec("5 0 0 0").AllowBlank(false)
                            .ForceSelection(true).MultiSelect(true)
                            .Triggers(new FieldTrigger() { Icon = TriggerIcon.Clear, HideTrigger = false })
                            .LoadData()
                            .Listeners(lst =>
                            {
                                lst.TriggerClick.Handler = "if (index == 0) { this.clearValue();}";
                                lst.Change.Fn = "cboBranchID_Change";
                                lst.Select.Fn = "cboBranchID_Select";
                            })
                        , HQ.Button().ID("btnLoad").HQLangCode("LoadData").MarginSpec("5 0 5 125").Width(175).Icon(Icon.ArrowRefresh)
                                .Listeners(lst =>
                                {
                                    lst.Click.Fn = "btnLoad_Click";
                                })
                        )

             
                )
        //Column 3
                , X.FieldSet().Layout(LayoutType.HBox).MarginSpec("0 0 5 5")
                .Title(Util.GetLang("IN22004_Information"))
                .LayoutConfig(new HBoxLayoutConfig { Align=HBoxAlign.Stretch, Pack = BoxPack.Center })
                .Items(
                        X.Container().Layout(LayoutType.VBox).MarginSpec("5 0 0 0")
                        .Items(
                            HQ.TextBox().ID("SLND").HQLangCode("IN22004_SLND").DataIndex("SLND").Width(300).ReadOnly(true)
                            , HQ.TextBox().ID("SLPB").HQLangCode("IN22004_SLPB").DataIndex("SLPB").Width(300).ReadOnly(true)
                            , HQ.TextBox().ID("SLCL").HQLangCode("IN22004_SLCL").DataIndex("SLCL").Width(300).ReadOnly(true)
                            .MarginSpec("0 0 10 0")

                        )
                )
        //Column 4
                , X.FieldSet().Layout(LayoutType.HBox).MarginSpec("0 0 5 5")
                .Title(Util.GetLang("Handle"))
                .LayoutConfig(new HBoxLayoutConfig { Align=HBoxAlign.Stretch, Pack = BoxPack.Center })
                .Items(
                    X.Container().Layout(LayoutType.VBox).MarginSpec("5 0 0 0")
                        .Items(
                            HQ.Combo().ID("cboStatus")
                                .Name("cboStatus").HQLangCode("Status").HQProcedure("IN22004_pcStatus")
                                .HQColumnShow("Code,Descr").DisplayField("Descr").ValueField("Code")
                                .Width(250).HQHeightWidth(400, 300).MarginSpec("5 0 0 0")
                                .ForceSelection(true).HQAutoLoad(false)
                                .Triggers(new FieldTrigger() { Icon = TriggerIcon.Clear, HideTrigger = false })
                                .HQParam(new StoreParameterCollection() 
                                {
                                    new StoreParameter() { Name = "@UserID", Value = "HQ.userName", Mode = ParameterMode.Raw },
                                    new StoreParameter() { Name = "@LangID", Value = "HQ.langID", Mode = ParameterMode.Raw }   
                                })
                                .LoadData()
                                .Listeners(lst =>
                                {
                                    lst.Change.Fn = "cboStatus_Change";
                                    lst.TriggerClick.Handler = "if (index == 0) { this.clearValue();}";
                                })

                                , HQ.Combo().ID("cboHandle")
                                .Name("cboHandle").HQLangCode("Handle").HQProcedure("IN22004_pcHandle")
                                .HQColumnShow("Code,Descr").DisplayField("Descr").ValueField("Code")
                                .Width(250).HQHeightWidth(400, 300).MarginSpec("5 0 0 0")
                                .ForceSelection(true).HQAutoLoad(false)
                                .Triggers(new FieldTrigger() { Icon = TriggerIcon.Clear, HideTrigger = false })
                                .HQParam(new StoreParameterCollection() 
                                { 
                                    new StoreParameter() { Name = "@UserID", Value = "HQ.userName", Mode = ParameterMode.Raw },
                                    new StoreParameter() { Name = "@Status", Value = "App.cboStatus.getValue()", Mode = ParameterMode.Raw },
                                    new StoreParameter() { Name = "@LangID", Value = "HQ.langID", Mode = ParameterMode.Raw }  
                                })
                                .LoadData()
                                .Listeners(lst =>
                                {
                                    lst.TriggerClick.Handler = "if (index == 0) { this.clearValue();}";
                                })
                                , HQ.Button().ID("btnProcess").HQLangCode("Handle").MarginSpec("5 0 5 125").Width(125)
                                .Listeners(p =>
                                {
                                    p.Click.Fn = "btnProcess_Click";
                                })
                        )

                )
            )//pnl Header

            , X.Panel().ID("pnlGrid")
            .Region(Region.Center)
            .Layout(LayoutType.Border)
            .Items(
                X.GridPanel().ID("grdIN_StockRecoveryCust")
        //.Hidden(true)
                    .Scroll(ScrollMode.Both)
                    .View(X.GridView().TrackOver(false).LoadMask(true))
                    .Region(Region.Center).Flex(1)
                    .SelectionMemory(false)
                        .Store(
                            X.Store()
                            .ID("stoIN_StockRecoveryCust")
                            .PageSize(50)
                            .Model(Util.GenerateModel(typeof(IN22004_pgLoadGrid_Result), "mdlIN22004_pgLoadGrid", ""))
                            .ServerProxy(X.AjaxProxy().Url(Url.Action("GetData"))).AutoLoad(false)
                            .Parameters(ps =>
                            {
                                ps.Add(new StoreParameter("Date", "App.dateKPI.getValue()", ParameterMode.Raw));
                                ps.Add(new StoreParameter("BranchID", "App.cboBranchID.getValue().join(',')", ParameterMode.Raw));
                            })
                            .Listeners(l =>
                            {
                                //l.BeforeLoad.Fn = "stoBeforeLoad";
                                l.Load.Fn = "stoLoad";
                                l.Update.Fn = "stoChanged";
                            })
                        )
                    .Listeners(p =>
                    {
                        ////p.BoxReady.Handler = "firstLoad();";
                    })
                    .SortableColumns(false)
        ////.ColumnModel(act => { act.Listeners.HeaderClick.Fn = "grdIN_StockRecoveryCust_HeaderClick"; })
                    .ColumnModel(
                        X.RowNumbererColumn().Width(40)

                        //Colum Check
                        , X.CheckColumn().ID("ColCheck").DataIndex("ColCheck").Width(30).Editable(true).HideTitleEl(true)
                        .HeaderItems(
                            HQ.Checkbox().ID("ColCheck_Header").MarginSpec("0 0 0 7")
                                .Listeners(l =>
                                {
                                    l.Change.Fn = "ColCheck_Header_Change";
                                })
                        )
                        .Listeners(lst =>
                            {
                                //lst.BeforeCheckChange.Fn = "ColCheck_BeforeCheckChange";
                            })
                        , X.Column().Text(Util.GetLang("IN22004_BranchName")).DataIndex("BranchName").Width(150)
                        , X.Column().Text(Util.GetLang("IN22004_SlsPerID")).DataIndex("SlsPerID").Width(100)
                        , X.Column().Text(Util.GetLang("IN22004_SlsPerName")).DataIndex("SlsPerName").Width(150)
                        , X.Column().Text(Util.GetLang("IN22004_CustID")).DataIndex("CustID").Width(100)
                        , X.Column().Text(Util.GetLang("IN22004_CustName")).DataIndex("CustName").Width(150)
                        , X.Column().Text(Util.GetLang("IN22004_InvtID")).DataIndex("InvtID").Width(100)
                        , X.Column().Text(Util.GetLang("IN22004_InvtName")).DataIndex("InvtName").Width(250)
                        //, X.DateColumn().Text(Util.GetLang("IN22003_ExpDate")).DataIndex("ExpDate").Width(150).Format("dd/MM/yyyy")
                        , X.DateColumn().Text(Util.GetLang("IN22004_NewExpDate")).DataIndex("NewExpDate").Width(100).Format("dd/MM/yyyy")
                        , X.NumberColumn().Text(Util.GetLang("IN22004_QtyGiveBack")).DataIndex("QtyGiveBack").Width(100).Align(Alignment.Right).Format("0,000")
                                .Editor(
                                    X.NumberField().DecimalPrecision(0).MinValue(0)
                                    //.Listeners(a => { a.Change.Fn = "ProcessQty"; })
                                )

                        , X.DateColumn().Text(Util.GetLang("IN22004_StkRecDate")).DataIndex("StkRecDate").Width(100).Format("dd/MM/yyyy")
                        , X.Column().Text(Util.GetLang("IN22004_Status")).DataIndex("Status").Width(100).Renderer("renderStatus")


                        , X.CommandColumn().Width(150)
                        .Commands(
                            X.GridCommand()
                            .Text(Util.GetLang("Reject"))
                            .ToolTip(t => t.Text = Util.GetLang("Rejectrowchanges"))
                            .CommandName("reject")
                            .Icon(Icon.ArrowUndo)
                        )
                        .PrepareToolbar(t => t.Handler = "toolbar.items.get(0).setVisible(record.dirty);")
                        .Listeners(l => l.Command.Handler = "grdIN_StockRecoveryCust_Reject(record);")
                    )
                    .SelectionModel(X.RowSelectionModel().ID("slmIN_StockRecoveryCust").Mode(SelectionMode.Multi))
                    .Listeners(lst =>
                    {
                        lst.Select.Fn = "grdIN_StockRecoveryCust_Select";

                    })
                    .Plugins(
                        X.CellEditing()
                        .ClicksToEdit(1)
                        .Listeners(ls =>
                        {
                            ls.BeforeEdit.Fn = "grdIN_StockRecoveryCust_BeforeEdit";
                            ls.Edit.Fn = "grdIN_StockRecoveryCust_Edit";
                            ls.ValidateEdit.Fn = "grdIN_StockRecoveryCust_ValidateEdit";

                        })
                    )

                    .Features(
                        X.GridFilters()
                            .Local(true)
                            .Filters(
                                X.BooleanFilter().DataIndex("ColCheck"),
                                X.StringFilter().DataIndex("BranchName"),
                                X.StringFilter().DataIndex("SlsPerID"),
                                X.StringFilter().DataIndex("SlsPerName"),
                                X.StringFilter().DataIndex("CustID"),
                                X.StringFilter().DataIndex("CustName"),
                                X.DateFilter().DataIndex("NewExpDate"),
                                X.BooleanFilter().DataIndex("InvtID"),
                                X.StringFilter().DataIndex("InvtName"),
                                X.NumericFilter().DataIndex("QtyGiveBack"),
                                X.DateFilter().DataIndex("StkRecDate"),
                                X.StringFilter().DataIndex("Status")               
                            )
                    )
            )//pnl Grid

        )//frm Main
)//View port
)
