@using Ext.Net;
@using Ext.Net.MVC;
@using HQ.eSkyFramework;
@using HQ.eSkyFramework.HQControl;
@using IN10400;

@model System.Collections.IEnumerable
@{
    Layout = null;
    var X = Html.X();
    ViewBag.Title = "IN10400";
    var acc = Session["IN10400"] as AccessRight;
}
<!DOCTYPE html>
<html>
 <!--Không thay đổi phần head Đổi mã màn hình IN10400.js tùy theo màn hình đổi lại-->
<head>
    <meta name="viewport" content="width=device-width" />
   <script src='@Url.Content("Scripts/hq.language"+Current.LangID+".js?"+DateTime.Now.ToString("yyyyMMddss"))' type="text/javascript"></script>
    <script src='@Url.Content("Scripts/hq.common.js?"+DateTime.Now.ToString("yyyyMMddss"))' type="text/javascript"></script>
    <script src='@Url.Content("Scripts/screen/IN10400.js?"+DateTime.Now.ToString("yyyyMMddss"))' type="text/javascript"></script>
    <style>
        .x-grid-row-over .x-grid-cell-inner {
            font-weight : bold;
        }
    </style>
    <script>
        
        HQ.cpnyID = '@ViewBag.BranchID';
        HQ.langID = '@Current.LangID';
        HQ.userName = '@Current.UserName';
        HQ.businessDate = new Date()
        HQ.isUpdate = HQ.util.toBool('@acc.Update.ToString()');
        HQ.isInsert = HQ.util.toBool('@acc.Insert.ToString()');
        HQ.isDelete = HQ.util.toBool('@acc.Delete.ToString()');  
        HQ.inSite = '@ViewBag.INSite'
        HQ.isUpdate = false;
    </script>  
    <title>@ViewBag.Title</title>
</head>
<body>   
    @(X.ResourceManager().Theme((Theme)Enum.Parse(typeof(Theme),Current.Theme.PassNull()==""?"Gray":Current.Theme.PassNull())))
  
         @*@(
            X.Store().ID("stoTransHeader")
            .AutoLoad(false)
            .Model(Util.GenerateModel(typeof(PO_TransportHeader), "mdlAR_TransHeader", ""))       
            .Proxy(
                X.AjaxProxy()                
                .Url(Url.Action("GetTransHeaderByID", "IN10400"))                
                .ActionMethods(action =>
                {
                    action.Read = HttpMethod.POST;
                })
                .Reader(X.JsonReader().Root("data").TotalProperty("totaldata"))
            ) 
            .Parameters(ps =>
            {

                ps.Add(new StoreParameter("TransID", "App.cboHeaderID.getValue()", ParameterMode.Raw));
            })      
            .Listeners(p=>p.Load.Fn="stoTransHeader_Load" )
        )*@


        @X.GridFilters()<!--Khi cache cho grid-->
        @X.ProgressBarPager()<!--Khi cache cho grid -->   
        <!-- Gọi hàm Body trong IN10400Controller để dựng view Body.cshtml, mục đích tạo cache. -->            
       

@(
    X.Store().ID("stoBatch")
    .AutoLoad(false)
    .Model(Util.GenerateModel(typeof(IN10400_pcINAdjustmentBatch_Result), "mdlBatch","BatNbr"))
    .Proxy(
        X.AjaxProxy()
        .Url(Url.Action("GetBatch", "IN10400"))
        .ActionMethods(action =>{
            action.Read = HttpMethod.POST;
        })
        .Reader(X.JsonReader().Root("data"))
    )
    .Parameters(ps =>{
        ps.Add(new StoreParameter("branchID", "App.txtBranchID.getValue()", ParameterMode.Raw));
    })
    .Listeners(p => {
        p.Load.Fn = "stoBatch_Load";
        p.BeforeLoad.Fn = "stoBatch_BeforeLoad"; 
    })
)

@(
    X.Store()
    .ID("stoUserDefault")
    .AutoLoad(false)
    .Model(Util.GenerateModel(typeof (OM_UserDefault),"mdlUserDefault",""))
    .Proxy(
        X.AjaxProxy()
        .Url(Url.Action("GetUserDefault", "IN10400"))
        .ActionMethods(action => { action.Read = HttpMethod.POST; })
        .Reader(X.JsonReader().Root("data")))
)

@(
    X.Store()
    .ID("stoSetup")
    .AutoLoad(false)
    .Model(Util.GenerateModel(typeof (IN_Setup),"mdlSetup",""))
    .Proxy(
        X.AjaxProxy()
        .Url(Url.Action("GetSetup", "IN10400"))
        .ActionMethods(action => { action.Read = HttpMethod.POST; })
        .Reader(X.JsonReader().Root("data")))
)




@*@(X.Store().ID("stoTrans")
    .AutoLoad(false).PageSize(50)
    .Model(Util.GenerateModel(typeof(IN10400_pgAdjustmentLoad_Result), "mdlTrans", ""))
    .Proxy(
        X.AjaxProxy()
        .Url(Url.Action("GetTrans", "IN10400"))
        .ActionMethods(action =>
        {
            action.Read = HttpMethod.POST;
        })
        .Reader(X.JsonReader().Root("data"))
    )
    .Parameters(ps =>
    {
        ps.Add(new StoreParameter("BatNbr", "App.cboBatNbr.getValue()", ParameterMode.Raw));
        ps.Add(new StoreParameter("BranchID", "App.txtBranchID.getValue()", ParameterMode.Raw));
    })
    .Listeners(p => {
        p.Load.Fn = "stoDetail_Load";
        p.BeforeLoad.Fn= "stoTrans_BeforeLoad";
    })
)*@
@(
    X.Store().ID("stoOldTrans")
    .AutoLoad(false)
    .Model(Util.GenerateModel(typeof(IN10400_pgAdjustmentLoad_Result), "mdlOldTrans", ""))
    .Proxy(
        X.AjaxProxy()
        .Url(Url.Action("GetTrans", "IN10400"))
        .ActionMethods(action =>
        {
            action.Read = HttpMethod.POST;
        })
        .Reader(X.JsonReader().Root("data"))
    )
)

 @(
    X.Store()
    .ID("stoUnit")
    .Model(Util.GenerateModel(typeof (IN10400_pcUnit_Result),"mdlUnit", "FromUnit"))
    .Proxy(
        X.AjaxProxy()
        .Url(Url.Action("GetUnit", "IN10400"))
        .ActionMethods(action => { action.Read = HttpMethod.POST; })
        .Reader(X.JsonReader().Root("data"))
    )
)

 @(
    X.Store()
    .ID("stoUnitConversion")
    .AutoLoad(false)
    .Model(Util.GenerateModel(typeof (IN10400_pcUnitConversion_Result),"mdlUnitConversion", ""))
    .Proxy(
        X.AjaxProxy()
        .Url(Url.Action("GetUnitConversion", "IN10400"))
        .ActionMethods(action => { action.Read = HttpMethod.POST; })
        .Reader(X.JsonReader().Root("data")))
)

@(
    X.Store()
    .ID("stoItemSite")
    .AutoLoad(false)
    .Model(Util.GenerateModel(typeof (IN_ItemSite),"mdlItemSite",""))
    .Proxy(
        X.AjaxProxy()
        .Url(Url.Action("GetItemSite", "IN10400"))
        .ActionMethods(action => { action.Read = HttpMethod.POST; })
        .Reader(X.JsonReader().Root("data")))
)

    @(
    X.Store()
    .ID("stoCalcLot")
    .AutoLoad(false)
    .Model(Util.GenerateModel(typeof (IN_ItemLot),"mdlCalcLot",""))
    .Proxy(
        X.AjaxProxy()
        .Url(Url.Action("GetLot", "IN10400"))
        .ActionMethods(action => action.Read = HttpMethod.POST)
        .Reader(X.JsonReader().Root("data"))
    )
)


@(
    X.Store()
    .ID("stoLotTrans")
    .AutoLoad(false)
    .Model(Util.GenerateModel(typeof (IN_LotTrans),"mdlLotTrans","",true))
    .Proxy(
        X.AjaxProxy()
        .Url(Url.Action("GetLotTrans", "IN10400"))
        .ActionMethods(action => action.Read = HttpMethod.POST)
        .Reader(X.JsonReader().Root("data"))
    )
    .Listeners(p => {
        p.Load.Fn = "stoDetail_Load";
    })
    .Parameters(ps => { 
        ps.Add(new StoreParameter("batNbr", "App.cboBatNbr.getValue()", ParameterMode.Raw));
        ps.Add(new StoreParameter("branchID", "App.txtBranchID.getValue()", ParameterMode.Raw)); 
    })
)

@(
    X.Store()
    .ID("stoItemLot")
    .AutoLoad(false)
    .Model(Util.GenerateModel(typeof (IN_ItemLot),"mdlItemLot",""))
    .Proxy(
        X.AjaxProxy()
        .Url(Url.Action("GetItemLot", "IN10400"))
        .ActionMethods(action => action.Read = HttpMethod.POST)
        .Reader(X.JsonReader().Root("data"))
    )
)

@(
    X.Store()
    .ID("stoOldLotTrans")
    .AutoLoad(false)
    .Model(Util.GenerateModel(typeof (IN_LotTrans),"mdlOldLotTrans","",true))
    .Proxy(
        X.AjaxProxy()
        .Url(Url.Action("GetLotTrans", "IN10400"))
        .ActionMethods(action => action.Read = HttpMethod.POST)
        .Reader(X.JsonReader().Root("data"))
    )
)
@{Html.RenderAction("Body", new { lang=@Current.LangID});}   
</body>
</html>

