@using Ext.Net;
@using Ext.Net.MVC;
@using HQ.eSkyFramework;
@using HQ.eSkyFramework.HQControl;
@using IN10300;

@model System.Collections.IEnumerable
@{
    Layout = null;
    var X = Html.X();
    var HQ = Html.HQ();
    ViewBag.Title = "IN10300";
    var acc = Session["IN10300"] as AccessRight;
}
<!DOCTYPE html>
<html>
<head>
    <meta name="viewport" content="width=device-width" />
    <script src='@Url.Content("Scripts/hq.language"+Current.LangID+".js?"+DateTime.Now.ToString("yyyyMMddss"))' type="text/javascript"></script>
    <script src='@Url.Content("Scripts/hq.common.js?"+DateTime.Now.ToString("yyyyMMddss"))' type="text/javascript"></script>
    <script src='@Url.Content("Scripts/screen/IN10300.js?"+DateTime.Now.ToString("yyyyMMddHHss"))' type="text/javascript"></script>

    <style>
        .x-grid-row-over .x-grid-cell-inner {
            font-weight : bold;
        }
    </style>
    <script>
        HQ.cpnyID = '@ViewBag.BranchID';
        HQ.hideRptExpDate = HQ.util.toBool('@ViewBag.hideRptExpDate');
        HQ.hideWarehouss = HQ.util.toBool('@ViewBag.hideWarehouss');
        HQ.readOnlyReasonCD = HQ.util.toBool('@ViewBag.readOnlyReasonCD');
        HQ.hideExpectedDateRcptDate = HQ.util.toBool('@ViewBag.hideExpectedDateRcptDate');
        HQ.allowDescrBlank = HQ.util.toBool('@ViewBag.allowDescrBlank');
        HQ.allowNoteBlank = HQ.util.toBool('@ViewBag.allowNoteBlank');
        HQ.isSetDefaultShipViaID = HQ.util.toBool('@ViewBag.isSetDefaultShipViaID');
        HQ.isSetDefaultSiteID = HQ.util.toBool('@ViewBag.isSetDefaultSiteID');
        HQ.dflReasonCD = HQ.util.toBool('@ViewBag.dflReasonCD');
        HQ.showImprtExprt = HQ.util.toBool('@ViewBag.showImprtExprt');
        HQ.langID = '@Current.LangID';
        HQ.userName = '@Current.UserName';
        HQ.businessDate = new Date();
        HQ.isUpdate = HQ.util.toBool('@acc.Update.ToString()');
        HQ.isInsert = HQ.util.toBool('@acc.Insert.ToString()');
        HQ.isDelete = HQ.util.toBool('@acc.Delete.ToString()');
    </script>  
    <title>@ViewBag.Title</title>
</head>
<body>   
@(X.ResourceManager().Theme((Theme)Enum.Parse(typeof(Theme),Current.Theme.PassNull()==""?"Gray":Current.Theme.PassNull())))
        @X.GridFilters()<!--Khi cache cho grid-->
        @X.ProgressBarPager()<!--Khi cache cho grid -->   


@(
    X.Store().ID("stoBatch")
    .AutoLoad(false)
    .Model(Util.GenerateModel(typeof(IN10300_pcBatch_Result), "mdlBatch","BatNbr"))
    .Proxy(
        X.AjaxProxy()
        .Url(Url.Action("GetBatch", "IN10300"))
        .ActionMethods(action =>{
            action.Read = HttpMethod.POST;
        })
        .Reader(X.JsonReader().Root("data"))
    )
    .Parameters(ps =>{
        ps.Add(new StoreParameter("branchID", "App.txtBranchID.getValue()", ParameterMode.Raw));
    })
    .Listeners(p => {
        p.Load.Fn = "stoBatch_Load";
        p.BeforeLoad.Fn = "stoBatch_BeforeLoad"; 
    })
)

@(
    X.Store()
    .ID("stoUserDefault")
    .AutoLoad(false)
    .Model(Util.GenerateModel(typeof (IN10300_pdOM_UserDefault_Result),"mdlUserDefault",""))
    .Proxy(
        X.AjaxProxy()
        .Url(Url.Action("GetUserDefault", "IN10300"))
        .ActionMethods(action => { action.Read = HttpMethod.POST; })
        .Reader(X.JsonReader().Root("data")))
        .Parameters(ps =>
        {
            ps.Add(new StoreParameter("BranchID", "HQ.cpnyID", ParameterMode.Raw));
        })
)

@(
    X.Store()
    .ID("stoSetup")
    .AutoLoad(false)
    .Model(Util.GenerateModel(typeof (IN_Setup),"mdlSetup",""))
    .Proxy(
        X.AjaxProxy()
        .Url(Url.Action("GetSetup", "IN10300"))
        .ActionMethods(action => { action.Read = HttpMethod.POST; })
        .Reader(X.JsonReader().Root("data")))
)

@(
    X.Store()
    .ID("stoCalcLot").SortOnLoad(false)
    .AutoLoad(false)
    .Model(Util.GenerateModel(typeof (IN_ItemLot),"mdlCalcLot",""))
    .Proxy(
        X.AjaxProxy()
        .Url(Url.Action("GetLot", "IN10300"))
        .ActionMethods(action => action.Read = HttpMethod.POST)
        .Reader(X.JsonReader().Root("data"))
    )
)


@(
    X.Store()
    .ID("stoLotTrans")
    .AutoLoad(false)
    .Model(Util.GenerateModel(typeof (IN_LotTrans),"mdlLotTrans","",true))
    .Proxy(
        X.AjaxProxy()
        .Url(Url.Action("GetLotTrans", "IN10300"))
        .ActionMethods(action => action.Read = HttpMethod.POST)
        .Reader(X.JsonReader().Root("data"))
    )
    .Listeners(p => {
        p.Load.Fn = "stoDetail_Load";
    })
    .Parameters(ps => { 
        ps.Add(new StoreParameter("batNbr", "App.cboBatNbr.getValue()", ParameterMode.Raw));
        ps.Add(new StoreParameter("branchID", "App.txtBranchID.getValue()", ParameterMode.Raw)); 
    })
)






@(
    X.Store()
    .ID("stoItemLot")
    .AutoLoad(false)
    .Model(Util.GenerateModel(typeof (IN_ItemLot),"mdlItemLot",""))
    .Proxy(
        X.AjaxProxy()
        .Url(Url.Action("GetItemLot", "IN10300"))
        .ActionMethods(action => action.Read = HttpMethod.POST)
        .Reader(X.JsonReader().Root("data"))
    )
)

@(
    X.Store()
    .ID("stoOldLotTrans")
    .AutoLoad(false)
    .Model(Util.GenerateModel(typeof (IN_LotTrans),"mdlOldLotTrans","",true))
    .Proxy(
        X.AjaxProxy()
        .Url(Url.Action("GetLotTrans", "IN10300"))
        .ActionMethods(action => action.Read = HttpMethod.POST)
        .Reader(X.JsonReader().Root("data"))
    )
)
@(X.Store().ID("stoAllInvtINSite")
    .AutoLoad(false)
    .Model(Util.GenerateModel(typeof(IN10300_pgTransferLoad_Result), "mdlAllInvtINSite", ""))
    .Proxy(
        X.AjaxProxy()
        .Url(Url.Action("GetAllInvtINSite", "IN10300"))
        .ActionMethods(action =>
        {
            action.Read = HttpMethod.POST;
        })
        .Reader(X.JsonReader().Root("data"))
    )
    .Parameters(ps =>
    {
        ps.Add(new StoreParameter("UserID", "HQ.userName", ParameterMode.Raw));
        ps.Add(new StoreParameter("CpnyID", "HQ.cpnyID", ParameterMode.Raw));
        ps.Add(new StoreParameter("LangID", "HQ.langID", ParameterMode.Raw));
        ps.Add(new StoreParameter("BranchID", "App.txtBranchID.getValue()", ParameterMode.Raw));
        ps.Add(new StoreParameter("SiteID", "App.cboSiteID.getValue()", ParameterMode.Raw));
    })
    .Listeners(p => {
        p.Load.Fn = "stoAllInvtINSite_Load";
        p.BeforeLoad.Fn= "stoAllInvtINSite_BeforeLoad";
    })
)

@(
    X.Store().ID("stoOldTrans")
    .AutoLoad(false)
    .Model(Util.GenerateModel(typeof(IN10300_pgTransferLoad_Result), "mdlOldTrans", ""))
    .Proxy(
        X.AjaxProxy()
        .Url(Url.Action("GetTrans", "IN10300"))
        .ActionMethods(action =>
        {
            action.Read = HttpMethod.POST;
        })
        .Reader(X.JsonReader().Root("data"))
    )
)

@(
    X.Store()
    .ID("stoUnit")
    .Model(Util.GenerateModel(typeof (IN10300_pcUnit_Result),"mdlUnit", "FromUnit"))
    .Proxy(
        X.AjaxProxy()
        .Url(Url.Action("GetUnit", "IN10300"))
        .ActionMethods(action => { action.Read = HttpMethod.POST; })
        .Reader(X.JsonReader().Root("data"))
    )
)


@(
    X.Store()
    .ID("stoUnitConversion")
    .AutoLoad(false)
    .Model(Util.GenerateModel(typeof (IN10300_pcUnitConversion_Result),"mdlUnitConversion", ""))
    .Proxy(
        X.AjaxProxy()
        .Url(Url.Action("GetUnitConversion", "IN10300"))
        .ActionMethods(action => { action.Read = HttpMethod.POST; })
        .Reader(X.JsonReader().Root("data")))
)

@(
    X.Store()
    .ID("stoItemSite")
    .AutoLoad(false)
    .Model(Util.GenerateModel(typeof (IN_ItemSite),"mdlItemSite",""))
    .Proxy(
        X.AjaxProxy()
        .Url(Url.Action("GetItemSite", "IN10300"))
        .ActionMethods(action => { action.Read = HttpMethod.POST; })
        .Reader(X.JsonReader().Root("data")))
)



@(
X.Store()
.ID("stoLotTransVanSale")
.AutoLoad(false)
.Model(Util.GenerateModel(typeof(IN10300_pgLotTransVanSale_Result), "mdlLotTransVanSale", "", true))
.Proxy(
    X.AjaxProxy()
    .Url(Url.Action("GetLotTransVanSale", "IN10300"))
    .ActionMethods(action => action.Read = HttpMethod.POST)
    .Reader(X.JsonReader().Root("data"))
)
.Listeners(p =>
{
    p.Load.Fn = "stoDetail_Load";
})
.Parameters(ps =>
{
    
    ps.Add(new StoreParameter("BranchID", "App.txtBranchID.getValue()", ParameterMode.Raw));
    ps.Add(new StoreParameter("SiteID", "App.cboSiteID.getValue()", ParameterMode.Raw));
    ps.Add(new StoreParameter("ToSiteID", "App.cboToSiteID.getValue()", ParameterMode.Raw));
})
)




@(
    X.Store()
    .ID("stoPrice")
    .AutoLoad(false)
    .Model(Util.GenerateModel(typeof (IN10300_pdPrice_Result),"mdlPrice",""))
    .Proxy(
        X.AjaxProxy()
        .Url(Url.Action("GetPrice", "IN10300"))
        .ActionMethods(action => { action.Read = HttpMethod.POST; })
        .Reader(X.JsonReader().Root("data")))
)
@{ Html.RenderAction("Body", new { lang = Current.LangID.ToString() }); }
</body>
</html>
 