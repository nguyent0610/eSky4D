@using Ext.Net;
@using Ext.Net.MVC;
@using HQ.eSkyFramework
@using HQ.eSkyFramework.HQControl;
@using IN10300;

@{
    Layout = null;
    var X = Html.X();
    var HQ = Html.HQ();

    bool allowDescrBlank = true;
    bool allowNoteBlank = true;
    IN10300Entities _app = Util.CreateObjectContext<IN10300Entities>(false);
    var objConfig = _app.IN10300_pdConfig(Current.UserName, Current.CpnyID, Current.LangID).FirstOrDefault();
    if (objConfig != null)
    {
        allowDescrBlank = objConfig.AllowDescrBlank.HasValue ? objConfig.AllowDescrBlank.Value : false;
        allowNoteBlank = objConfig.AllowNoteBlank.HasValue ? objConfig.AllowNoteBlank.Value : false;
    }
}

@(
 X.Viewport()
    .Layout(LayoutType.Fit)
    .Items(
    X.Window()
        .ID("winLot")
        .Hidden(true)
        .Layout(LayoutType.Fit)
        .Height(300)
        .Width(550)
        .Modal(true)
        .Closable(false)
        .Buttons(
            X.Button().ID("btnLotDel").Text(Util.GetLang("DeleteRights"))
            .Listeners(p => p.Click.Fn = "btnLotDel_Click")
            
            , X.Button().ID("btnLotOK").Text(Util.GetLang("OK"))
            .Listeners(p => p.Click.Fn = "btnLotOK_Click")
        )
        .BottomBar(
            X.Toolbar()
            .Border(false)
            .Items(
                X.Label().ID("lblLotQtyAvail").Width(200).MarginSpec("0 0 0 5")
            )
        )
        .Items(
            X.GridPanel().ID("grdLot")
            .Border(true).BorderSpec("1 0 0 0")   
            .StoreID("stoLotTrans")       
            .ColumnModel(  
                X.RowNumbererColumn().Renderer("renderRowNumber")
                        
                , X.Column().ID("colLotSerNbr").DataIndex("LotSerNbr").Text(Util.GetLang("LotSerNbr"))
                .Editor(
                    X.ComboBox().ID("cboLotSerNbr").DataIndex("LotSerNbr")
                    .ValueField("LotSerNbr").DisplayField("LotSerNbr")
                    .SubmitValue(false)
                    .MinChars(1).TypeAhead(false).ForceSelection(true)
                    .TriggerAction(TriggerAction.All)
                    .Triggers(new FieldTrigger() { Icon = TriggerIcon.Clear, HideTrigger = false })
                    .Listeners(l =>
                    {
                        //l.Change.Fn = "cboLotSerNbr_Change";
                        l.TriggerClick.Handler = "if (index == 0) { this.clearValue();}";
                    })
                    .QueryMode(DataLoadMode.Local)
                    .MatchFieldWidth(false)
                    .ListConfig(                        X.BoundList()
                        .Height(500).ItemSelector(".x-boundlist-item").LoadingText(Util.GetLang("Loading"))
                        .Tpl(
                            X.XTemplate()
                            .Html(@"<tpl for='.'>   
                                        <tpl if='[xindex] == 1'>
                                            <table style='width:500px !important'>
                                                <tr>
                                                    <th>" + Util.GetLang("LotSerNbr") + @"</th>
                                                    <th>" + Util.GetLang("ExpDate") + @"</th>
                                                    <th>" + Util.GetLang("QtyAvail") + @"</th>
                                                </tr>
                                        </tpl>
                                        <tr class='x-boundlist-item'>
                                            <td style='width:100px;'>{LotSerNbr}</td>
                                            <td>{ExpDate:date("""+Current.FormatDateJS+@""")}</td>
                                            <td>{QtyAvail}</td>
                                        </tr>
                                        <tpl if='[xcount-xindex] == 0'>
                                            </table>
                                        </tpl>
                                    </tpl>"
                            )
                        )
                    )
                    .StoreID("stoCalcLot")
                )
                .Width(120)
                                     
               
                , X.Column().ID("colLotUnitDesc").DataIndex("UnitDesc").Text(Util.GetLang("Unit"))
                .Width(100)
                //.Editor(
                    //X.ComboBox().ID("cboLotUnitDesc")
                    //.DisplayField("FromUnit").ValueField("FromUnit")
                    //.StoreID("stoUnit")
                    //.QueryMode(DataLoadMode.Local)
                    //.Triggers(new FieldTrigger() { Icon = TriggerIcon.Clear, HideTrigger = false })
                    //.Listeners(lst =>
                    //{
                    //    lst.TriggerClick.Handler = "if (index == 0) { this.clearValue();}";
                    //})
                //)
                  
                 , X.Column().ID("colLotQty").DataIndex("Qty").Text(Util.GetLang("Qty"))
                .Width(75)
                .Align(Alignment.Right)
                .Renderer("renderQtyAmt") 
                .Editor(Html.X().NumberField().MaxValue(10000).MinValue(0).DecimalPrecision(0))
                
                
                , X.Column().ID("colLotPrice").DataIndex("UnitPrice").Text(Util.GetLang("Price"))
                .Width(75)
                .Align(Alignment.Right)
                .Renderer("renderQtyAmt") 
                
                , HQ.DateColumn().ID("ExpDate").DataIndex("ExpDate").Text(Util.GetLang("ExpDate"))
            )
            .Listeners(lst =>
            {
                lst.Edit.Fn = "grdLot_Edit";
                lst.BeforeEdit.Fn = "grdLot_BeforeEdit";
                lst.SelectionChange.Fn = "grdLot_SelectionChange";
            })
            .SelectionModel(Html.X().RowSelectionModel().ID("smlLot").Mode(SelectionMode.Single))
            .View(X.GridView().TrackOver(false))
            .Plugins(X.CellEditing().ClicksToEdit(1))
        ), 
        
        X.FormPanel().ID("frmMain")
        .Layout(LayoutType.Border)
        .TrackResetOnLoad(true)
        .DefaultAnchor("100%")
        .Listeners(p=>p.FieldChange.Fn="frmMain_FieldChange")
        .KeyMap(Util.SetupKeyMap())
        .TopBar(Util.SetupToolbar(tools: new AbstractComponent[]{  
        
        }))
        .BottomBar(
            X.Toolbar()
            .Items(
                X.ToolbarFill(),
                X.Label().ID("lblQtyAvail").Width(200).MarginSpec("0 0 0 30")
            )
        )
        .FieldDefaults(a => { a.LabelAlign = LabelAlign.Right; a.LabelWidth = 120; })
        .Listeners(p => p.BoxReady.Fn = "frmMain_BoxReady")
        .Items(

            X.Panel()
            .Border(false)
            .Region(Region.North)
            .Layout(LayoutType.VBox)
            .Items(
                X.FieldContainer()
                .MarginSpec("10 0 5 0")
                .Layout(LayoutType.HBox)
                .Items(

                    HQ.TextBox().ID("txtBranchID")
                    .Name("BranchID")
                    .DataIndex("BranchID")
                    .HQLangCode("BranchID")
                    .AllowBlank(false)
                    .BlankText(Util.GetLangPrefix("Input", "BranchID"))
                    .MaxLength(30)
                    .EnforceMaxLength(true).Tag("X").ReadOnly(true)
                    .LabelWidth(130)
                    .Width(250)
                    .HQControlFocus("cboHandle")
                    .Listeners(p => p.Focus.Handler = "HQ.focus='batch';"),
                    
                    HQ.Combo().ID("cboStatus")
                    .Name("Status")
                    .DataIndex("Status")
                    .HQLangCode("Status")
                    .HQProcedure("IN10300_pcStatus")
                    .HQColumnShow("Code,Descr")
                    .DisplayField("Descr")
                    .ValueField("Code")
                    .AllowBlank(false).Tag("X")
                    .BlankText(Util.GetLangPrefix("Input", "Status"))
                    .Width(250)
                    .LabelWidth(120)
                    .HQHeightWidth(400, 300)
                    .ForceSelection(true)
                    .HQParam(new StoreParameterCollection() {
                        new StoreParameter() { Name = "@LangID", Value = Current.LangID.ToString(), Mode = ParameterMode.Value }
                    })
                    .LoadData()
                    .Listeners(lst =>
                    {
                        lst.Change.Fn = "cboStatus_Change";
                        lst.Focus.Handler = "HQ.focus='batch';";
                    }),
                    
                    HQ.Combo().ID("cboHandle")
                    .Name("Handle")
                    .HQLangCode("Handle")
                    .HQProcedure("IN10300_pcHandle")
                    .HQColumnShow("Code,Descr")
                    .DisplayField("Descr")
                    .ValueField("Code")
                    .AllowBlank(false)
                    .BlankText(Util.GetLangPrefix("Input", "Handle"))
                    .Width(240)
                    .HQHeightWidth(400, 300)
                    .ForceSelection(true)
                    .HQParam(new StoreParameterCollection(){
                        new StoreParameter() { Name = "@Status", Value = "App.cboStatus.getValue()", Mode = ParameterMode.Raw },
                        new StoreParameter() { Name = "@LangID", Value = "HQ.langID", Mode = ParameterMode.Raw},
                        new StoreParameter() { Name = "@UserID", Value = "HQ.userName", Mode = ParameterMode.Raw}
                    })
                    .HQControlFocus("cboBatNbr")
                    .LoadData()
                    .Listeners(lst =>
                    {
                        lst.TriggerClick.Handler = "if (index == 0) { this.clearValue();}";
                        lst.Focus.Handler = "HQ.focus='batch';";
                    })
                    
                ),

                X.FieldContainer()
                .Layout(LayoutType.HBox)
                .Items(
                    X.ComboBox()
                    .ID("cboBatNbr")
                    .Name("BatNbr")
                    .DataIndex("BatNbr")
                    .MinChars(1)
                    .PageSize(20)
                    .TypeAhead(false)
                    .ValueField("BatNbr")
                    .DisplayField("BatNbr")
                    .Width(250)
                    .LabelWidth(130)
                    .ForceSelection(true)
                    .MaxLength(20)
                    .FieldLabel(Util.GetLang("BatNbr"))
                    .TriggerAction(TriggerAction.All)
                    .Listeners(l =>
                    {
                        l.Change.Fn = "cboBatNbr_Change";
                        l.Focus.Handler = "HQ.focus='batch'";
                        l.TriggerClick.Handler = "if (index == 0) { this.clearValue();} defaultOnNew();";
                    })
                    .QueryMode(DataLoadMode.Remote)
                    .QueryDelay(1000)
                    .MatchFieldWidth(false)
                    .ListConfig(
                        X.BoundList()
                        .Height(500)
                        .ItemSelector(".x-boundlist-item")
                        .LoadingText(Util.GetLang("Loading"))
                        .Tpl(
                            X.XTemplate()
                            .Html(@"<tpl for='.'>   
                                        <tpl if='[xindex] == 1'>
                                            <table style='table-layout: fixed; width:500px !important'>
                                                <tr>
                                                    <th style='width:100px;'>" + Util.GetLang("BatNbr") + @"</th>
                                                    <th style='width:100px;'>" + Util.GetLang("TranDate") + @"</th>
                                                    <th style='width:100px;'>" + Util.GetLang("Status") + @"</th>
                                                    <th>" + Util.GetLang("Descr") + @"</th>
                                                   
                                                </tr>
                                        </tpl>
                                        <tr class='x-boundlist-item'>
                                            <td>{BatNbr}</td>
                                            <td>{TranDate:date("""+Current.FormatDateJS+@""")}</td>
                                            <td>{Status}</td>
                                            <td>{Descr}</td>
                                        </tr>
                                        <tpl if='[xcount-xindex] == 0'>
                                            </table>
                                        </tpl>
                                    </tpl>"
                            )
                        )
                    )
                    .Triggers(new FieldTrigger() { Icon = TriggerIcon.Clear, HideTrigger = false })
                    .KeyMap(X.KeyMap().Binding(b => { b.Add(X.KeyBinding().KeysString(((int)KeyCode.ENTER).ToString()).Handler(@"#{txtDescr}.focus();")); }))
                    .StoreID("stoBatch"),
                    
                    HQ.NumberField().ID("txtTotAmt")
                    .Name("TotAmt")
                    .DataIndex("TotAmt")
                    .HQLangCode("TotAmt")
                    .DecimalPrecision(0)
                    .Width(250)
                    .LabelWidth(120).Tag("X")
                    .Listeners(p => p.Focus.Handler = "HQ.focus='batch';")
                ),

                X.FieldContainer()
                .Layout(LayoutType.HBox)
                .Items(
                    
                    HQ.TextBox().ID("txtDescr")
                    .DataIndex("Descr")
                    .Name("Descr")
                    .HQLangCode("Descr")
                    .AllowBlank(allowDescrBlank)
                    .MaxLength(100)
                    .LabelWidth(130)
                    .EnforceMaxLength(true)
                    .HQControlFocus("cboSiteID")
                    .BlankText(Util.GetLangPrefix("Input", "Descr"))
                    .Width(500)
                    .Listeners(p => p.Focus.Handler = "HQ.focus='batch';")
                    
                ),
                
                X.FieldSet()
                .Width(750)
                .Margin(10)
                .PaddingSpec("10 0 10 0")
                .Title("<strong>"+Util.GetLang("Info") + " " + Util.GetLang("Transfer")+"</strong>")
                .Items(
                    X.FieldContainer()
                    .Layout(LayoutType.HBox)
                    .Items(
                    
                        HQ.TextBox().ID("txtTrnsfrDocNbr")
                        .Name("TrnsfrDocNbr")
                        .DataIndex("TrnsfrDocNbr")
                        .HQLangCode("TrnsferNbr")
                        .MaxLength(30)
                        .EnforceMaxLength(true).Tag("X")
                        .Width(240)
                        .Listeners(p => p.Focus.Handler = "HQ.focus='batch';"),
                        
                        HQ.Combo().ID("cboReasonCD")
                        .Name("ReasonCD")
                        .DataIndex("ReasonCD")
                        .HQLangCode("ReasonCD")
                        .HQProcedure("IN10300_pcReasonCode")
                        .HQColumnShow("ReasonCD,Descr")
                        .DisplayField("Descr")
                        .ValueField("ReasonCD")
                        .HQHeightWidth(400, 300)
                        .ForceSelection(true)
                        .Width(250)
                        .LabelWidth(120)
                        .Triggers(new FieldTrigger() { Icon = TriggerIcon.Clear, HideTrigger = false })
                        .HQControlFocus("cboShipViaID")
                        
                        .LoadData()
                        .Listeners(lst =>
                        {
                            lst.TriggerClick.Handler = "if (index == 0) { this.clearValue();}";
                            lst.Focus.Handler = "HQ.focus='batch';";
                        }),
                        
                        HQ.DateField().ID("txtExpectedDate")
                        .DataIndex("ExpectedDate")
                        .Name("ExpectedDate")
                        .HQLangCode("ExpectedDate")
                        .AllowBlank(false)
                        .BlankText(Util.GetLangPrefix("Input", "ExpectedDate"))
                        .Width(240)
                        .HQControlFocus("txtTranDate")
                        .Listeners(p => p.Focus.Handler = "HQ.focus='batch';")
                        
                    ),
                    
                    X.FieldContainer()
                    .Layout(LayoutType.HBox)
                    .Items(
                    
                        HQ.Combo().ID("cboSiteID")
                        .Name("SiteID")
                        .DataIndex("SiteID")
                        .HQLangCode("Site")
                        .HQProcedure("IN10300_pcSite")
                        .HQColumnShow("SiteID,Name")
                        .DisplayField("SiteID")
                        .ValueField("SiteID")
                        .AllowBlank(false)
                        .BlankText(Util.GetLangPrefix("Input", "Site"))
                        .Width(240)
                        .HQHeightWidth(400, 300)
                        .ForceSelection(true)
                        .Triggers(new FieldTrigger() { Icon = TriggerIcon.Clear, HideTrigger = false })
                        .HQParam(new StoreParameterCollection(){
                            new StoreParameter() { Name = "@UserID", Value = "HQ.userName", Mode = ParameterMode.Raw },
                            new StoreParameter() { Name = "@CpnyID", Value = "HQ.cpnyID", Mode = ParameterMode.Raw },
                            new StoreParameter() { Name = "@LangID", Value = "HQ.langID", Mode = ParameterMode.Raw },
                            new StoreParameter() { Name = "@BranchID", Value = "App.txtBranchID.getValue()", Mode = ParameterMode.Raw }
                        })
                        .HQControlFocus("cboToCpnyID")
                        .LoadData()
                        .Listeners(lst =>
                        {
                            lst.TriggerClick.Handler = "if (index == 0) { this.clearValue();}";
                            lst.Change.Fn = "cboSiteID_Change";
                            lst.Focus.Handler = "HQ.focus='batch';";
                        }),
                        
                        HQ.Combo().ID("cboShipViaID")
                        .Name("ShipViaID")
                        .DataIndex("ShipViaID")
                        .HQLangCode("ShipVia")
                        .HQProcedure("IN10300_pcShipVia")
                        .HQColumnShow("ShipViaID,Descr")
                        .DisplayField("ShipViaID")
                        .ValueField("ShipViaID")
                        .AllowBlank(false)
                        .BlankText(Util.GetLangPrefix("Input", "ShipVia"))
                        .Width(250)
                        .LabelWidth(120)
                        .HQHeightWidth(400, 300)
                        .ForceSelection(true)
                        .Triggers(new FieldTrigger() { Icon = TriggerIcon.Clear, HideTrigger = false })
                        .HQControlFocus("txtExpectedDate")
                        .LoadData()
                        .Listeners(lst =>
                        {
                            lst.TriggerClick.Handler = "if (index == 0) { this.clearValue();}";
                            lst.Focus.Handler = "HQ.focus='batch';";
                        }),
                        
                        HQ.DateField().ID("txtTranDate")
                        .DataIndex("TranDate")
                        .Name("TranDate")
                        .HQLangCode("TranDate")
                        .AllowBlank(false)
                        .BlankText(Util.GetLangPrefix("Input", "TranDate"))
                        .Width(240)
                        .HQControlFocus("txtRcptDate")
                        .Listeners(p => p.Focus.Handler = "HQ.focus='batch';")
                    ),
                    
                    X.FieldContainer()
                    .Layout(LayoutType.HBox)
                    .Items(
                    
                        HQ.Combo().ID("cboToCpnyID")
                        .Name("ToCpnyID")
                        .DataIndex("ToCpnyID")
                        .HQLangCode("ToBranch")
                        .HQProcedure("IN10300_pcToCpny")
                        .HQColumnShow("BranchID,BranchName")
                        .DisplayField("BranchID")
                        .ValueField("BranchID")
                        .AllowBlank(false)
                        .BlankText(Util.GetLangPrefix("Input", "ToBranch"))
                        .Width(240)
                        .HQHeightWidth(400, 300)
                        .ForceSelection(true)
                        .Triggers(new FieldTrigger() { Icon = TriggerIcon.Clear, HideTrigger = false })
                        .HQParam(new StoreParameterCollection(){
                            new StoreParameter() { Name = "@UserID", Value = "HQ.userName", Mode = ParameterMode.Raw }
                        })
                        .HQControlFocus("cboToSiteID")
                        .LoadData()
                        .Listeners(lst =>
                        {
                            lst.TriggerClick.Handler = "if (index == 0) { this.clearValue();}";
                            lst.Change.Fn = "cboToCpnyID_Change";
                            lst.Focus.Handler = "HQ.focus='batch';";
                        }),
                        
                        HQ.Combo().ID("cboTransferStatus")
                        .Name("TransferStatus")
                        .DataIndex("TransferStatus")
                        .HQLangCode("Status")
                        .HQProcedure("IN10100_pcTransferStatus")
                        .HQColumnShow("Code,Descr")
                        .DisplayField("Descr")
                        .ValueField("Code")
                        .AllowBlank(false).Tag("X")
                        .BlankText(Util.GetLangPrefix("Input", "Status"))
                        .Width(250)
                        .LabelWidth(120)
                        .HQHeightWidth(400, 300)
                        .ForceSelection(true)
                        .HQParam(new StoreParameterCollection() {
                            new StoreParameter() { Name = "@LangID", Value = Current.LangID.ToString(), Mode = ParameterMode.Value }
                        })
                        .LoadData()
                        .Listeners(lst =>
                        {
                            lst.Focus.Handler = "HQ.focus='batch';";
                        }),
                        
                        HQ.TextBox().ID("txtRcptBatNbr")
                        .Name("RcptBatNbr")
                        .DataIndex("RcptBatNbr")
                        .HQLangCode("RcptNbr")
                        .MaxLength(30).Tag("X")
                        .EnforceMaxLength(true)
                        .Width(240)
                        .Listeners(p => p.Focus.Handler = "HQ.focus='batch';")
                    ),
                    
                    X.FieldContainer()
                    .Layout(LayoutType.HBox)
                    .Items(
                    
                        HQ.Combo().ID("cboToSiteID")
                        .Name("ToSiteID")
                        .DataIndex("ToSiteID")
                        .HQLangCode("ToSite")
                        .HQProcedure("IN10300_pcToSite")
                        .HQColumnShow("SiteID,Name")
                        .DisplayField("SiteID")
                        .ValueField("SiteID")
                        .AllowBlank(false)
                        .BlankText(Util.GetLangPrefix("Input", "ToSite"))
                        .Width(240)
                        .HQHeightWidth(400, 300)
                        .ForceSelection(true)
                        .Triggers(new FieldTrigger() { Icon = TriggerIcon.Clear, HideTrigger = false })
                        .HQParam(new StoreParameterCollection(){
                            new StoreParameter() { Name = "@UserID", Value = "HQ.userName", Mode = ParameterMode.Raw },
                            new StoreParameter() { Name = "@CpnyID", Value = "HQ.cpnyID", Mode = ParameterMode.Raw },
                            new StoreParameter() { Name = "@LangID", Value = "HQ.langID", Mode = ParameterMode.Raw },
                            new StoreParameter() { Name = "@ToBranchID", Value = "App.cboToCpnyID.getValue()", Mode = ParameterMode.Raw }
                        })
                        .HQControlFocus("cboTransferType")
                        .LoadData()
                        .Listeners(lst =>
                        {
                            lst.Expand.Handler = "if(Ext.isEmpty(App.cboToCpnyID.getValue())) App.cboToSiteID.collapse();";
                            lst.TriggerClick.Handler = "if (index == 0) { this.clearValue();}";
                            lst.Change.Fn = "cboToSiteID_Change";
                            lst.Focus.Handler = "HQ.focus='batch';";
                        }),
                        
                        HQ.TextBox().ID("txtRefNbr")
                        .Name("RefNbr")
                        .DataIndex("RefNbr")
                        .HQLangCode("RefNbr")
                        .MaxLength(30).Tag("X")
                        .EnforceMaxLength(true)
                        .Width(250)
                        .Listeners(p => p.Focus.Handler = "HQ.focus='batch';"),
                        
                        
                        HQ.DateField().ID("txtRcptDate")
                        .DataIndex("RcptDate")
                        .Name("RcptDate")
                        .HQLangCode("RcptDate")
                        .AllowBlank(false)
                        .BlankText(Util.GetLangPrefix("Input", "RcptDate"))
                        .Width(240)
                        .HQControlFocus("txtComment")
                        .Listeners(p => p.Focus.Handler = "HQ.focus='batch';")
                       
                    ),
                    
                    X.FieldContainer()
                    .Layout(LayoutType.HBox)
                    .Items(
                    
                        HQ.Combo().ID("cboTransferType")
                        .Name("TransferType")
                        .DataIndex("TransferType")
                        .HQLangCode("TrsferType")
                        .HQProcedure("IN10300_pcType")
                        .HQColumnShow("Code,Descr")
                        .DisplayField("Descr")
                        .ValueField("Code")
                        .AllowBlank(false)
                        .BlankText(Util.GetLangPrefix("Input", "TrsferType"))
                        .Width(240)
                        .HQHeightWidth(400, 300)
                        .ForceSelection(true)
                        .Triggers(new FieldTrigger() { Icon = TriggerIcon.Clear, HideTrigger = false })
                        .HQParam(new StoreParameterCollection(){
                             new StoreParameter() { Name = "@LangID", Value = Current.LangID.ToString(), Mode = ParameterMode.Value }
                        })
                        .HQControlFocus("cboReasonCD")
                        .LoadData()
                        .Listeners(lst =>
                        {
                            lst.TriggerClick.Handler = "if (index == 0) { this.clearValue();}";
                            lst.Focus.Handler = "HQ.focus='batch';";
                        }),
                        
                        HQ.TextBox().ID("txtComment")
                        .DataIndex("Comment")
                        .Name("Comment")
                        .HQLangCode("Comment")
                        .AllowBlank(allowNoteBlank)
                        .LabelWidth(120)
                        .MaxLength(30)
                        .EnforceMaxLength(true)
                        .HQControlFocus("txtBranchID")
                        .BlankText(Util.GetLangPrefix("Input", "Comment"))
                        .Width(490)
                        .Listeners(p => p.Focus.Handler = "HQ.focus='batch';")
                       
                    )
                ),
                
                X.Hidden().ID("tstamp")
            ), // Panel
            X.Panel()
            .Region(Region.Center)
            .Layout(LayoutType.Border)
            .Items(
                X.GridPanel().ID("grdTrans")
                .Border(true)
                .BorderSpec("1 0 0 0")
                .ColumnLines(true)
                .RowLines(true)
                .Region(Region.Center).Flex(1)
                .Store(
                    X.Store()
                    .ID("stoTrans")
                    .PageSize(50).AutoLoad(false)
                    .Model(Util.GenerateModel(typeof(IN10300_pgTransferLoad_Result), "mdlTrans", ""))
                    .Parameters(ps =>
                    {
                        ps.Add(new StoreParameter("BatNbr", "App.cboBatNbr.getValue()", ParameterMode.Raw));
                        ps.Add(new StoreParameter("BranchID", "App.txtBranchID.getValue()", ParameterMode.Raw));
                        ps.Add(new StoreParameter("RefNbr", "App.txtRefNbr.getValue()", ParameterMode.Raw));
                    })
                    .ServerProxy(X.AjaxProxy().Url(Url.Action("GetTrans")))
                    .Listeners(l =>    
                    {
                        l.Load.Fn = "stoDetail_Load";
                        l.BeforeLoad.Fn = "stoTrans_BeforeLoad";
                    })
                )
                .ColumnModel(
                    X.RowNumbererColumn().Width(30).Listeners(x => 	x.AfterRender.Handler = "this.resizable = true"),

                    X.Column()
                    .DataIndex("InvtID")
                    .ID("colInvtID")
                    .Width(100)
                    .Text(Util.GetLang("InvtID"))
                    .Editor(
                        HQ.Combo().ID("cboTransInvtID")
                        .HQProcedure("IN10300_pcInvt")
                        .HQColumnShow("InvtID,Descr,Descr1,Color")
                        .DisplayField("InvtID")
                        .ValueField("InvtID")
                        .Width(250)
                        .HQHeightWidth(400, 300)
                        .ForceSelection(true)
                        .LabelWidth(90)
                        .Triggers(new FieldTrigger() { Icon = TriggerIcon.Clear, HideTrigger = false })
                        .HQParam(new StoreParameterCollection(){
                        new StoreParameter() { Name = "@BranchID", Value = "HQ.cpnyID", Mode = ParameterMode.Raw }
                    })
                        .LoadData()
                        .Listeners(lst =>
                        {
                            lst.TriggerClick.Handler = "if (index == 0) { this.clearValue();}";
                        })
                    )
                    ,

                    X.Column()
                    .DataIndex("TranDesc")
                    .MinWidth(250)
                    .MaxWidth(350)
                    .Flex(1)
                    .Text(Util.GetLang("Descr")),

                    X.Column()
                    .DataIndex("UnitDesc")
                    .Width(100)
                    .Text(Util.GetLang("Unit"))
                    .Editor(
                        X.ComboBox()
                        .ID("cboTransUnitDesc")
                        .ForceSelection(true)
                        .TriggerAction(TriggerAction.All)
                        .QueryMode(DataLoadMode.Local)
                        .ValueField("FromUnit")
                        .DisplayField("FromUnit")
                        .StoreID("stoUnit")
                        .Triggers(new FieldTrigger() { Icon = TriggerIcon.Clear, HideTrigger = false })
                        .Listeners(lst => { lst.TriggerClick.Handler = "if (index == 0) { this.clearValue();}"; })
                    )
                    ,

                    X.Column()
                    .DataIndex("Qty")
                    .Text(Util.GetLang("Qty"))
                    .Align(Alignment.Right)
                    .Width(100)
                    .Editor(HQ.NumberField().MaxValue(100000).MinValue(0).DecimalPrecision(0).SpinUpEnabled(true))
                    .Renderer("renderQtyAmt"),
                
                    X.ComponentColumn()
                    .Text("")
                    .Width(26)
                    .Component(
                        X.Button().MarginSpec("1 4 1 3").Height(18).Text("")
                        .Listeners(p=>p.Click.Fn="btnLot_Click")
                    )
                    ,
                
                    X.Column()
                    .DataIndex("UnitPrice")
                    .Text(Util.GetLang("UnitPrice"))
                    .Align(Alignment.Right)
                    .Width(100)
                    .Renderer("renderQtyAmt"),

                    X.Column()
                    .DataIndex("TranAmt")
                    .Text(Util.GetLang("ExtAmt"))
                    .Align(Alignment.Right)
                    .Width(100)
                    .Renderer("renderQtyAmt")
                )
                .Listeners(lst =>
                {
                    lst.SelectionChange.Fn = "grdTrans_SelectionChange";
                    lst.Edit.Fn = "grdTrans_Edit";
                    lst.ValidateEdit.Fn = "grdTrans_ValidateEdit";
                    lst.BeforeEdit.Fn = "grdTrans_BeforeEdit";
                })
                .SelectionModel(X.RowSelectionModel().ID("smlTrans").Mode(SelectionMode.Single))
                .View(X.GridView().TrackOver(false))
                .BottomBar(
                        X.PagingToolbar()
                        .Items(
                            X.Label("Page size:"),
                            X.ToolbarSpacer(10),
                            X.ComboBox()
                            .Width(80)
                            .Items("1", "2", "10", "20", "30", "50")
                            .SelectedItems("50")
                            .Listeners(l => l.Select.Fn = "HQ.grid.onPageSelect")
                        )
                        .Plugins(X.ProgressBarPager())
                )
                .Plugins(X.CellEditing().ClicksToEdit(1))
                .Features(
                    X.GridFilters()
                        .Local(true)
                        .Filters(
                            X.StringFilter().DataIndex("InvtID"),
                            X.StringFilter().DataIndex("TranDesc"),
                            X.StringFilter().DataIndex("UnitDesc"),
                            X.NumericFilter().DataIndex("Qty"),
                            X.NumericFilter().DataIndex("UnitPrice"),
                            X.NumericFilter().DataIndex("TranAmt")
                        )
                )
            ).Listeners(lss =>
            {
                lss.Render.Handler = "HQ.common.control_render(this,'trans')";
            })
        )
    )
)

    