@using Ext.Net;
@using Ext.Net.MVC;
@using HQ.eSkyFramework;
@using HQ.eSkyFramework.HQControl;
@using AR20200;

@model System.Collections.IEnumerable
@{
    Layout = null;
    var X = Html.X();
    ViewBag.Title = "AR20200";
    var acc = Session["AR20200"] as AccessRight;
}
<!DOCTYPE html>
<html>
 <!--Không thay đổi phần head Đổi mã màn hình AR20400.js tùy theo màn hình đổi lại-->
<head>
    <meta name="viewport" content="width=device-width" />
    <script src='@Url.Content("Scripts/hq.language"+Current.LangID+".js?"+DateTime.Now.ToString("yyyyMMddss"))' type="text/javascript"></script>
    <script src='@Url.Content("Scripts/hq.common.js?"+DateTime.Now.ToString("yyyyMMddss"))' type="text/javascript"></script>
    <script src='@Url.Content("Scripts/screen/AR20200.js?"+DateTime.Now.ToString("yyyyMMddss"))' type="text/javascript"></script>


    <style>
        .x-grid-row-over .x-grid-cell-inner {
            font-weight : bold;
        }
    </style>
    <script>
        HQ.cpnyID = '@Current.CpnyID';
        HQ.langID = '@Current.LangID';
        HQ.userName = '@Current.UserName';
        HQ.bussinessDate = new Date('@DateTime.Now.Year', '@(DateTime.Now.Month - 1)', '@DateTime.Now.Day');
        HQ.isUpdate = HQ.util.toBool('@acc.Update.ToString()');
        HQ.isInsert = HQ.util.toBool('@acc.Insert.ToString()');
        HQ.isDelete = HQ.util.toBool('@acc.Delete.ToString()');
        HQ.bussinessDate = new Date('@DateTime.Now.Date');
    </script>  
    <title>@ViewBag.Title</title>
    </head>
    <body>
       
        @(X.ResourceManager().Theme((Theme)Enum.Parse(typeof(Theme),Current.Theme.PassNull()==""?"Default":Current.Theme.PassNull())))

        @(X.Store().ID("stoSalesPerson").AutoLoad(false)
            .Model(Util.GenerateModel(typeof(AR_Salesperson), "mdlAR_Salesperson", ""))       
            .Proxy(
                    X.AjaxProxy()                
                    .Url(Url.Action("GetSalesPersonById", "AR20200"))                
                    .ActionMethods(action =>
                    {
                        action.Read = HttpMethod.POST;
                    })
                    .Reader(X.JsonReader().Root("data").TotalProperty("totaldata"))
                )
            .Parameters(ps =>
            {
                ps.Add(new StoreParameter("branchId", "App.cboBranchID.getValue()", ParameterMode.Raw));
                ps.Add(new StoreParameter("slsperid", "App.cboSlsperid.getValue()", ParameterMode.Raw));
            })      
            .Listeners(l =>
                {
                    l.BeforeLoad.Fn = "stoBeforeLoad";
                    l.Load.Fn = "stoLoad";                   
                }
            )
        )

        @(
            X.Store().ID("stoSlsperCpnyAddr")
            .AutoLoad(false)
            .Model(Util.GenerateModel(typeof(AR20200_pgSlsperCpnyAddr_Result), "mdlSlsperCpnyAddr", ""))       
            .Proxy(
                X.AjaxProxy()                
                .Url(Url.Action("GetSlsperCpnyAddr", "AR20200"))                
                .ActionMethods(action =>
                {
                    action.Read = HttpMethod.POST;
                })
                .Reader(X.JsonReader().Root("data").TotalProperty("totaldata"))
            ) 
            .Parameters(ps =>
            {
                ps.Add(new StoreParameter("branchId", "App.cboBranchID.getValue()", ParameterMode.Raw));
                ps.Add(new StoreParameter("slsperid", "App.cboSlsperid.getValue()", ParameterMode.Raw));
            })
            .Listeners(p => {
                p.BeforeLoad.Handler = "this.HQFieldKeys=['CpnyAddrID'];";
                p.Load.Fn = "stoSlsperCpnyAddr_load";
                //p.DataChanged.Handler = "frmChange";
                //p.Update.Handler = "frmChange";
            })
            // Store: stoSlsperCpnyAddr
        )
 
        @(Html.HQ().Store().ID("stoAR20200_pdCheckAutoSales").AutoLoad(false)
            .HQProcedure("AR20200_pdCheckAutoSales")
            .HQParam(new StoreParameterCollection() {
                new StoreParameter() { Name = "@BranchID", Value = "App.cboBranchID.getValue()", Mode = ParameterMode.Raw },
                new StoreParameter() { Name = "@UserID", Value = "HQ.userName", Mode = ParameterMode.Raw }
            })
            .Listeners(p=>{
                p.Load.Fn = "stoAR20200_pdCheckAutoSales_load";
            })
            .LoadData()
        )

        @X.GridFilters() <!--Khi cache cho grid-->
        @X.ProgressBarPager() <!--Khi cache cho grid -->
          <input type="password" name="password" id="password" value=""  style="display:none;">
        <!-- Gọi hàm Body trong AR20200Controller để dựng view Body.cshtml, mục đích tạo cache. -->
        @{ Html.RenderAction("Body", new { lang = Current.LangID }); }
    </body>
</html>