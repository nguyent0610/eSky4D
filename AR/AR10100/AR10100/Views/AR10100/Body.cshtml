@using Ext.Net;
@using Ext.Net.MVC;
@using HQ.eSkyFramework;
@using HQ.eSkyFramework.HQControl;
@using AR10100;
@{
    Layout = null;
    var X = Html.X();
    var HQ = Html.HQ();
    ViewBag.Title = "AR10100";
    ViewBag.OrdFromId = "";
}
@(
 Html.X().Viewport().Layout(LayoutType.Fit)
.Items(
        X.FormPanel()
        .Layout(LayoutType.Anchor)
        .ID("frmMain")
        .TrackResetOnLoad(true)
        .Anchor("100%")
        .KeyMap(Util.SetupKeyMap())
        .TopBar(Util.SetupToolbar("Print", true, ""))
        .FieldDefaults(act => { act.LabelAlign = LabelAlign.Right; })
        .Listeners(l =>
                {
                    l.BoxReady.Handler = "firstLoad();";
                    l.FieldChange.Fn = "frmChange";
                })
        .Items(
            X.Panel().ID("pnlHeader").Layout(LayoutType.VBox).Border(false).AutoScroll(true)
            .Listeners(lst =>
                {
                    lst.Render.Handler = "HQ.common.control_render(this,'header_Batch')";
                    lst.Resize.Handler = "App.tabDetail.setAnchor(\"100% -\" + App.pnlHeader.getHeight());";
                })//focus header        
            .Items(
                X.Container().Layout(LayoutType.HBox).MarginSpec("3 0 0 0")
                .Items(
                        HQ.Combo().ID("cboBatNbr").Name("cboBatNbr").HQLangCode("BATNBR").HQProcedure("AR10100_pcBatch")
                            .HQColumnShow("BatNbr,TotAmt,Descr,Status").DisplayField("BatNbr").ValueField("BatNbr")
                            .LabelWidth(150).InputWidth(150).HQHeightWidth(400, 500).ForceSelection(true).Tag("X")
                            .HQDBSys(false)
                            .HQParam(new StoreParameterCollection()
                            {
                                new StoreParameter() { Name = "@BranchID", Value = "HQ.cpnyID", Mode = ParameterMode.Raw },
                                new StoreParameter() { Name = "@ScreenNbr", Value = ViewBag.Title, Mode = ParameterMode.Value }
                            })
                            .LoadData()
                            .Listeners(lst =>
                                {

                                    lst.Change.Fn = "cboBatNbr_Change";
                                    lst.Select.Fn = "cboBatNbr_Select";
                                })
        //BrandID    
                        , HQ.TextBox().ID("txtBranchID").Name("txtBranchID").HQLangCode("BRANCHID")
                            .LabelWidth(150).InputWidth(150).MaxLength(200).EnforceMaxLength(true).AllowBlank(false)
                            .ReadOnly(true).Tag("X")

                        //Status
                        , HQ.Combo().ID("cboStatus").Name("cboStatus").HQLangCode("STATUS").HQProcedure("AR10100_pcStatus")
                            .LabelWidth(150).InputWidth(150).HQColumnShow("Code,Descr").DisplayField("Descr").ValueField("Code").DataIndex("Status")
                            .HQHeightWidth(400, 500)
                            .HQDBSys(false).ReadOnly(true).Tag("X")
                            .HQParam(new StoreParameterCollection()
                            {
                                new StoreParameter() { Name = "@LangID", Value = "HQ.langID", Mode = ParameterMode.Raw }
                            })
                            .LoadData()
                            .Listeners(lst =>
                                {
                                    lst.Change.Fn = "cboStatus_Change";
                                })
                            ) //ngoac ket thuc row1    


                , X.Container().Layout(LayoutType.HBox).MarginSpec("3 0 0 0")
                .Items(
                        HQ.TextBox().ID("txtOrigRefNbr").Name("txtOrigRefNbr").HQLangCode("INTREFNBR").DataIndex("IntRefNbr")
                            .LabelWidth(150).InputWidth(150).MaxLength(10).EnforceMaxLength(true)

                        , HQ.NumberField().ID("txtCuryCrTot").Name("txtCuryCrTot").HQLangCode("TOTAMT").DataIndex("TotAmt")
                            .LabelWidth(150).InputWidth(150).ReadOnly(true).DecimalPrecision(0).Tag("X")

                        , HQ.Combo().ID("cboHandle").Name("cboHandle").HQLangCode("HANDLE").HQProcedure("AR10100_pcHandle")
                            .HQColumnShow("Descr").DisplayField("Descr").ValueField("Code").Tag("X")
                            .LabelWidth(150).InputWidth(150).HQHeightWidth(400, 500).ForceSelection(false)
                            .HQDBSys(false)
                            .Triggers(new FieldTrigger() { Icon = TriggerIcon.Clear, HideTrigger = false })
                            .HQParam(new StoreParameterCollection()
                            {
                                new StoreParameter() { Name = "@Status", Value = "App.cboStatus.getValue()", Mode = ParameterMode.Raw },                                               
                                new StoreParameter() { Name = "@LangID", Value = "HQ.langID", Mode = ParameterMode.Raw }
                            })
                            .LoadData()
                            .Listeners(lst =>
                                {
                                    lst.TriggerClick.Handler = "if (index == 0) { this.clearValue();}";
                                    lst.Focus.Handler = "this.forceSelection = true;";
                                    lst.Change.Fn = "cboHandle_Change";
                                })

                        )//ngoac ket thuc row2                              
                    , HQ.TextBox().ID("txtRvdBatNbr").Name("txtRvdBatNbr").HQLangCode("CANCELLEDBATNBR").DataIndex("RvdBatNbr")
                        .LabelWidth(150).InputWidth(150).MaxLength(200).EnforceMaxLength(true).MarginSpec("3 0 0 0")
                        .ReadOnly(true).Tag("X")// row3                                   
                )
                , X.TabPanel()
                .Layout(LayoutType.Fit)
                .ID("tabDetail")
                .Items(
                    X.Panel().ID("tabDoc")
                    .Layout(LayoutType.Anchor)
                    .Title(Util.GetLang("DOC"))
                    .Padding(3)
                    .Items(

                        X.Panel().ID("pnlAR_Doc").Layout(LayoutType.VBox).Border(false).AutoScroll(true)
                            .Listeners(lst =>
                                {
                                    lst.Render.Handler = "HQ.common.control_render(this,'header_Batch')";
                                    lst.Resize.Handler = "App.grdAR_Trans.setAnchor(\"100% -\" + App.pnlAR_Doc.getHeight());App.grdAR_Trans.view.refresh();";
                                })//focus header        
                            .Items(
                                    X.Container().Layout(LayoutType.HBox).MarginSpec("3 0 0 0")
                                    .Items(
                                        HQ.Combo().ID("cboDocType").Name("cboDocType").HQLangCode("DOCTYPE").HQProcedure("AR10100_pcDocType")
                                            .HQColumnShow("Descr").DisplayField("Descr").ValueField("Code").DataIndex("DocType").AllowBlank(false)
                                            .LabelWidth(150).InputWidth(150).HQHeightWidth(400, 500)
                                            .HQDBSys(false).ForceSelection(false)
                                            .HQParam(new StoreParameterCollection()
                                                {
                                                    new StoreParameter() { Name = "@LangID", Value = "HQ.langID", Mode = ParameterMode.Raw }
                                                })
                                            .LoadData()
                                            .Listeners(lst =>
                                                {
                                                    lst.TriggerClick.Handler = "if (index == 0) { this.clearValue();}";
                                                    //lst.Change.Fn = "cboStatus_Change";
                                                    lst.Focus.Handler = "this.forceSelection = true;";
                                                })


                                        //RefNbr
                                         , HQ.TextBox().ID("txtRefNbr").Name("txtRefNbr").HQLangCode("REFNBR").DataIndex("RefNbr")
                                            .LabelWidth(150).InputWidth(150).MaxLength(200).EnforceMaxLength(true).MarginSpec("3 0 0 0")
                                            .ReadOnly(true).Tag("X")
                        
                                        //, HQ.Combo().ID("cboRefNbr").Name("cboRefNbr").HQLangCode("REFNBR").HQProcedure("AR10100_pcRefNbr")
                                        //    .HQColumnShow("RefNbr,DocType,OrigDocAmt,DocDesc,Rlsed").DisplayField("RefNbr").ValueField("RefNbr").Editable(false)
                                        //    .LabelWidth(150).InputWidth(150).HQHeightWidth(400, 500).ReadOnly(true).HQFirstDefault(true)
                                        //    .HQDBSys(false).Tag("X")
                                        //    .Triggers(new FieldTrigger() { Icon = TriggerIcon.Clear, HideTrigger = false })
                                        //    .HQParam(new StoreParameterCollection()
                                        //        {                                      
                                        //            new StoreParameter() { Name = "@BranchID", Value = "HQ.cpnyID", Mode = ParameterMode.Raw },
                                        //            new StoreParameter() { Name = "@BatNbr", Value = "App.cboBatNbr.getValue()", Mode = ParameterMode.Raw }
                                        //        })
                                        //    .LoadData()
                                        //    .Listeners(lst =>
                                        //        {
                                        //            lst.TriggerClick.Handler = "if (index == 0) { this.clearValue();}";
                                        //            lst.Change.Fn = "cboRefNbr_Change";
                                        //            lst.Select.Fn = "cboRefNbr_Select";

                                        //        })

                                            //SlsperID
                                        , HQ.Combo().ID("cboSlsperId").Name("cboSlsperId").HQLangCode("SLSPERID").HQProcedure("AR10100_pcSalesPerson")
                                        .HQColumnShow("Slsperid,Name").DisplayField("Slsperid").ValueField("Slsperid").DataIndex("SlsperId")
                                            .LabelWidth(150).InputWidth(150).HQHeightWidth(400, 500)
                                            .HQDBSys(false).ForceSelection(false)
                                            .Triggers(new FieldTrigger() { Icon = TriggerIcon.Clear, HideTrigger = false })
                                            .HQParam(new StoreParameterCollection()
                                                {
                                                    new StoreParameter() { Name = "@BranchID", Value = "HQ.cpnyID", Mode = ParameterMode.Raw },
                                                    new StoreParameter() { Name = "@Username", Value = "HQ.userName", Mode = ParameterMode.Raw },
                                                    new StoreParameter() { Name = "@ScreenNbr", Value = ViewBag.Title, Mode = ParameterMode.Value },
                                                })
                                            .LoadData()
                                            .Listeners(lst =>
                                                {
                                                    lst.Focus.Handler = "this.forceSelection = true;";
                                                })

                                        )//end row1

                                , X.Container().Layout(LayoutType.HBox).MarginSpec("3 0 0 0")
                                .Items(
                                        HQ.Combo().ID("cboCustId").Name("cboCustId").HQLangCode("CUSTID").HQProcedure("AR10100_pcCustomerActive")
                                            .HQColumnShow("CustID,Name,Addr1,Addr2").DisplayField("CustID").ValueField("CustID").DataIndex("CustId")
                                            .LabelWidth(150).InputWidth(150).HQHeightWidth(400, 500)
                                            .HQDBSys(false).ForceSelection(false).AllowBlank(false)
                                            .Triggers(new FieldTrigger() { Icon = TriggerIcon.Clear, HideTrigger = false })
                                            .HQParam(new StoreParameterCollection()
                                                {
                                                    new StoreParameter() { Name = "@BranchID", Value = "HQ.cpnyID", Mode = ParameterMode.Raw },
                                                    new StoreParameter() { Name = "@Username", Value = "HQ.userName", Mode = ParameterMode.Raw },
                                                    new StoreParameter() { Name = "@ScreenNbr", Value = ViewBag.Title, Mode = ParameterMode.Value },
                                                })
                                            .LoadData()
                                            .Listeners(lst =>
                                                {
                                                    lst.TriggerClick.Handler = "if (index == 0) { this.clearValue();}";
                                                    lst.Change.Fn = "cboCustId_Change";
                                                    lst.Focus.Handler = "this.forceSelection = true;";
                                                })

                                        , HQ.TextBox().ID("txtInvcNbr").Name("txtInvcNbr").HQLangCode("INVCNBR").DataIndex("InvcNbr")
                                            .LabelWidth(150).InputWidth(75).MaxLength(15).EnforceMaxLength(true).AllowBlank(true)

                                        , HQ.TextBox().ID("txtInvcNote").Name("txtInvcNote").DataIndex("InvcNote").HideLabel(true)
                                            .InputWidth(75).MaxLength(10).EnforceMaxLength(true).AllowBlank(true)

                                        , HQ.NumberField().ID("txtCuryOrigDocAmt").Name("txtCuryOrigDocAmt").HQLangCode("ORIGDOCAMT").DecimalPrecision(0).DataIndex("OrigDocAmt")
                                            .LabelWidth(150).InputWidth(150).ReadOnly(true).Tag("X")
                                    )//end row2

                                , X.Container().Layout(LayoutType.HBox).MarginSpec("3 0 0 0")
                                .Items(
                                        HQ.DateField().ID("dteDocDate").Name("dteDocDate").HQLangCode("DOCDATE").DataIndex("DocDate")
                                            .LabelWidth(150).InputWidth(150).Value(DateTime.Now).AllowBlank(false)
                                            .Listeners(lst =>
                                                {
                                                    lst.Change.Fn = "dteDocDate_Change";
                                                })
                                        , HQ.Combo().ID("cboTerms").Name("cboTerms").HQLangCode("TERM").HQProcedure("AR10100_pcterms")
                                            .HQColumnShow("TermsID,Descr").DisplayField("TermsID").ValueField("TermsID").DataIndex("Terms").AllowBlank(false)
                                            .LabelWidth(150).InputWidth(150).HQHeightWidth(400, 500)
                                            .HQDBSys(false).ForceSelection(false)
                                            .Triggers(new FieldTrigger() { Icon = TriggerIcon.Clear, HideTrigger = false })
                                            .LoadData()
                                            .Listeners(lst =>
                                                {
                                                    lst.Change.Fn = "cboTerms_Change";
                                                    lst.Focus.Handler = "this.forceSelection = true;";
                                                })
                                        , HQ.NumberField().ID("txtCuryDocBal").Name("txtCuryDocBal").HQLangCode("CURYDOCBAL").DataIndex("DocBal").DecimalPrecision(0)
                                            .LabelWidth(150).InputWidth(150).ReadOnly(true).Tag("X")
                                    )//end row3

                                , X.Container().Layout(LayoutType.HBox).MarginSpec("3 0 0 0")
                                .Items(
        //Due Date = NowDay + Term xu ly sau
                                        HQ.DateField().ID("dteDueDate").Name("dteDueDate").HQLangCode("DUEDATE").DataIndex("DueDate")
                                            .LabelWidth(150).InputWidth(150).Value(DateTime.Now).AllowBlank(false)

                                        , HQ.DateField().ID("dteDiscDate").Name("dteDiscDate").HQLangCode("DISCDATE").DataIndex("DiscDate")
                                            .LabelWidth(150).InputWidth(150).Value(DateTime.Now).AllowBlank(false)

                                        , HQ.NumberField().ID("txtTxblTot").Name("txtTxblTot").HQLangCode("TXBLAMT").DecimalPrecision(0).DataIndex("TxblTot00")
                                            .LabelWidth(150).InputWidth(150).ReadOnly(true).Tag("X")
                                    )//end row4

                                , X.Container().Layout(LayoutType.HBox).MarginSpec("3 0 0 0")
                                 .Items(
                                        HQ.TextBox().ID("txtDocDescr").Name("txtDocDescr").HQLangCode("DOCDESC").DataIndex("DocDesc")
                                            .LabelWidth(150).InputWidth(455).MaxLength(100).EnforceMaxLength(true).AllowBlank(false)

                                        , HQ.NumberField().ID("txtTaxTot").Name("txtTaxTot").HQLangCode("TAXAMT").DataIndex("TaxTot00").DecimalPrecision(0)
                                            .LabelWidth(150).InputWidth(150).ReadOnly(true).Tag("X")
                                    )//end row5
                              )//pnlAR_Doc            
                    , Html.X().GridPanel()
                            .ColumnLines(true)
                            .RowLines(true)
                            .Listeners(lst =>
                                {
                                    lst.Render.Handler = "HQ.common.control_render(this,'grdAR_Trans');";
                                })//focus grid 
                            .Layout(LayoutType.Fit)
                            .Anchor("100% -90")// WIDTH HEIGHT                 
                            .RenderTo("contentCenter")
                            .View(X.GridView().TrackOver(false))
                            .ID("grdAR_Trans")
                            .Store(
                                        X.Store().ID("stoAR_Trans").AutoLoad(false)
                                            .Model(Util.GenerateModel(typeof(AR10100_pgLoadInvoiceMemo_Result), "AR10100_pgLoadInvoiceMemo_ResultModel",""))
                                            .ServerProxy(
                                                X.AjaxProxy()
                                                .Url(Url.Action("GetData_AR_Trans", "AR10100"))
                                                .ActionMethods(action =>
                                                {
                                                    action.Read = HttpMethod.POST;
                                                })
                                                .Reader(X.JsonReader().Root("data").TotalProperty("totaldata"))
                                            )
                                                .Parameters(ps =>
                                                                {
                                                                    ps.Add(new StoreParameter("BranchID", "App.txtBranchID.value", ParameterMode.Raw));
                                                                    ps.Add(new StoreParameter("BatNbr", "App.cboBatNbr.value", ParameterMode.Raw));
                                                                    ps.Add(new StoreParameter("RefNbr", "App.txtRefNbr.value", ParameterMode.Raw));
                                                                })
                                        .Listeners(p =>
                                            {
                                                p.Load.Fn = "loadDataGrid";
                                                p.Update.Fn = "stoChanged";
                                            }))
                            .SortableColumns(false)
                            .SetAutoScroll(true)
                            .SelectionMemory(false)
                            .Listeners(lst =>
                            {
                                lst.Render.Handler = "HQ.common.control_render(this,'grdAR_Trans')";
                            })
                            .ColumnModel(
                                Html.X().RowNumbererColumn()
                                     , Html.X().Column().Text(Util.GetLang("LineType")).Width(100).DataIndex("LineType").Renderer("renderLineType")
                                        .Editor(
                                            HQ.Combo().ID("cboLineType").Name("cboLineType").HQProcedure("AR10100_pcLineType")
                                                .HQColumnShow("Descr").DisplayField("Descr").ValueField("Code")
                                                .HQHeightWidth(500, 400).ForceSelection(true)
                                                .HQParam(new StoreParameterCollection() { 
                                                        new StoreParameter() { Name = "@LangID", Value = "HQ.langID", Mode = ParameterMode.Raw }
                                                    })
                                                .HQDBSys(false)
                                                .LoadData()
                                                )


                                     , Html.X().Column().Text(Util.GetLang("InvtID")).Width(100).DataIndex("InvtId")
                                        .Editor(
                                          HQ.Combo().ID("cboInvtID").Name("cboInvtID").HQProcedure("AR10100_pcInventoryActiveByBranch")
                                              .HQColumnShow("InvtID,Descr,Descr1,BarCode,Color").DisplayField("InvtID").ValueField("InvtID")
                                              .HQHeightWidth(500, 400).ForceSelection(true)
                                              .HQParam(new StoreParameterCollection() { 
                                                    new StoreParameter() { Name = "@BranchID", Value = "HQ.cpnyID", Mode = ParameterMode.Raw }
                                                    })
                                              .HQDBSys(false)
                                             .Triggers(new FieldTrigger() { Icon = TriggerIcon.Clear, HideTrigger = false })
                                             .LoadData()
                                              .Listeners(lst =>
                                                {
                                                    lst.TriggerClick.Handler = "if (index == 0) { this.clearValue();}";                                                 
                                                })
                                            )
                                     , Html.X().NumberColumn().Format("0,000").ID("txtQty").Align(Alignment.Right).Text(Util.GetLang("Qty")).DataIndex("Qty").Width(100)
                                        .Editor(Html.X().NumberField().EnableKeyEvents(true).MinValue(0).DecimalPrecision(0))

                                     , Html.X().NumberColumn().Format("0,000").ID("txtUnitPrice").Align(Alignment.Right).Text(Util.GetLang("SalesPrice")).DataIndex("UnitPrice").Width(150)
                                        .Editor(Html.X().NumberField().MinValue(0).DecimalPrecision(0))

                                     , Html.X().NumberColumn().Format("0,000").ID("txtTranAmt").Align(Alignment.Right).Text(Util.GetLang("ExtAmt")).DataIndex("TranAmt").Width(150)
                                        .Editor(Html.X().NumberField().MinValue(0).DecimalPrecision(0))

                                      , Html.X().Column().ID("txtTranDesc").Text(Util.GetLang("Descr")).DataIndex("TranDesc").Width(150)
                                      .Editor(Html.X().TextField())

                                     , Html.X().Column().Text(Util.GetLang("TaxCat")).Width(100).DataIndex("TaxCat")
                                        .Editor(
                                          HQ.Combo().ID("cboTaxCat").Name("cboTaxCat").HQProcedure("AR10100_pcTaxCat")
                                             .HQColumnShow("CatID,Descr").DisplayField("CatID").ValueField("CatID")
                                             .HQHeightWidth(500, 400).ForceSelection(true)
                                             .HQDBSys(false)
                                             .LoadData()
                                             )

                                    , Html.X().Column().Text(Util.GetLang("TaxID")).Width(100).DataIndex("TaxID")
                                        .Editor(
                                            HQ.Combo().ID("cboTaxID").Name("cboTaxID").HQProcedure("AR10100_pcCustomerTaxes")
                                                .HQColumnShow("TaxID,Descr,TaxRate").DisplayField("TaxID").ValueField("TaxID")
                                                .HQHeightWidth(500, 400).MultiSelect(true).ForceSelection(true)
                                                .HQParam(new StoreParameterCollection() { 
                                                    new StoreParameter() { Name = "@CustID", Value = "App.cboCustId.getValue()", Mode = ParameterMode.Raw },
                                                    new StoreParameter() { Name = "@ShipToID", Value = "DEFAULT" , Mode = ParameterMode.Value},
                                                    new StoreParameter() { Name = "@BranchID", Value = "HQ.cpnyID", Mode = ParameterMode.Raw },
                                                    })
                                                .HQDBSys(false)//.AllowBlank(false)
                                                .Listeners(lst =>
                                                {
                                                
                                                    lst.Focus.Handler = "expand(App.cboTaxID,',');this.forceSelection=true;";

                                                })
                                                .LoadData()
                                                )



                          , Html.X().CommandColumn().MinWidth(200).Flex(1)
                                .Commands(
                                    Html.X().GridCommand()
                                        .Text(Util.GetLang("Reject"))
                                        .ToolTip(t =>
                                        {
                                            t.Text = Util.GetLang("Rejectrowchanges");
                                        })
                                        .CommandName("reject")
                                        .Icon(Icon.ArrowUndo)
                                )


                            .PrepareToolbar(t =>
                            {
                                t.Handler = "toolbar.items.get(0).setVisible(record.dirty);";
                            })
                            .Listeners(l =>
                            {
                                l.Command.Handler = "grd_Reject(record);";
                            })

                            )
                         .SelectionModel(Html.X().RowSelectionModel().ID("slmgrdAR_Trans").Mode(SelectionMode.Multi))
                            .Plugins(
                                Html.X()//Cho phep edit )
                                    .CellEditing()
                                    .ClicksToEdit(1)
                                    .Listeners(ls =>
                                    {
                                        ls.BeforeEdit.Fn = "grd_BeforeEdit";
                                        ls.Edit.Fn = "grd_Edit";
                                        ls.ValidateEdit.Fn = "grd_ValidateEdit";


                                    })
                            )
                        .BottomBar(
                                    X.PagingToolbar()
                                    .Items(
                                        X.Label("Page size:"),
                                        X.ToolbarSpacer(10),
                                        X.ComboBox()
                                        .Width(80)
                                        .Items("1", "2", "10", "20", "30", "50")
                                        .SelectedItems("50")
                                        .Listeners(l =>
                                            {
                                                l.Select.Fn = "HQ.grid.onPageSelect";
                                            })
                                    )
                                    .Plugins(X.ProgressBarPager().ID("pagDetail"))
                                )
                     )//end tabDoc

                    , X.Panel()
                                .ID("tabTax")
                                .Layout(LayoutType.VBox)
                                .LayoutConfig(config => { config.Add(new VBoxLayoutConfig() { Align = VBoxAlign.Stretch }); })
                                .Title(Util.GetLang("TAX"))
                                .Padding(3)
                                .Items(

                                        Html.X().GridPanel()
                                                        .Flex(1)
                                                        .ID("grdTaxTrans")
                                                        .ColumnLines(true)
                                                        .RowLines(true)
                                                        .StoreID("stoAR10100_pgLoadTaxTrans")
                                                        .ColumnModel(
                                                                        Html.X().RowNumbererColumn()
                                                                        , Html.X().Column().Text(Util.GetLang("LineRef")).DataIndex("LineRef").Width(150)
                                                                        , Html.X().Column().Text(Util.GetLang("TaxID")).DataIndex("TaxID").Width(150)
                                                                        , Html.X().NumberColumn().Align(Alignment.Right).Text(Util.GetLang("TxblAmt")).DataIndex("TxblAmt").Width(150).Format("0,000,000")
                                                                        , Html.X().NumberColumn().Align(Alignment.Right).Text(Util.GetLang("TaxAmt")).DataIndex("TaxAmt").Width(150).Format("0,000,000.00")
                                                                        , Html.X().NumberColumn().Align(Alignment.Right).Text(Util.GetLang("TaxRate")).DataIndex("TaxRate").Width(150).Format("0,000,000")
                                                                        , Html.X().Column().Text(Util.GetLang("TaxLevel")).DataIndex("TaxLevel").Width(150)
                                                                    )

                                        , X.BoxSplitter()
                                        , Html.X().GridPanel()
                                                        .Flex(1)
                                                        .ID("grdTaxDoc")
                                                        .ColumnLines(true)
                                                        .RowLines(true)
                                                            .Store(
                                                                        Html.X().Store()
                                                                        .ID("stoAR10100_LoadTaxDoc")
                                                                        .Model(
                                                                            Util.GenerateModel(typeof(AR10100_pgLoadTaxTrans_Result), "mdlAR10100_pgLoadTaxTransDoc", "")
                                                                        )
                                                                    )
                                                        .ColumnModel(
                                                                        Html.X().RowNumbererColumn()
                                                                        , Html.X().Column().Text(Util.GetLang("TaxID")).DataIndex("TaxID").Width(150)
                                                                        , Html.X().NumberColumn().Align(Alignment.Right).Text(Util.GetLang("TxblAmt")).DataIndex("TxblAmt").Width(150).Format("0,000,000")
                                                                        , Html.X().NumberColumn().Align(Alignment.Right).Text(Util.GetLang("TaxAmt")).DataIndex("TaxAmt").Width(150).Format("0,000,000")
                                                                        , Html.X().NumberColumn().Align(Alignment.Right).Text(Util.GetLang("TaxRate")).DataIndex("TaxRate").Width(150).Format("0,000,000")


                                                                    )


                                    )//tabTax     
                )

            )
        )
)
 
